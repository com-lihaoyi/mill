// This example demonstrates using Mill ``ScalaModule``s as build tasks: rather
// than pulling the code we need off of Maven Central, we instead build the code
// within the `bar` module as `bar/src/Bar.scala`.

package build
import mill._, scalalib._
import mill.util.Jvm

object foo extends ScalaModule {
  def scalaVersion = "2.13.8"
  def moduleDeps = Seq(bar)

  def sources = Task {
    bar.runner().run(args = super.sources())
    Seq(PathRef(Task.dest))
  }
}

object bar extends ScalaModule{
  def scalaVersion = "2.13.8"
  def ivyDeps = Agg(ivy"com.lihaoyi::os-lib:0.10.7")
}

// In this example, we use
// `Bar.scala` as a source-code pre-processor on the `foo` module source code:
// we override `foo.sources`, passing the `super.sources()` and `bar.runClasspath`
// to `bar.runner().run` along with a `Task.dest`, and returning a `PathRef(Task.dest)`
// as the new `foo.sources`. `bar` also depends on a third party library OS-Lib.
// The `runner().run` subprocess runs inside the `Task.dest` folder of the enclosing
// task automatically.

/** Usage

> mill foo.run
...
Foo.value: HELLO

*/

// This example does a trivial string-replace of "hello" with "HELLO", but is
// enough to demonstrate how you can use Mill ``ScalaModule``s to implement your
// own arbitrarily complex transformations. This is useful for build logic that
// may not fit nicely inside a `build.mill` file, whether due to the sheer lines
// of code or due to dependencies that may conflict with the Mill classpath
// present in `build.mill`
//
// `bar.runner().run` by default inherits the `mainClass`, `forkEnv`, `forkArgs`,
// from the owning module `bar`, and the working directory from the calling task's
// `Task.dest`. You can also pass in these parameters explicitly to `run()` as named
// arguments if you wish to override the defaults.
//
// [source,scala]
// ----
// trait Runner{
//   def run(args: os.Shellable,
//           mainClass: String = null,
//           forkArgs: Seq[String] = null,
//           forkEnv: Map[String, String] = null,
//           workingDir: os.Path = null,
//           useCpPassingJar: java.lang.Boolean = null)
//          (implicit ctx: Ctx): Unit
// }
// ----


