// == PythonModule moduleDeps
// This example shows how to add module dependency handling to `PythonModule`, making it ideal
// for complex projects that need dynamic dependencies and isolated environments for each module.

// ==== Extending `PythonModule` Trait

// Now, The `PythonModule` traitâ€™s `moduleDeps` allows dependencies between modules.
// Using `Task.traverse`, it gathers and verifies `upstream dependencies` in `typeCheck`
// and prepares their `source` files for execution in the `run` task.

package build
import mill._

/** Extended `PythonModule` for dependent modules. */
trait PythonModule extends Module {

  // List of module dependencies required by this module.
  def moduleDeps: Seq[PythonModule] = Nil

  def sources: T[PathRef] = Task.Source(millSourcePath / "src")
  def mainFileName: T[String] = Task { "main.py" }

  def setup: T[PathRef] = Task {
    val pythonVenv = Task.dest / "venv" / "bin" / "python3"

    os.call(("python3", "-m", "venv", Task.dest / "venv"))
    os.call((pythonVenv, "-m", "pip", "install", "mypy"))

    PathRef(pythonVenv)
  }

  def typeCheck: T[PathRef] = Task {
    // Checks upstream modules for error free code
    val upstreamTypeCheck = Task.traverse(moduleDeps)(_.typeCheck)()
    val pythonVenv = setup().path

    os.call(
      (pythonVenv, "-m", "mypy", "--strict", sources().path / mainFileName()),
      stdout = os.Inherit
    )

    PathRef(pythonVenv)
  }

  def run(args: mill.define.Args) = Task.Command {
    // Gets upstream modules Source Files
    val upstream = Task.traverse(moduleDeps)(_.sources)().zip(moduleDeps)

    for (((sourcesFolder), mod) <- upstream) {
      val destinationPath = Task.dest / mod.millSourcePath.subRelativeTo(build.millSourcePath)
      os.copy.over(sourcesFolder.path / os.up, destinationPath)
    }

    val pythonVenv = typeCheck().path

    os.call(
      (pythonVenv, sources().path / mainFileName(), args.value),
      env = Map("PYTHONPATH" -> Task.dest.toString),
      stdout = os.Inherit
    )
  }

}

// ==== Example setup with dependencies
//
// `qux` depends on `foo` and `foo.bar`, which export their APIs for use in `qux`.

object foo extends PythonModule {
  override def mainFileName: T[String] = Task { "foo.py" }
  object bar extends PythonModule {
    override def mainFileName: T[String] = Task { "bar.py" }
  }
}

object qux extends PythonModule {
  override def mainFileName: T[String] = Task { "qux.py" }
  // Defines dependencies on foo and foo.bar modules for qux.
  def moduleDeps: Seq[PythonModule] = Seq[PythonModule](foo, foo.bar)
}
// Below are the Files from Source Folders

// See, How we have imported the other files(foo.py & bar.py) functions in `qux.py` file

/** See Also: foo/src/foo.py */
/** See Also: foo/bar/src/bar.py */
/** See Also: qux/src/qux.py */

// To run this build script, use the following command.

/** Usage

> ./mill qux.run 10 20
Add: 10 + 20 = 30 | Multiply: 10 * 20 = 200 | Divide: 10 / 20 = 0.5

*/

// Task dependency graph, showing `foo` and `bar` tasks feeding into `qux`:
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   subgraph cluster_3 {
//     style=dashed
//     label=qux
//     "qux.setup" -> "qux.typeCheck" -> "qux.run"
//     "qux.sources" -> "qux.typeCheck"
//     "qux.mainFileName" -> "qux.typeCheck"
//     "qux.sources" -> "qux.run"
//     "qux.mainFileName" -> "qux.run"
//   }
//   subgraph cluster_1 {
//     subgraph cluster_2 {
//       style=dashed
//       label=bar
//       "bar.setup" -> "bar.typeCheck" -> "bar.run"
//       "bar.sources" -> "bar.typeCheck"
//       "bar.mainFileName" -> "bar.typeCheck"
//       "bar.sources" -> "bar.run"
//       "bar.mainFileName" -> "bar.run"
//     }
//     style=dashed
//     label=foo
//     "foo.setup" -> "foo.typeCheck" -> "foo.run"
//     "foo.sources" -> "foo.typeCheck"
//     "foo.mainFileName" -> "foo.typeCheck"
//     "foo.sources" -> "foo.run"
//     "foo.mainFileName" -> "foo.run"
//   }
//   "bar.typeCheck" -> "qux.typeCheck"  [color=green, penwidth=3]
//   "bar.sources" -> "qux.run"  [color=green, penwidth=3]
//   "foo.typeCheck" -> "qux.typeCheck"  [color=green, penwidth=3]
//   "foo.sources" -> "qux.run"  [color=green, penwidth=3]
// }
// ```

// Now Next, We will add External Library and Bundling Support
