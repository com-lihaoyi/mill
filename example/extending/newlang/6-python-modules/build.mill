// == Re-usable PythonModule
// This Example demonstrates the use of a `PythonModule` trait to manage Python Scripts within
// different objects in a Mill build.

// ==== Using Same PythonModule for Mutiple Objects

// The `PythonModule` trait simplifies Python project management within the `Mill` build tool by providing essential
// functionalities such as creating `virtual environment`, managing `source files`, `Checking code for Error`, and `executing Python` scripts.
// It ensures that users have a streamlined workflow by automating the setup of necessary tools 
// and organizing project files effectively. 

package build
import mill._

/** PythonModule Trait for Basic Python Pipeline in Mill Build Tool */
trait PythonModule extends Module {
  
  /** Returns the path to the source directory containing Python files. */
  def sources: T[PathRef] = Task.Source(millSourcePath / "src")

  /** Returns the name of the main Python file. */
  def mainFileName: T[String] = Task { "main.py" }

  /** This minimal setup provide basic Virtual Environment and Type Checking. */
  def setup: T[PathRef] = Task {
    // creating virtual environment
    os.call(("python3","-m","venv",Task.dest / "venv"))

    val pythonVenv = Task.dest / "venv" / "bin" / "python3"
    
    // installing mypy for Type Checking
    os.call((pythonVenv,"-m","pip","install","mypy"))

    PathRef(pythonVenv)
  }

  /** Creates Virtual env and check main file. */
  def typeCheck: T[PathRef] = Task {
    val pythonVenv = setup().path

    os.call(
      (pythonVenv,"-m","mypy","--strict",sources().path / mainFileName()),
      stdout = os.Inherit
    )

    PathRef(pythonVenv)
  }

  /** Runs the checked main Python file with given command-line arguments. */
  def run(args: mill.define.Args) = Task.Command {
    val pythonVenv = typeCheck().path
    
    os.call(
      (pythonVenv,sources().path / mainFileName(),args.value),
      stdout = os.Inherit
    )
  }
  
}

// ==== Example

// The script defines three key `objects` that extend the `PythonModule` trait, each object encapsulating a distinct runtime configuration.
// By allowing objects like `foo`, `bar`, and `qux` to extend the `PythonModule`, it promotes code reuse and modular design, 
// enabling easy access to common functionalities while facilitating customization for specific needs.

object foo extends PythonModule{
  override def mainFileName: T[String] = Task { "foo.py" }
  object bar extends PythonModule{
    override def mainFileName: T[String] = Task { "bar.py" }
    // Inherits all functionalities of PythonModule
  }
}

object qux extends PythonModule{
  override def mainFileName: T[String] = Task { "qux.py" }
  // Functions independently but has access to PythonModule methods
}

// We have used three different Python Scripts `foo/src/foo.py`, `foo/bar/src/bar.py`, `qux/src/qux.py` 

/** See Also: foo/src/foo.py */
/** See Also: foo/bar/src/bar.py */
/** See Also: qux/src/qux.py */


// Run the following commands to run each module, displaying unique outputs based on the configuration of each object:

/** Usage

> ./mill foo.run Mill 
Hello, Mill Foo!

> ./mill foo.bar.run Mill 
Hello, Mill Foo Bar!

> ./mill qux.run Mill
Hello, Mill Qux!

*/

// The Final working build, with a build graph that looks like this:

// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   subgraph cluster_3 {
//     style=dashed
//     label=qux
//     "qux.setup" -> "qux.typeCheck" -> "qux.run"
//     "qux.sources" -> "qux.typeCheck"
//     "qux.mainFileName" -> "qux.typeCheck"
//     "qux.sources" -> "qux.run"
//     "qux.mainFileName" -> "qux.run"
//   }
//   subgraph cluster_1 {
//     subgraph cluster_2 {
//       style=dashed
//       label=bar
//       "bar.setup" -> "bar.typeCheck" -> "bar.run"
//       "bar.sources" -> "bar.typeCheck"
//       "bar.mainFileName" -> "bar.typeCheck"
//       "bar.sources" -> "bar.run"
//       "bar.mainFileName" -> "bar.run"
//     }
//     style=dashed
//     label=foo
//     "foo.setup" -> "foo.typeCheck" -> "foo.run"
//     "foo.sources" -> "foo.typeCheck"
//     "foo.mainFileName" -> "foo.typeCheck"
//     "foo.sources" -> "foo.run"
//     "foo.mainFileName" -> "foo.run"
//   }
// }
// ```

// Next, we will look at how to Manage `Module Dependencies` for `Python` Using `Mill`.
