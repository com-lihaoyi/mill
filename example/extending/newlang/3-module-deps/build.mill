// This example extends `TypeScriptModule` to support `moduleDeps`.
//
// 1. The `def compile` task is considerably fleshed out: rather than using command
//    line flags, we generate a `tsconfig.json` file using the `ujson.Obj`/`ujson.Arr`
//    JSON factory methods from the bundled https://github.com/com-lihaoyi/upickle[uPickle] library.
//
// 2. `def compile` now returns two `PathRef`s: one containing the `.js` output to use in
//    `def run`, and one containing the `.d.ts` output to use in downstream ``compile``s.
//
// 2. `def moduleDeps` is used to allow different ``TypeScriptModule``s to depend on each
//    other, and we use `Task.traverse` to combine the upstream `compiledDefinitions` for
//    use in `compile`, and `compiledJavascript` for use in `run`

package build
import mill._

trait TypeScriptModule extends Module{
  def moduleDeps: Seq[TypeScriptModule] = Nil

  def npmInstall = Task{
    os.call(("npm", "install", "--save-dev", "typescript@5.6.3", "@types/node@22.7.8"))
    PathRef(Task.dest)
  }

  def sources = Task.Source(millSourcePath / "src")
  def allSources = Task{ os.walk(sources().path).filter(_.ext == "ts").map(PathRef(_)) }

  def compile: T[(PathRef, PathRef)] = Task{

    val nodeTypes = npmInstall().path / "node_modules/@types"
    val javascriptOut = Task.dest / "javascript"
    val declarationsOut = Task.dest / "declarations"

    val upstreamPaths =
      for(((jsDir, dTsDir), mod) <- Task.traverse(moduleDeps)(_.compile)().zip(moduleDeps))
        yield (mod.millSourcePath.subRelativeTo(build.millSourcePath) + "/*", dTsDir.path)

    val allPaths = upstreamPaths ++ Seq("*" -> sources().path)

    os.write(
      Task.dest / "tsconfig.json",
      ujson.Obj(
        "compilerOptions" -> ujson.Obj(
          "outDir" -> javascriptOut.toString,
          "declaration" -> true,
          "declarationDir" -> declarationsOut.toString,
          "typeRoots" -> ujson.Arr(nodeTypes.toString),
          "paths"  -> ujson.Obj.from(allPaths.map{case (k, v) => (k, ujson.Arr(s"$v/*"))})
        ),
        "files" -> allSources().map(_.path.toString),
      )
    )

    os.call(npmInstall().path / "node_modules/typescript/bin/tsc")
    (PathRef(javascriptOut), PathRef(declarationsOut))
  }

  def mainFileName = Task{ s"${millSourcePath.last}.js" }
  def run(args: mill.define.Args) = Task.Command{

    val upstream = Task.traverse(moduleDeps)(_.compile)().zip(moduleDeps)
    for(((jsDir, tTsDir), mod) <- upstream) {
      os.copy(jsDir.path, Task.dest / mod.millSourcePath.subRelativeTo(build.millSourcePath))
    }
    val mainFile = compile()._1.path / mainFileName()
    os.call(
      ("node", mainFile, args.value),
      stdout = os.Inherit,
      env = Map("NODE_PATH" -> Seq(".", compile()._1.path).mkString(":"))
    )
  }
}
// Note the use of `Task.traverse(moduleDeps)` in order to aggregate the `compile`
// output of the upstream modules, which is necessary both to configure the `tsc` TypeScript
// compiler in `compile` and also to set up the `node` working directory in `run`. This
// is a common pattern when defining language modules, whose module-level dependencies need
// to be translated into task-level dependencies
//
// Again, we can instantiate `TypeScriptModule` three times, but now `foo/src/foo.ts`
// and `foo/bar/src/bar.ts` export their APIs which are then imported in `qux/src/qux.ts`:

object foo extends TypeScriptModule{
  object bar extends TypeScriptModule
}
object qux extends TypeScriptModule{
  def moduleDeps = Seq(foo, foo.bar)
}

/** See Also: foo/src/foo.ts */
/** See Also: foo/bar/src/bar.ts */
/** See Also: qux/src/qux.ts */

// We can then invoke the `qux.run` method on each module from the command line:

/** Usage

> mill qux.run James Bond
Hello James Bond Professor

*/

// The dependency graph of tasks now looks like this, with the output of
// `foo.compile` and `bar.compile` now being fed into `qux.compile` (and
// ultimately `qux.run`):
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   subgraph cluster_3 {
//     style=dashed
//     label=qux
//     "qux.npmInstall" -> "qux.compile"
//     "qux.sources" -> "qux.allSources" -> "qux.compile" -> "qux.run"
//     "qux.mainFileName" -> "qux.run"
//   }
//   subgraph cluster_1 {
//     subgraph cluster_2 {
//       style=dashed
//       label=bar
//       "bar.npmInstall" -> "bar.compile"
//       "bar.sources" -> "bar.allSources" -> "bar.compile" -> "bar.run"
//       "bar.mainFileName" -> "bar.run"
//     }
//     style=dashed
//     label=foo
//     "foo.npmInstall" -> "foo.compile"
//     "foo.sources" -> "foo.allSources" -> "foo.compile" -> "foo.run"
//     "foo.mainFileName" -> "foo.run"
//   }
//   "bar.compile" -> "qux.compile"  [color=green, penwidth=3]
//   "foo.compile" -> "qux.compile"  [color=green, penwidth=3]
// }
// ```