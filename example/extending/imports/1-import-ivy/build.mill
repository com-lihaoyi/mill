
// The following example shows how to import the library `org.apache.commons:commons-text:1.12.0`
// into your build, so you can use it at build-time to safely generate escaped HTML snippets
// in your resource path for your application to use.

package build
import mill._, javalib._
import $ivy.`org.apache.commons:commons-text:1.12.0`
import org.apache.commons.text.StringEscapeUtils

object foo extends JavaModule {
  def scalaVersion = "2.13.8"

  def htmlSnippet = Task {
    "<div><h1>" +
      StringEscapeUtils.escapeHtml4("hello") +
    "</h1><p>" +
      StringEscapeUtils.escapeHtml4("world") +
    "</p></div>"
  }
  def resources = Task.Sources{
    os.write(Task.dest / "snippet.txt", htmlSnippet())
    super.resources() ++ Seq(PathRef(Task.dest))
  }
}
//
// This is a toy example: we generate a resource `snippet.txt` containing
// `<div><h1>hello</h1><p>world</p></div>` that the application can read at runtime.
// However, it demonstrates how you can easily move logic from application code at runtime
// to build logic at build time, while using the same set of JVM libraries and packages
// you are already familiar with. This makes it easy to pre-compute things at build time
// to reduce runtime latency or application startup times.
//

/** Usage

> mill foo.compile
compiling 1 Java source...
...

> mill foo.run
generated snippet.txt resource: <div><h1>hello</h1><p>world</p></div>

> mill show foo.assembly
".../out/foo/assembly.dest/out.jar"

> ./out/foo/assembly.dest/out.jar # mac/linux
generated snippet.txt resource: <div><h1>hello</h1><p>world</p></div>

*/
