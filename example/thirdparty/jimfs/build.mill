package build
import mill._, javalib._, publish._

def sharedCompileJvmDeps = Task {
  Seq(
    jvm"com.google.auto.service:auto-service:1.0.1",
    jvm"com.google.code.findbugs:jsr305:3.0.2",
    jvm"org.checkerframework:checker-compat-qual:2.5.5",
    jvm"com.ibm.icu:icu4j:73.1"
  )
}

object jimfs extends PublishModule with MavenModule {
  def publishVersion = "1.3.3.7"

  def pomSettings = PomSettings(
    description = artifactName(),
    organization = "com.google",
    url = "https://github.com/google/jimfs",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github(owner = "google", repo = "jimfs"),
    developers = Nil
  )

  def jvmDeps = sharedCompileJvmDeps() ++ Seq(
    jvm"com.google.guava:guava:31.1-android"
  )

  def javacOptions = Seq("-processor", "com.google.auto.service.processor.AutoServiceProcessor")

  object test extends MavenTests {
    def jvmDeps = sharedCompileJvmDeps() ++ Seq(
      jvm"junit:junit:4.13.2",
      jvm"com.google.guava:guava-testlib:31.1-android",
      jvm"com.google.truth:truth:1.1.3",
      jvm"com.github.sbt:junit-interface:0.13.2",
      jvm"com.ibm.icu:icu4j:73.1"
    )

    def testFramework = "com.novocode.junit.JUnitFramework"
  }
}

// JimFS is a small Java library implementing an in-memory filesystem. It is commonly
// used in test suites to validate filesystem operations without needing to write
// to disk.
//
// It has a relatively simple codebase structure, a single module and test suite.
// It has a number of compile-time-only dependencies shared between the library and
// test suite. One wrinkle is that it uses annotation processors as part of its build,
// which Mill supports by providing the relevant `jvmDeps` of the annotation processor
// and providing `javacOptions` to invoke it.
//
// Project home: https://github.com/google/jimfs

/** Usage

> ./mill jimfs.test
Test run com.google.common.jimfs.FileTest started
Test run com.google.common.jimfs.FileTest finished: 0 failed, 0 ignored, 7 total...
...

*/
