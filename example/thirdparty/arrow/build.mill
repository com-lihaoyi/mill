package build

import mill._, kotlinlib._, kotlinlib.js._
import mill.scalalib.CoursierModule
import mill.api.Result
import mill.testrunner.TestResult
import mill.scalalib.api.CompilationResult
import mill.kotlinlib.kover.KoverModule

object libraries {

  object versions {
    val coroutines = "1.9.0"
    val classgraph = "4.8.177"
    val dokka = "1.9.20"
    val kotest = "5.9.1"
    val kotlin = "2.0.21"
    val kotlinCompileTesting = "0.5.1"
    val kspVersion = "2.0.21-1.0.25"
    val kotlinxSerialization = "1.7.3"
    val mockWebServer = "4.12.0"
    val retrofit = "2.11.0"
    val moshi = "1.15.1"
    val cache4k = "0.13.0"
    // not used yet
    val compose = "1.7.4"
    val composePlugin = "1.7.0"
    val agp = "8.7.1"
    val androidCompileSdk = "34"
  }

  // libraries
  val coroutinesCoreJvm =
    ivy"org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${versions.coroutines}"
  val coroutinesCoreJs =
    ivy"org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versions.coroutines}"
  val coroutinesTestJvm =
    ivy"org.jetbrains.kotlinx:kotlinx-coroutines-test-jvm:${versions.coroutines}"
  val coroutinesTestJs =
    ivy"org.jetbrains.kotlinx:kotlinx-coroutines-test-js:${versions.coroutines}"
  val kotestAssertionsCoreJvm = ivy"io.kotest:kotest-assertions-core-jvm:${versions.kotest}"
  val kotestAssertionsCoreJs = ivy"io.kotest:kotest-assertions-core-js:${versions.kotest}"
  val kotestPropertyJvm = ivy"io.kotest:kotest-property-jvm:${versions.kotest}"
  val kotestPropertyJs = ivy"io.kotest:kotest-property-js:${versions.kotest}"
  val kotlinReflect = ivy"org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
  val kotlinStdlib = ivy"org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
  val kotlinTestJunit5 = ivy"org.jetbrains.kotlin:kotlin-test-junit5:${versions.kotlin}"
  val kotlinTestJs = ivy"org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"
  val kotlinxSerializationCoreJvm =
    ivy"org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${versions.kotlinxSerialization}"
  val kotlinxSerializationCoreJs =
    ivy"org.jetbrains.kotlinx:kotlinx-serialization-core-js:${versions.kotlinxSerialization}"
  val kotlinxSerializationJson =
    ivy"org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinxSerialization}"
  val kotlinxSerializationJsonJs =
    ivy"org.jetbrains.kotlinx:kotlinx-serialization-json-js:${versions.kotlinxSerialization}"
  val squareupOkhttpMockWebServer =
    ivy"com.squareup.okhttp3:mockwebserver:${versions.mockWebServer}"
  val squareupRetrofitLib = ivy"com.squareup.retrofit2:retrofit:${versions.retrofit}"
  val squareupRetrofitConverterGson =
    ivy"com.squareup.retrofit2:converter-gson:${versions.retrofit}"
  val squareupRetrofitConverterMoshi =
    ivy"com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
  val squareupRetrofitConverterKotlinxSerialization =
    ivy"com.squareup.retrofit2:converter-kotlinx-serialization:${versions.retrofit}"
  val squareupMoshiKotlin = ivy"com.squareup.moshi:moshi-kotlin:${versions.moshi}"
  val ksp = ivy"com.google.devtools.ksp:symbol-processing-api:${versions.kspVersion}"
  val kspGradlePlugin =
    ivy"com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:${versions.kspVersion}"
  val classgraph = ivy"io.github.classgraph:classgraph:${versions.classgraph}"
  val composeRuntime = ivy"androidx.compose.runtime:runtime:${versions.compose}"
  val kotlinCompileTesting = ivy"dev.zacsweers.kctfork:core:${versions.kotlinCompileTesting}"
  val kotlinCompileTestingKsp = ivy"dev.zacsweers.kctfork:ksp:${versions.kotlinCompileTesting}"
  val cache4kJs = ivy"io.github.reactivecircus.cache4k:cache4k-js:${versions.cache4k}"
  val cache4kJvm = ivy"io.github.reactivecircus.cache4k:cache4k-jvm:${versions.cache4k}"

  // plugins
  val kotlinxSerializationPlugin =
    ivy"org.jetbrains.kotlin:kotlin-serialization-compiler-plugin:${versions.kotlin}"
}

object `package` extends RootModule {

  // comment to disable test for the module
  val modulesWithTestingEnabled = Set[CoursierModule](
// these modules don't have hand-written tests
//    `arrow-libs`.core.`arrow-annotations`,
//    `arrow-libs`.core.`arrow-cache4k`,
//    `arrow-libs`.core.`arrow-core-high-arity`,

    `arrow-libs`.core.`arrow-atomic`,
    `arrow-libs`.core.`arrow-autoclose`,
    `arrow-libs`.core.`arrow-core-retrofit`,
    `arrow-libs`.core.`arrow-core-serialization`,
    `arrow-libs`.core.`arrow-core`,
    `arrow-libs`.core.`arrow-eval`,
    `arrow-libs`.core.`arrow-functions`,
    `arrow-libs`.fx.`arrow-collectors`,
    `arrow-libs`.fx.`arrow-fx-coroutines`,
    `arrow-libs`.fx.`arrow-fx-stm`,
// Cannot test this one - it relies on the module dependency in the .jar format, while Mill provides .class files
//    `arrow-libs`.optics.`arrow-optics-ksp-plugin`,
    `arrow-libs`.optics.`arrow-optics-reflect`,
    `arrow-libs`.optics.`arrow-optics`,

    `arrow-libs`.resilience.`arrow-resilience`
  )

  def majorVersion(version: String): String = version.split("\\.", 3).take(2).mkString(".")

  // TODO support Kotlin Multiplatform hierarchies
  // TODO add more targets once available
  trait ArrowMultiplatformModule extends CoursierModule { multiplatformRoot =>

    def jsModuleDeps: Seq[KotlinJsModule] = Nil
    def jvmModuleDeps: Seq[KotlinModule] = Nil
    def jsTestModuleDeps: Seq[KotlinJsModule] = Nil
    def jvmTestModuleDeps: Seq[KotlinModule] = Nil
    def jsIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def jvmIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def jsTestIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def jvmTestIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def jsCompileIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def jvmCompileIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]

    def jsKotlincOptions: T[Seq[String]] = Seq.empty[String]
    def jvmKotlincOptions: T[Seq[String]] = Seq.empty[String]
    def jsTestKotlincOptions: T[Seq[String]] = Seq.empty[String]
    def jvmTestKotlincOptions: T[Seq[String]] = Seq.empty[String]

    def jsTestTimeout: T[Long] = 30_000L

    def explicitApi: T[Boolean] = true

    protected def commonSourcesArg(sources: Seq[PathRef], commonSourcesDirName: String): String = {
      val files = os.walk(
        sources
          .map(_.path)
          .filter(_.toString().contains(commonSourcesDirName))
          .head
      )
        .filter(_.toIO.isFile)
      // TODO this is to prevent compilation failure in cases when there is actual declaration in Foo.kt and expect
      //  declaration in Foo.kt instead of Foo.[jvm,js,...].kt, because in this case symbols belong to the same module.
      // This is allowed with `-Xcommon-sources` flag, but probably will be prohibited in the future.
      // Ideally, it should be in the [[KotlinModule]] directly, but this implies [[KotlinModule]] should know where
      // common sources are, making some assumptions about layout.
      s"-Xcommon-sources=${files.mkString(",")}"
    }

    trait ArrowPlatformModule extends KotlinModule {
      def kotlinVersion = libraries.versions.kotlin
      def languageVersion = majorVersion(kotlinVersion())
      def apiVersion = majorVersion(kotlinVersion())
      def explicitApi = ArrowMultiplatformModule.this.explicitApi

      def platformCrossSuffix: String = millModuleSegments
        .value
        .collect { case l: mill.define.Segment.Label => l.value }
        .last

      override def millSourcePath = super.millSourcePath / os.up

      override def sources: T[Seq[PathRef]] = Task.Sources {
        val sourcesRootPath = millSourcePath / "src"
        var sources = Seq("common", platformCrossSuffix)
          .map(platform => PathRef(sourcesRootPath / s"${platform}Main" / "kotlin"))
          .filter(p => os.exists(p.path))
        if (platformCrossSuffix != "jvm") {
          val nonJvmSourcesPath = sourcesRootPath / "nonJvmMain" / "kotlin"
          if (os.exists(nonJvmSourcesPath)) {
            sources ++= Seq(PathRef(nonJvmSourcesPath))
          }
        }
        sources
      }

      override def kotlincOptions = super.kotlincOptions() ++ Seq("-Xexpect-actual-classes")
    }

    object jvm extends ArrowPlatformModule with KoverModule { outer =>
      def ivyDeps = super.ivyDeps() ++ jvmIvyDeps()
      def compileIvyDeps = super.compileIvyDeps() ++ jvmCompileIvyDeps()
      def moduleDeps = super.moduleDeps ++ jvmModuleDeps
      def kotlincOptions = super.kotlincOptions() ++ Seq(
        commonSourcesArg(sources(), "commonMain")
      ) ++ jvmKotlincOptions()
      object test extends KotlinTests with KoverTests with TestModule.Junit5 {
        def ivyDeps = super.ivyDeps() ++ jvmTestIvyDeps()
        def moduleDeps = super.moduleDeps ++ jvmTestModuleDeps
        def kotlincOptions = super.kotlincOptions() ++ jvmTestKotlincOptions()
        override def sources: T[Seq[PathRef]] = Task.Sources {
          val sourcesRootPath = outer.millSourcePath / "src"
          Seq("common", outer.platformCrossSuffix)
            .map(platform => PathRef(sourcesRootPath / s"${platform}Test" / "kotlin"))
            .filter(p => os.exists(p.path))
        }

        override def compile: T[CompilationResult] =
          if (!modulesWithTestingEnabled.contains(multiplatformRoot))
            Task { CompilationResult(T.dest, PathRef(T.dest)) }
          else super.compile
        override def test(args: String*): Command[(String, Seq[TestResult])] =
          if (!modulesWithTestingEnabled.contains(multiplatformRoot))
            Task.Command { ("", Seq.empty[TestResult]) }
          else super.test(args: _*)
      }
    }

    object js extends ArrowPlatformModule with KotlinJsModule { outer =>
      def ivyDeps = super.ivyDeps() ++ jsIvyDeps()
      def compileIvyDeps = super.compileIvyDeps() ++ jsCompileIvyDeps()
      def moduleDeps = super.moduleDeps ++ jsModuleDeps
      def kotlincOptions = super.kotlincOptions() ++ Seq(
        commonSourcesArg(sources(), "commonMain")
      ) ++ jsKotlincOptions()
      def kotlinJsRunTarget = Some(RunTarget.Node)

      object test extends KotlinTestPackageTests {
        def ivyDeps = super.ivyDeps() ++ jsTestIvyDeps()
        def moduleDeps = super.moduleDeps ++ jsTestModuleDeps
        def kotlincOptions = super.kotlincOptions() ++ jsTestKotlincOptions()
        def testTimeout = jsTestTimeout
        override def sources: T[Seq[PathRef]] = Task.Sources {
          val sourcesRootPath = outer.millSourcePath / "src"
          Seq("common", outer.platformCrossSuffix)
            .map(platform => PathRef(sourcesRootPath / s"${platform}Test" / "kotlin"))
            .filter(p => os.exists(p.path))
        }

        override def compile: T[CompilationResult] =
          if (!modulesWithTestingEnabled.contains(multiplatformRoot))
            Task { CompilationResult(T.dest, PathRef(T.dest)) }
          else super.compile
        override def test(args: String*): Command[(String, Seq[TestResult])] =
          if (!modulesWithTestingEnabled.contains(multiplatformRoot))
            Task.Command { ("", Seq.empty[TestResult]) }
          else super.test(args: _*)
      }
    }
  }

  trait ArrowJvmModule extends KotlinModule with KoverModule { jvmRoot =>

    def testModuleDeps: Seq[KotlinModule] = Nil
    def testRunModuleDeps: Seq[KotlinModule] = Nil
    def testIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def testCompileIvyDeps: T[Agg[Dep]] = Agg.empty[Dep]
    def testKotlincOptions: T[Seq[String]] = Seq.empty[String]

    def kotlinVersion = libraries.versions.kotlin
    def explicitApi = true
    def languageVersion = majorVersion(kotlinVersion())
    def apiVersion = majorVersion(kotlinVersion())

    override def sources: T[Seq[PathRef]] = Task.Sources {
      millSourcePath / "src" / "main" / "kotlin"
    }
    override def resources: T[Seq[PathRef]] = Task.Sources {
      millSourcePath / "src" / "main" / "resources"
    }

    object test extends KotlinTests with KoverTests with TestModule.Junit5 {
      override def sources: T[Seq[PathRef]] = Task.Sources {
        millSourcePath / os.up / "src" / "test" / "kotlin"
      }
      override def resources: T[Seq[PathRef]] = Task.Sources {
        millSourcePath / os.up / "src" / "test" / "resources"
      }
      def moduleDeps = super.moduleDeps ++ testModuleDeps
      def runModuleDeps = super.runModuleDeps ++ testRunModuleDeps
      def ivyDeps = super.ivyDeps() ++ testIvyDeps()
      def compileIvyDeps = super.compileIvyDeps() ++ testCompileIvyDeps()
      def kotlincOptions = super.kotlincOptions() ++ testKotlincOptions()
      override def compile: T[CompilationResult] = if (!modulesWithTestingEnabled.contains(jvmRoot))
        Task { CompilationResult(T.dest, PathRef(T.dest)) }
      else super.compile
      override def test(args: String*): Command[(String, Seq[TestResult])] =
        if (!modulesWithTestingEnabled.contains(jvmRoot))
          Task.Command { ("", Seq.empty[TestResult]) }
        else super.test(args: _*)
    }
  }

  object `arrow-libs` extends Module {
    object core extends Module {
      object `arrow-annotations` extends ArrowMultiplatformModule
      object `arrow-atomic` extends ArrowMultiplatformModule {
        def jvmTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.jvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.js)
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
      }
      object `arrow-autoclose` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-atomic`.jvm)
        def jvmTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.jvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm
        )
        def jvmTestKotlincOptions = Seq("-Xcontext-receivers")
        def jsModuleDeps = Seq(`arrow-atomic`.js)
        def jsTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.js)
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs
        )
      }
      object `arrow-cache4k` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-core`.jvm)
        def jvmIvyDeps = Agg(libraries.cache4kJvm)
        def jsModuleDeps = Seq(`arrow-core`.js)
        def jsIvyDeps = Agg(libraries.cache4kJs)
      }
      object `arrow-core-high-arity` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-core`.jvm)
        def jsModuleDeps = Seq(`arrow-core`.js)
      }
      object `arrow-core-retrofit` extends ArrowJvmModule {
        def moduleDeps = Seq(`arrow-core`.jvm)
        def compileIvyDeps = Agg(libraries.squareupRetrofitLib)
        def processors = Task {
          defaultResolver().resolveDeps(Agg(libraries.kotlinxSerializationPlugin))
        }

        def testKotlincOptions = Seq(s"-Xplugin=${processors().head.path}")
        def testModuleDeps = Seq(`arrow-core`.jvm)
        def testIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm,
          libraries.squareupOkhttpMockWebServer,
          libraries.squareupRetrofitConverterGson,
          libraries.squareupRetrofitConverterMoshi,
          libraries.kotlinxSerializationJson,
          libraries.squareupRetrofitConverterKotlinxSerialization,
          libraries.squareupMoshiKotlin
        )
      }
      object `arrow-core-serialization` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-core`.jvm)
        def jvmIvyDeps = Agg(libraries.kotlinxSerializationCoreJvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.kotlinxSerializationJson,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsModuleDeps = Seq(`arrow-core`.js)
        def jsIvyDeps = Agg(libraries.kotlinxSerializationCoreJs)
        def jsTestIvyDeps = Agg(
          libraries.kotlinxSerializationJsonJs,
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )

        def processors = Task {
          defaultResolver().resolveDeps(Agg(libraries.kotlinxSerializationPlugin))
        }
        def jsTestKotlincOptions = Seq(s"-Xplugin=${processors().head.path}")
        def jvmTestKotlincOptions = Seq(s"-Xplugin=${processors().head.path}")
        def jsTestTimeout = 60_000L
      }
      object `arrow-core` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-atomic`.jvm, `arrow-annotations`.jvm)
        def jvmIvyDeps = Agg(libraries.kotlinxSerializationCoreJvm)
        def jvmTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.jvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jvmKotlincOptions = Seq("-Xcontext-receivers")
        def jsModuleDeps = Seq(`arrow-atomic`.js, `arrow-annotations`.js)
        def jsIvyDeps = Agg(libraries.kotlinxSerializationCoreJs)
        def jsTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.js)
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
        def jsTestTimeout = 300_000L
      }
      object `arrow-eval` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-core`.jvm)
        def jsModuleDeps = Seq(`arrow-core`.js)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestIvyDeps = Agg(
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
      }
      object `arrow-functions` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(`arrow-atomic`.jvm, `arrow-annotations`.jvm)
        def jsModuleDeps = Seq(`arrow-atomic`.js, `arrow-annotations`.js)
        def jvmTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.jvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.js)
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
      }
    }

    object fx extends Module {
      object `arrow-collectors` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(core.`arrow-atomic`.jvm, `arrow-fx-coroutines`.jvm)
        def jvmIvyDeps = Agg(libraries.coroutinesCoreJvm)
        def jsModuleDeps = Seq(core.`arrow-atomic`.js, `arrow-fx-coroutines`.js)
        def jsIvyDeps = Agg(libraries.coroutinesCoreJs)

        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )

        def jsTestTimeout = 60_000L
      }
      object `arrow-fx-coroutines` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(core.`arrow-core`.jvm, core.`arrow-autoclose`.jvm)
        def jvmIvyDeps = Agg(libraries.coroutinesCoreJvm)
        def jsModuleDeps = Seq(core.`arrow-core`.js, core.`arrow-autoclose`.js)
        def jsIvyDeps = Agg(libraries.coroutinesCoreJs)

        def jvmTestModuleDeps = Seq(core.`arrow-core`.jvm, core.`arrow-atomic`.jvm)
        def jsTestModuleDeps = Seq(core.`arrow-core`.js, core.`arrow-atomic`.js)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
        def jsTestTimeout = 60_000L
      }
      object `arrow-fx-stm` extends ArrowMultiplatformModule {
        val additionalKotlincOptions = Seq("-Xconsistent-data-class-copy-visibility")
        def jvmModuleDeps = Seq(core.`arrow-core`.jvm)
        def jvmIvyDeps = Agg(libraries.coroutinesCoreJvm)
        def jsModuleDeps = Seq(core.`arrow-core`.js)
        def jsIvyDeps = Agg(libraries.coroutinesCoreJs)
        def jvmKotlincOptions = additionalKotlincOptions
        def jsKotlincOptions = additionalKotlincOptions

        def jvmTestModuleDeps = Seq(`arrow-fx-coroutines`.jvm)
        def jsTestModuleDeps = Seq(`arrow-fx-coroutines`.js)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
        def jsTestTimeout = 60_000L
      }
    }

    object optics extends Module {
      // TODO requires better Android support
      //  object `arrow-optics-compose` extends Module
      object `arrow-optics-ksp-plugin` extends ArrowJvmModule {
        def explicitApi = false
        def ivyDeps = Agg(libraries.ksp)
        def testIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm,
          libraries.classgraph,
          libraries.kotlinCompileTesting,
          libraries.kotlinCompileTestingKsp
        )

        def testRunModuleDeps = Seq(
          core.`arrow-annotations`.jvm,
          core.`arrow-core`.jvm,
          `arrow-optics`.jvm
        )
      }
      object `arrow-optics-reflect` extends ArrowJvmModule {
        def moduleDeps = Seq(core.`arrow-core`.jvm, `arrow-optics`.jvm)
        def ivyDeps = Agg(libraries.kotlinReflect)
        def testIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
      }
      object `arrow-optics` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(core.`arrow-core`.jvm)
        def jsModuleDeps = Seq(core.`arrow-core`.js)
        def jvmTestKotlincOptions = Seq(commonSourcesArg(jvm.test.sources(), "commonTest"))
        def jsTestKotlincOptions = Seq(commonSourcesArg(js.test.sources(), "commonTest"))

        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm,
          libraries.kotestAssertionsCoreJvm,
          libraries.kotestPropertyJvm
        )
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs,
          libraries.kotestAssertionsCoreJs,
          libraries.kotestPropertyJs
        )
      }
    }

    object resilience extends Module {
      object `arrow-resilience` extends ArrowMultiplatformModule {
        def jvmModuleDeps = Seq(core.`arrow-core`.jvm)
        def jvmIvyDeps = Agg(libraries.coroutinesCoreJvm)
        def jsModuleDeps = Seq(core.`arrow-core`.js)
        def jsIvyDeps = Agg(libraries.coroutinesCoreJs)

        def jvmTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.jvm)
        def jvmTestIvyDeps = Agg(
          libraries.kotlinTestJunit5,
          libraries.coroutinesTestJvm
        )
        def jsTestModuleDeps = Seq(fx.`arrow-fx-coroutines`.js)
        def jsTestIvyDeps = Agg(
          libraries.coroutinesTestJs
        )
      }
    }
  }
}

/** Usage

> sed -i.bak 's/.cause.shouldBeInstanceOf<SocketException>()/.cause.shouldBeInstanceOf<java.io.IOException>()/g' arrow-libs/core/arrow-core-retrofit/src/test/kotlin/arrow/retrofit/adapter/either/networkhandling/NetworkEitherCallAdapterTest.kt # fix wrong assertion

> ./mill -j5 __.compile
Compiling 6 Kotlin sources to ...arrow-libs/resilience/arrow-resilience/jvm/compile.dest/classes ...
Compiling 6 Kotlin sources to ...resilience/arrow-resilience/js/compile.dest/classes ...
Compiling 11 Kotlin sources to ...fx/arrow-fx-stm/jvm/compile.dest/classes ...
Compiling 11 Kotlin sources to ...fx/arrow-fx-stm/js/compile.dest/classes ...

> ./mill __.test
Test arrow.resilience...
Test arrow.collectors...
Test arrow.core...

> ./mill mill.kotlinlib.kover.Kover/htmlReportAll

> ./mill __:^TestModule.docJar

*/
