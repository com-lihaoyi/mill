package build
import mill._, javalib._
import mill.define.ModuleRef

object libraries {

  object versions {
    val bytebuddy = "1.14.18"
    val junitJupiter = "5.10.3"
    val errorprone = "2.23.0"
  }
  val junit4 = jvm"junit:junit:4.13.2"
  val junitJupiterApi = jvm"org.junit.jupiter:junit-jupiter-api:${versions.junitJupiter}"
  val junitJupiterParams = jvm"org.junit.jupiter:junit-jupiter-params:${versions.junitJupiter}"
  val junitPlatformLauncher = jvm"org.junit.platform:junit-platform-launcher:1.10.3"
  val junitJupiterEngine = jvm"org.junit.jupiter:junit-jupiter-engine:${versions.junitJupiter}"
  val junitVintageEngine = jvm"org.junit.vintage:junit-vintage-engine:${versions.junitJupiter}"
  val assertj = jvm"org.assertj:assertj-core:3.26.3"
  val hamcrest = jvm"org.hamcrest:hamcrest-core:2.2"
  val opentest4j = jvm"org.opentest4j:opentest4j:1.3.0"

  val bytebuddy = jvm"net.bytebuddy:byte-buddy:${versions.bytebuddy}"
  val bytebuddyagent = jvm"net.bytebuddy:byte-buddy-agent:${versions.bytebuddy}"
  val bytebuddyandroid = jvm"net.bytebuddy:byte-buddy-android:${versions.bytebuddy}"

  val errorprone = jvm"com.google.errorprone:error_prone_core:${versions.errorprone}"
  val errorproneTestApi = jvm"com.google.errorprone:error_prone_test_helpers:${versions.errorprone}"

  val autoservice = jvm"com.google.auto.service:auto-service:1.1.1"

  val objenesis = jvm"org.objenesis:objenesis:3.3"

  val osgi = jvm"org.osgi:osgi.core:8.0.0"
  val equinox = jvm"org.eclipse.platform:org.eclipse.osgi:3.20.0"
  val bndGradle = "biz.aQute.bnd:biz.aQute.bnd.gradle:6.4.0"

  val groovy = jvm"org.codehaus.groovy:groovy:3.0.22"
}

trait MockitoModule extends MavenModule {
  override def jvmWorker = ModuleRef(build.JvmWorkerJava11)
  def javacOptions = Seq("-encoding", "UTF-8")
  def testModuleDeps: Seq[JavaModule] = Nil
  def testJvmDeps: T[Seq[Dep]] = Seq.empty[Dep]
  def testRuntimeJvmDeps: T[Seq[Dep]] = Seq.empty[Dep]
  def testFramework = "com.novocode.junit.JUnitFramework"
  def testForkArgs: T[Seq[String]] = Seq.empty[String]

  def testFilteredSources: T[Seq[PathRef]] = Task { Seq.empty[PathRef] }

  object test extends MavenTests {
    def moduleDeps = super.moduleDeps ++ MockitoModule.this.testModuleDeps
    def testFramework = MockitoModule.this.testFramework
    def runJvmDeps = testRuntimeJvmDeps()
    def forkArgs = testForkArgs()
    def allSourceFiles = Task {
      val base = super.allSourceFiles()
      val filtered = testFilteredSources().toSet
      if (filtered.isEmpty) base
      else base.filterNot(filtered.contains)
    }
    def jvmDeps =
      testJvmDeps() ++
        Seq(
          libraries.hamcrest,
          libraries.junit4,
          libraries.bytebuddyagent,
          jvm"com.github.sbt:junit-interface:0.13.2"
        )
  }
}

object `package` extends RootModule with MockitoModule {

  object JvmWorkerJava11 extends JvmWorkerModule {
    def jvmId = "temurin:11.0.24"
  }

  def compileJvmDeps = Seq(
    libraries.hamcrest,
    libraries.junit4,
    libraries.bytebuddyagent,
    libraries.bytebuddy,
    libraries.opentest4j
  )

  def jvmDeps = Seq(
    libraries.objenesis
  )

  def testJvmDeps = Seq(
    libraries.assertj,
    libraries.junitJupiterApi,
    libraries.junitJupiterParams
  )

  def resources = Task {
    val subpath = os.SubPath("org/mockito/internal/creation/bytebuddy/inject/")
    os.copy(
      compile().classes.path / subpath / "MockMethodDispatcher.class",
      Task.dest / subpath / "MockMethodDispatcher.raw",
      createFolders = true
    )
    super.resources() ++ Seq(PathRef(Task.dest))
  }

  def testFilteredSources: T[Seq[PathRef]] = Task {
    // test `add_listeners_concurrently_sanity_check` is flaky
    Seq(PathRef(
      moduleDir / "src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java"
    ))
  }

  object subprojects extends Module {
    object android extends MockitoModule {
      def moduleDeps = Seq(build)
      def jvmDeps = Seq(libraries.bytebuddyandroid)
    }
    object errorprone extends MockitoModule {
      def compileJvmDeps = Seq(libraries.autoservice)
      def moduleDeps = Seq(build)
      def jvmDeps = Seq(libraries.errorprone)
      def testJvmDeps = Seq(libraries.errorproneTestApi)

      def forkArgs = Seq(
        //      "-processorpath", libraries.autoservice,
        "-Xbootclasspath/a:${configurations.errorproneJavac.asPath}",
        "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.type=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"
      )

      def javacOptions = Seq(
        "--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
      )
    }
    object extTest extends MockitoModule {
      def moduleDeps = Seq(build, `junit-jupiter`)
      def testModuleDeps = Seq(build.test)
      def testJvmDeps = Seq(
        libraries.junit4,
        libraries.assertj,
        libraries.junitJupiterApi
      )

      def testRuntimeJvmDeps = Seq(
        libraries.junitJupiterEngine,
        libraries.junitVintageEngine,
        libraries.junitPlatformLauncher
      )
    }

    object inlineTest extends MockitoModule {
      def testModuleDeps = Seq(build)
      def testJvmDeps = Seq(libraries.junit4, libraries.assertj)
    }

//    object `java21-test` extends MockitoModule{
//      def testModuleDeps = Seq(mockito)
//      def testJvmDeps = Seq(libraries.junit4, libraries.assertj)
//    }

    object `junit-jupiter` extends MockitoModule {
      def moduleDeps = Seq(build)

      def jvmDeps = Seq(libraries.junitJupiterApi)
      def testFramework = "com.github.sbt.junit.jupiter.api.JupiterFramework"
      def testJvmDeps = Seq(
        libraries.assertj,
        libraries.junitPlatformLauncher,
        jvm"com.github.sbt.junit:jupiter-interface:0.11.4"
      )

      def testRuntimeJvmDeps = Seq(
        libraries.junitJupiterEngine
      )
    }

    object junitJupiterExtensionTest extends MockitoModule {
      def testFramework = "com.github.sbt.junit.jupiter.api.JupiterFramework"
      def testModuleDeps = Seq(`junit-jupiter`)
      def testJvmDeps = Seq(libraries.assertj, libraries.junitJupiterApi)
      def testRuntimeJvmDeps = Seq(
        libraries.junitJupiterEngine,
        libraries.junitPlatformLauncher,
        jvm"com.github.sbt.junit:jupiter-interface:0.11.4"
      )
    }
    object junitJupiterInlineMockMakerExtensionTest extends MockitoModule {
      def testFramework = "com.github.sbt.junit.jupiter.api.JupiterFramework"
      def testModuleDeps = Seq(`junit-jupiter`)
      def testJvmDeps = Seq(libraries.assertj, libraries.junitJupiterApi)
      def testRuntimeJvmDeps = Seq(
        libraries.junitJupiterEngine,
        libraries.junitPlatformLauncher,
        jvm"com.github.sbt.junit:jupiter-interface:0.11.4"
      )
    }
    object junitJupiterParallelTest extends MockitoModule {
      def testFramework = "com.github.sbt.junit.jupiter.api.JupiterFramework"
      def testModuleDeps = Seq(`junit-jupiter`)
      def testJvmDeps = Seq(libraries.junitJupiterApi)
      def testRuntimeJvmDeps = Seq(
        libraries.junitJupiterEngine,
        libraries.junitPlatformLauncher,
        jvm"com.github.sbt.junit:jupiter-interface:0.11.4",
        libraries.bytebuddy
      )
    }
    object `memory-test` extends MockitoModule {
      def testModuleDeps = Seq(build)
      def testJvmDeps = Seq(libraries.assertj)
      def testForkArgs = Seq("-Xmx128m")
    }

//    object `osgi-test` extends MockitoModule {
//      def testModuleDeps = Seq(mockito)
//      def testJvmDeps = Seq(libraries.junit4, libraries.osgi)
//      def testRuntimeJvmDeps = Seq(libraries.equinox)
//      trait BundleModule extends MockitoModule{
//        def bundleName: String = moduleSegments.last.value
//        override def moduleDir = `osgi-test`.moduleDir
//        def sources = Task.Sources(moduleDir / "src" / bundleName / "java")
//
//        def manifest = super.manifest().add(
//          "Bundle-Name" -> bundleName,
//          "Bundle-SymbolicName" -> bundleName,
//          "Bundle-Name" -> "Mockito Mock Library for Java. Core bundle requires Byte Buddy and Objenesis.",
//          "Bundle-SymbolicName" -> "org.mockito.mockito-core",
////          "Bundle-Version" -> s"$${version_cleanup;0.0.0}",
//          "-versionpolicy" -> "[${version;==;${@}},${version;+;${@}})",
//          "Export-Package" -> "org.mockito.internal.*;status=INTERNAL;mandatory:=status;version=0.0.0,org.mockito.*;version=0.0.0",
//          "Import-Package" -> Seq(
//            "net.bytebuddy.*;version=\"[1.6.0,2.0)\"",
//            "junit.*;resolution:=optional",
//            "org.junit.*;resolution:=optional",
//            "org.hamcrest;resolution:=optional",
//            "org.objenesis;version=\"[3.1,4.0)\"",
//            "org.opentest4j.*;resolution:=optional",
//            "org.mockito.*"
//          ).mkString(","),
//          "-removeheaders" -> "Private-Package",
//          "Automatic-Module-Name" -> "org.mockito",
//          "-noextraheaders" -> "true"
//        )
//      }
//
//      object testBundle extends BundleModule{
//        def moduleDeps = Seq(`osgi-test`.test, otherBundle)
//        def jvmDeps = Seq(libraries.osgi)
//      }
//
//      object otherBundle extends BundleModule{
//        def moduleDeps = Seq(`osgi-test`.test)
//        def jvmDeps = Seq(libraries.osgi)
//      }
//
//      object testRuntimeBundles extends JavaModule{
//        def unmanagedClasspath = Seq(testBundle.jar(), otherBundle.jar(), mockito.jar())
//        def jvmDeps = Seq(libraries.bytebuddy, libraries.bytebuddyagent, libraries.objenesis)
//      }
//
//      def testForkArgs = Seq(
//        s"-DtestRuntimeBundles=${testRuntimeBundles.runClasspath().map(_.path).distinct.filter(os.exists(_)).mkString(java.io.File.pathSeparator)}"
//      )
//    }
    object `programmatic-test` extends MockitoModule {
      def testModuleDeps = Seq(build)
      def testJvmDeps = Seq(libraries.junit4, libraries.assertj)
    }
    object proxy extends MockitoModule {
      def testModuleDeps = Seq(build)
      def testJvmDeps = Seq(libraries.junit4, libraries.assertj)
    }
    object subclass extends MockitoModule {
      def testModuleDeps = Seq(build)
      def testJvmDeps = Seq(libraries.junit4, libraries.assertj)
    }
  }
}

// Run a few smoketests on the mockito repo, compiling everything (including tests)
// but only running the subset of tests that run quickly
/** Usage

> sed -i.bak 's/assertEquals(50, settings.getStubbingLookupListeners().size())//g' src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java # disable flaky test

> sed -i.bak 's/    @Test//g' src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java # disable flaky test

> ./mill -j5 __.compile

> ./mill __.test
Test org.mockitoinline.StaticMockTest.testStaticMockSimple...
Test org.mockito.internal.creation.MockSettingsImplTest.validates_invocation_listeners finished...
Test org.mockitousage.junitrunner.StubbingWarningsJUnitRunnerTest.shows_arg_mismatch_warnings_when_test_fails finished...
Test org.mockitousage.session.MockitoSessionTest.allows_updating_strictness finished...
...

*/
