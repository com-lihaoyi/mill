package build

import mill._, javascriptlib._

object `package` extends RootModule with TypeScriptModule with TsLintModule {
  def moduleName = "core"
  def npmDeps = Seq("whatwg-fetch@3.6.20")
  def npmDevDeps = Seq(
    "@swc/core@1.10.12",
    "@types/whatwg-fetch@0.0.33",
    //    "vitest@2.1.6",
    //    "typescript@5.3.2",
    "unbuild@2.0.0"
  )
  def moduleDeps = Seq()

  def npmLintDeps = Seq(
    "@typescript-eslint/eslint-plugin@5.42.1",
    "@typescript-eslint/parser@5.42.1"
  )

  def options =
    super.options() + (
      "ts-node" -> ujson.Obj(
        "swc" -> ujson.True,
        "esm" -> ujson.True
      )
    )

  def compilerOptions =
    super.compilerOptions() + (
      "noImplicitAny" -> ujson.True,
      "noImplicitThis" -> ujson.True,
      "strictNullChecks" -> ujson.True,
      "declarationMap" -> ujson.True,
      "skipLibCheck" -> ujson.True,
      "strict" -> ujson.True,
      "forceConsistentCasingInFileNames" -> ujson.True,
      "module" -> ujson.Str("ES2022"),
      "target" -> ujson.Str("es6"),
      "lib" -> ujson.Arr.from(Seq("es6", "es2018.asyncgenerator", "dom"))
    )

  object test extends TypeScriptTests with TestModule.Vitest

  object examples extends TypeScriptModule {
    object abort extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"abort-all-requests.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
    }

    object `fill-in-middle` extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"fill.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
      def enableEsm = true
    }

    object multimodal extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"multimodal.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
      def enableEsm = true
    }

    object `pull-progress` extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"pull.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
      def enableEsm = true
    }

    object structured_outputs extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12", "zod@3.24.1", "zod-to-json-schema@3.24.1")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"structured-outputs.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
      def compilerOptions =
        super.compilerOptions() + (
          "module" -> ujson.Str("nodenext"),
          "moduleResolution" -> ujson.Str("nodenext"),
          "target" -> ujson.Str("es6")
        )
    }

    object tools extends TypeScriptModule {
      def npmDeps = Seq("ollama@0.5.12")
      def sources = Task.Sources(moduleDir)
      def mainFileName = s"calculator.ts"
      def mainFilePath = Task { compile()._2.path / mainFileName() }
      def compilerOptions =
        super.compilerOptions() + (
          "module" -> ujson.Str("nodenext"),
          "moduleResolution" -> ujson.Str("nodenext"),
          "target" -> ujson.Str("es6")
        )
    }
  }
}

//// The Ollama JavaScript library provides the easiest way to integrate
//// your JavaScript project with Ollama. https://github.com/ollama/ollama
//
//// Project home: https://github.com/ollama/ollama-js

/** Usage

> ./mill compile

> ./mill test
...
.../index.test.ts (15 tests) ...
...
...Test Files  1 passed (1)
...     Tests  15 passed (15)
...
*/
