import mill._
import mill.scalalib._

object Dependencies {
  val kotlinVersion = "1.9.10"

  // Compile dependencies
  val arrowCore = ivy"io.arrow-kt:arrow-core:1.2.4"
  val arrowFxCoroutines = ivy"io.arrow-kt:arrow-fx-coroutines:1.2.4"
  val arrowResilience = ivy"io.arrow-kt:arrow-resilience:1.2.4"
  val arrowFxStm = ivy"io.arrow-kt:arrow-fx-stm:1.2.4"
  val arrowCollectors = ivy"io.arrow-kt:arrow-collectors:1.2.0"

  // Test dependencies
  val kotlinTest = ivy"org.jetbrains.kotlin:kotlin-test:2.0.21"
  val kotest = ivy"io.kotest:kotest-runner-junit5:5.9.1"
  val mockk = ivy"io.mockk:mockk:1.13.13"

  val compileDeps = Seq(arrowCore, arrowFxCoroutines, arrowResilience, arrowFxStm, arrowCollectors)
  val testDeps = Seq(kotlinTest, kotest, mockk)
}

trait KotlinModule extends JavaModule {
  def kotlinVersion = Dependencies.kotlinVersion

  // Compile dependencies for Kotlin
  override def compileIvyDeps = Agg.from(Dependencies.compileDeps)

  // Test dependencies for Kotlin (use JUnit or another test framework)
  def testIvyDeps = Agg.from(Dependencies.testDeps)

  // Custom test task for Kotlin
  override def test() = T {
    val testDeps = resolveDeps(testIvyDeps)()
    val testCp = runClasspath() ++ testDeps
    zincWorker.worker().runTests(
      testCp.map(_.path),
      Agg(compile().classes.path),
      forkArgs = ForkArgs()
    )
  }
}

object `arrow-core-app` extends KotlinModule {
  def moduleDeps = Seq(`arrow-core-lib`, `arrow-fx-lib`)
}

object `arrow-core-lib` extends KotlinModule {
  def ivyDeps = Agg(Dependencies.arrowCore)
}

object `arrow-fx-lib` extends KotlinModule {
  def ivyDeps = Agg(Dependencies.arrowFxCoroutines)
}

object `arrow-resilience-lib` extends KotlinModule {
  def ivyDeps = Agg(Dependencies.arrowResilience)
}

object `arrow-fx-stm-lib` extends KotlinModule {
  def ivyDeps = Agg(Dependencies.arrowFxStm)
}

object `arrow-collectors-lib` extends KotlinModule {
  def ivyDeps = Agg(Dependencies.arrowCollectors)
}

object `arrow-samples` extends KotlinModule {
  def moduleDeps = Seq(`arrow-core-app`, `arrow-resilience-lib`, `arrow-fx-stm-lib`, `arrow-collectors-lib`)
  def ivyDeps = Agg[Dep]()
}

