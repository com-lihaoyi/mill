// Mill allows you to break up your `build.mill` file into smaller files by defining the
// build-related logic for any particular subfolder as a `package.mill` file in that subfolder.
// This can be very useful to keep large Mill builds maintainable, as each folder's build logic
// gets co-located with the files that need to be built, and speeds up compilation of the
// build logic since each `build.mill` or `package.mill` file can be compiled independently when
// it is modified without re-compiling all the others.
//
// Usage of sub-folder `package.mill` files is enabled by the magic import `import $packages._`

package build
import $packages._

import mill._, scalalib._

trait MyModule extends ScalaModule {
  def scalaVersion = "2.13.11"
}

/** See Also: foo/package.mill */

/** See Also: bar/qux/package.mill */

//
// In this example, the root `build.mill` only contains the `trait MyModule`, but it is
// `foo/package.mill` and `bar/qux/package.mill` that define modules using it. The modules
// defined in `foo/package.mill` and `bar/qux/package.mill` are automatically nested within
// `foo` and `bar.qux` respectively, and can be referenced from the command line as below:

/** Usage

> ./mill resolve __
bar
...
bar.qux.mymodule
...
bar.qux.mymodule.compile
...
foo
...
foo.compile

> ./mill bar.qux.mymodule.compile

> ./mill foo.compile

> ./mill foo.run --foo-text hello --bar-qux-text world
Foo.value: hello
BarQux.value: <p>world</p>
*/

// Note that in this example, `foo/package.mill` defines `object module extends RootModule`,
// and so the name `.module` does not need to be provided at the command line. In contrast,
// `bar/qux/package.mill` defines `object mymodule` that does not extend `RootModule`, and so
// we need to explicitly reference it with a `.mymodule` suffix.
//
// `package.mill` files are only discovered in direct subfolders of the root `build.mill` or
// subfolders of another folder containing a `package.mill`; Hence in this example, we need
// an `bar/package.mill` to be present for `bar/qux/package.mill` to be discovered, even
// though `bar/package.mill` is empty