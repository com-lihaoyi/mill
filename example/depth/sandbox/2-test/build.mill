// Mill also creates sandbox folders for test suites to run in. Consider the
// following build with two modules `foo` and `bar`, and their test suites
// `foo.test` and `bar.test`:

package build
import mill.*, javalib.*

trait MyModule extends JavaModule {
  object test extends JavaTests, TestModule.Junit4
}

object foo extends MyModule {
  def moduleDeps = Seq(bar)
}

object bar extends MyModule

// For the sake of the example, both test modules contain tests that exercise the
// logic in their corresponding non-test module, but also do some basic filesystem
// operations at the same time, writing out a `generated.html` file and then reading it:

/** See Also: foo/src/foo/Foo.java */
/** See Also: foo/test/src/foo/FooTests.java */
/** See Also: bar/src/bar/Bar.java */
/** See Also: bar/test/src/bar/BarTests.java */

// Both test suites can be run via

/** Usage
> ./mill __.test
*/

// Without sandboxing, due to the tests running in parallel, there is a race condition:
// it's possible that `FooTests` may write the file, `BarTests` write over it, before
// `FooTests` reads the output from `BarTests`. That would cause non-deterministic
// flaky failures in your test suite that can be very difficult to debug and resolve.
//
// With Mill's test sandboxing, each test runs in a separate folder: the `.dest` folder
// of the respective task and module. For example:
//
// - `foo.test` runs in `out/foo/test/testForked.dest/`
// - `bar.test` runs in `out/bar/test/testForked.dest/`
//
// As a result, each test's `generated.html` file is written to its own dedicated
// working directory, without colliding with each other on disk:

/** Usage

> find . | grep generated.html
.../out/foo/test/testForked.dest/sandbox/generated.html
.../out/bar/test/testForked.dest/sandbox/generated.html

> cat out/foo/test/testForked.dest/sandbox/generated.html
<h1>hello</h1>

> cat out/bar/test/testForked.dest/sandbox/generated.html
<p>world</p>

*/

// As each test suite runs in a different working directory by default, naive usage
// reading and writing to the filesystem does not cause tests to interefere with
// one another, which helps keep tests stable and deterministic even when run in
// parallel
//
// === Escaping the Test Sandbox

// Within a test, you can use the `MILL_WORKSPACE_ROOT` environment variable
// to access the workspace root directory:

object qux extends JavaModule {
  object test extends JavaTests, TestModule.Junit4
}

/** See Also: qux/src/qux/Qux.java */
/** See Also: qux/test/src/qux/QuxTests.java */

/** Usage
> ./mill qux.test


> find . | grep .html
...
.../out/qux/test/testForked.dest/sandbox/foo.html

> cat out/qux/test/testForked.dest/sandbox/foo.html
<h1>foo</h1>

*/

//
// === Disabling Test Sandboxing
//
// Test sandboxing can be disabled by setting `def testSandboxWorkingDir = false`
// on your test module, which makes your unit tests run in the root of your
// project workspace, with full access to the project files on disk.
//
// Disabling the test sandbox can be useful when migrating existing projects, as
// other build tools like Maven, Gradle or SBT do not enforce such sandboxes by default,
// so many tests are written with the assumption they run in the project root. But
// it is advisable to use or adopt the default config of `def testSandboxWorkingDir = true`
// where possible as that will ensure that inputs to tests are properly tracked by
// the build tool, so features like xref:cli/flags.adoc#_watch_w[] or
// xref:large/selective-execution.adoc[] are able to precisely determine when a test needs
// to be run and when it can be skipped.
