// === `Task.dest`
// The standard way of working with a task's `.dest/` folder is through the `Task.dest`
// property. This is available within any task, and gives you access to the
// `out/<module-names>/<task-name>.dest/` folder to use. The `.dest/` folder for
// each task is lazily initialized when `Task.dest` is referenced and used:

package build
import mill.*
import mill.api.BuildCtx

object foo extends Module {
  def tDestTask = Task { println(Task.dest.toString) }
}

/** Usage
> ./mill foo.tDestTask
.../out/foo/tDestTask.dest
*/

// If you really need to reference paths outside of the `Task.dest`, you can do
// so via `BuildCtx.workspaceRoot`.

// === Filesystem Read/Write Checks
//
// Mill enforces limits on what you can read and write while a task is executing.
// In general, a task may only write to its own `Task.dest` folder, and may only
// read from the ``PathRef``s provided to it from upstream tasks

def bannedWriteTask = Task {
  os.write(BuildCtx.workspaceRoot / "banned-path", "hello")
}

/** Usage
> ./mill bannedWriteTask
error: ...Writing to banned-path not allowed during execution of `bannedWriteTask`
*/

def bannedReadTask = Task {
  os.read(BuildCtx.workspaceRoot / "build.mill")
}

/** Usage
> ./mill bannedReadTask
error: ...Reading from build.mill not allowed during execution of `bannedReadTask`
*/

def bannedReadTask2 = Task {
  os.read(BuildCtx.workspaceRoot / "out/foo/tDestTask.json")
}

/** Usage
> ./mill bannedReadTask2
error: ...Reading from out/foo/tDestTask.json not allowed during execution of `bannedReadTask2`
*/

// Furthermore, code _outside_ of a task that runs during module initialization can only
// read from disk if wrapped in a `BuildCtx.watchValue` block. This ensures that such
// reads are tracked by Mill's `--watch` and cache-invalidation logic.

val listed = BuildCtx.watchValue(os.list(BuildCtx.workspaceRoot).map(_.last))

// === Bypassing Task Sandboxing
//
// You can bypass Mill's filesystem read/write limitations via
// `BuildCtx.withFilesystemCheckerDisabled`. Note that this bypasses the
// best-practices that Mill tries to enforce on your tasks and may result in strange
// bugs around caching, parallelism, and invalidation, so you shouldn't do this unless
// you really know what you are doing:

def bannedWriteTaskOverridden = Task {
  BuildCtx.withFilesystemCheckerDisabled {
    os.write(BuildCtx.workspaceRoot / "banned-path", "hello")
    println(os.read(BuildCtx.workspaceRoot / "banned-path"))
  }
}

/** Usage
> ./mill bannedWriteTaskOverridden
hello
*/

// You can also disable it globally by passing in `--no-filesystem-checker` to Mill:

/** Usage
> ./mill --no-filesystem-checker bannedReadTask
*/

//== `os.pwd` redirection

// === Task `os.pwd` redirection
// Mill also redirects the `os.pwd` property from https://github.com/com-lihaoyi/os-lib[OS-Lib],
// such that that also points towards a running task's own `.dest/` folder

def osPwdTask = Task { println(os.pwd.toString) }

/** Usage
> ./mill osPwdTask
.../out/osPwdTask.dest
*/

// The redirection of `os.pwd` applies to `os.proc`, `os.call`, and `os.spawn` methods
// as well. In the example below, we can see the `python3` subprocess we spawn prints
// its `os.getcwd()`, which is our `osProcTask.dest/` sandbox folder:

def osProcTask = Task {
  println(os.call(("python3", "-c", "import os; print(os.getcwd())")).out.trim())
}

/** Usage
> ./mill osProcTask
.../out/osProcTask.dest
*/

// === Non-task `os.pwd` redirection
//
// Lastly, there is the possibily of calling `os.pwd` outside of a task. When outside of
// a task there is no `.dest/` folder associated, so instead Mill will redirect `os.pwd`
// towards an empty `sandbox/` folder in `out/mill-daemon/...`:

val externalPwd = os.pwd
def externalPwdTask = Task { println(externalPwd.toString) }

/** Usage
> ./mill externalPwdTask
.../out/mill-daemon/sandbox
*/
