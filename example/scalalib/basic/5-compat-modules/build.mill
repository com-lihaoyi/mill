//// SNIPPET:ALL
// Mill's default folder layout of `foo/src/` and `foo/test/src` differs from that
// of `sbt`'s `foo/src/main/scala/` and `foo/src/test/scala/`. If you are
// migrating an existing codebase from `sbt`, you can use Mill's `SbtModule` and
// `SbtTests` as shown below to preserve filesystem compatibility with an existing
// `sbt` build:

/** See Also: build.mill.yaml */

// `SbtModule`/`CrossSbtModule` are variants of `ScalaModule`/`CrossScalaModule`
// that use the more verbose folder layout of `sbt`, Maven, and other tools:
//
// - `src/main/scala/`
// - `src/test/scala/`
// - `src/integration/scala/`
//
// Rather than Mill's
//
// - `src/`
// - `test/src/`
// - `integration/src/`
//
//
// This is especially useful if you are migrating to Mill, as during the migration a
// particular module may be built using both `sbt` and Mill at the
// same time. That means that during migration, you can leave all your source files
// in place while setting up your Mill build, and do not need to invasively move them
// around to match the Mill default module layout.
//
// Although the source layout of these compatibility modules is different from the
// default `ScalaModule`, the command-line usage is the same:

/** Usage

> ./mill compile
compiling 1 Scala source...

> ./mill test.compile
compiling 1 Scala source...

> ./mill test.testForked
+ foo.FooTests...hello ...

> ./mill test
+ foo.FooTests.hello ...

> ./mill integration
+ foo.FooIntegrationTests.hello ...

*/

// For more details on migrating from other build tools, see xref:migrating/migrating.adoc[]
