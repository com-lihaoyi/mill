// Mill also allows you to run single-file {language} programs easily from the command-line,
// even those that contain third-party dependencies or other such configuration. These can be
// useful as a replacement for Bash scripts, letting you write small scripts or programs
// in {language} with full access to third-party libraries and other build-tool features.
//
// For example, given the single-file program below, it can be run directly using Mill:

//// SNIPPET:FILE
/** See Also: Foo.scala */

/** Usage
> ./mill Foo.scala --text "hello world"
compiling 1 Scala source to...
<h1>hello world</h1>
*/

//// SNIPPET:END

// The `./mill Foo.{language-ext}` syntax is shorthand for `./mill -f Foo.{language-ext} run`
// or `./mill --file Foo.{language-ext} run`, which can also be passed explicitly. The
// explicit `-f`/`--file` also allows you to call other tasks on the single-file project,
// e.g. bundling it into an assembly:

//// SNIPPET:MORE

/** Usage
> ./mill -f Foo.scala run --text hello
<h1>hello</h1>
*/

/** Usage
> ./mill -f Foo.scala show assembly # show the output of the assembly task
".../out/assembly.dest/out.jar"

> java -jar ./out/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

*/

//// SNIPPET:END

// For more details on single-file projects, see
// xref:{language-small}lib/module-config.adoc#_configuring_single_file_projects[Configuring Single-File Projects]
// The rest of the examples below discuss the Mill config for building larger projects
// beyond the single-file project format discussed above, using a dedicated `build.mill`
// file to provide additional flexibility in setting up your project.
//
