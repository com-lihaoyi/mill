//// SNIPPET:BUILD

package build
import mill.*, scalalib.*

object foo extends ScalaModule {
  def scalaVersion = "3.7.1"
  def mvnDeps = Seq(
    mvn"com.lihaoyi::scalatags:0.13.1",
    mvn"com.lihaoyi::mainargs:0.7.6"
  )

  object test extends ScalaTests {
    def mvnDeps = Seq(mvn"com.lihaoyi::utest:0.8.9")
    def testFramework = "utest.runner.Framework"
  }
}

// This is a basic Mill build for a single `ScalaModule`, with two
// third-party dependencies and a test suite using the uTest framework.
//
//// SNIPPET:END
//
// You can download this example project using the *download* link above
// if you want to try out the commands below yourself, or browse the full sources
// of the example (including supporting files) via the *browse* link. the `./mill` script
// (`./mill.bat` on windows) takes care of downloading and caching any further dependencies,
// including downloading a JVM if you do not already have one. All examples
// in this documentation site are executable and are continually exercised as
// part of Mill's CI workflows, and they range from the simple hello-world
// projects on this page to more sophisticated
// xref:{language-small}lib/web-examples.adoc[web build examples] or
// xref:{language-small}lib/build-examples.adoc[example
// builds for real-world projects]
//
// The source code for this module lives in the `src/` folder.
// Output for this module (compiled files, resolved dependency lists, ...)
// lives in `out/`.

//// SNIPPET:TREE
// ----
// build.mill
// foo/
//     src/
//         Foo.scala
//     resources/
//         ...
//     test/
//         src/
//             FooTests.scala
// out/foo/
//     compile.json
//     compile.dest/
//     ...
//     test/
//         compile.json
//         compile.dest/
//         ...
// ----
//
// NOTE: The default Mill source folder layout `foo/src/` differs from that of `sbt`'s
// `foo/src/main/scala`.
// If you wish to use the `sbt` source folder layout, e.g. for migrating
// an existing codebase, you should use
// xref:#_sbt_compatible_modules[`sbt`-Compatible Modules]
//
//// SNIPPET:END
//
//// SNIPPET:DEPENDENCIES
//
// This example project uses two third-party dependencies - MainArgs for CLI
// argument parsing, Scalatags for HTML generation - and uses them to wrap a
// given input string in HTML templates with proper escaping.
//
// Typical usage of a `ScalaModule` is shown below:

/** Usage

> ./mill resolve foo._ # List what tasks are available to run
foo.assembly
...
foo.compile
...
foo.run
...

> ./mill inspect foo.compile # Show documentation and inputs of a task
foo.compile(ScalaModule.scala:...)
    Compiles the current module to generate compiled classfiles/bytecode.
Inputs:
    foo.scalaVersion
    foo.upstreamCompileOutput
    foo.allSourceFiles
    foo.compileClasspath

> ./mill foo.compile # compile sources into classfiles
...
compiling 1 Scala source to...

> ./mill foo.run # run the main method, if any
error: Missing argument: --text <str>

> ./mill foo.run --text hello
<h1>hello</h1>

> ./mill foo.test
...
+ foo.FooTests...simple ...  <h1>hello</h1>
+ foo.FooTests...escaping ...  <h1>&lt;hello&gt;</h1>

> ./mill foo.assembly # bundle classfiles and libraries into a jar for deployment

> ./mill show foo.assembly # show the output of the assembly task
".../out/foo/assembly.dest/out.jar"

> java -jar ./out/foo/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/foo/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

> # Note that on windows you need to rename `out.jar` to `out.bat` to run it
> cp ./out/foo/assembly.dest/out.jar out.bat # windows

> ./out.bat --text hello # windows
<h1>hello</h1>

*/

//// SNIPPET:END

// The output of every Mill task is stored in the `out/` folder under a name
// corresponding to the task that created it. e.g. The `foo.assembly` task puts its
// metadata output in `out/foo/assembly.json`, and its output files in
// `out/foo/assembly.dest`. You can also use `show` to print out the
// metadata output for a particular task, or `inspect` to print metadata about
// the task itself (docs, source location, etc.)
//
// Additional Mill tasks you would likely need include:
//
// [source,console]
// ----
// > ./mill resolve __ # recursively list all tasks and modules that are available
//
// > ./mill foo.runBackground # run the main method in the background
//
// > ./mill clean <task>  # delete the cached output of a task, terminate any runBackground
//
// > ./mill foo.launcher      # prepares a foo/launcher.dest/run you can run later
//
// > ./mill foo.jar           # bundle the classfiles into a jar suitable for publishing
//
// > ./mill -i foo.console    # start a Scala console within your project
//
// > ./mill -i foo.repl       # start an Ammonite Scala REPL within your project
//
// > ./mill -w foo.compile    # watch input files and re-compile whenever a file changes
// ----
//
// The most common *tasks* that Mill can run are cached tasks, such as
// `compile`, and un-cached *commands* such as `foo.run`. Cached tasks do not
// re-evaluate unless one of their inputs changes, whereas commands re-run every
// time. See the documentation for xref:fundamentals/tasks.adoc[Tasks] for
// details on the different task types.
//
// Mill build files are xref:depth/why-scala.adoc[written in Scala], but you do not need
// to have prior experience in Scala to read or write them. Like Gradle Groovy or Maven
// XML, anyone can learn enough Scala for Mill without needing to become an expert in
// the language.
