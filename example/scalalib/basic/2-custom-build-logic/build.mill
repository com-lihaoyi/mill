// Mill makes it very easy to customize your build graph, overriding portions
// of it with custom logic. In this example, we override the JVM `resources` of
// our `{language}Module` - normally the `resources/` folder - to instead contain a
// single generated text file containing the line count of all the source files
// in that module

//// SNIPPET:BUILD
package build
import mill._, scalalib._

object foo extends ScalaModule {
  def scalaVersion = "2.13.11"

  /** Total number of lines in module source files */
  def lineCount = Task {
    allSourceFiles().map(f => os.read.lines(f.path).size).sum
  }

  /** Generate resources using lineCount of sources */
  override def resources = Task {
    os.write(Task.dest / "line-count.txt", "" + lineCount())
    super.resources() ++ Seq(PathRef(Task.dest))
  }
}

//// SNIPPET:END

// * `override def resources` replaces the previous `resource`
// folder provided by `{language}Module` (labelled `resources.super` below), including
// both the previous resource folder `super.resources()` together with the `Task.dest`
// folder of the new task which contains a `lint-count.txt` file we write.
//

// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   allSourceFiles -> lineCount -> resources -> run
//   "resources.super" -> "resources"
//   "resources.super" [color=white]
//   allSourceFiles [color=white]
//   run [color=white]
// }
// ```
//
// * `os.read.lines` and `os.write` come
// from the https://github.com/com-lihaoyi/os-lib[OS-Lib] library, which is
// one of Mill's xref:fundamentals/bundled-libraries.adoc[Bundled Libraries].
// You can also import any JVM library you want from Maven Central using
// xref:extending/import-ivy-plugins.adoc[import $ivy], so you are not limited
// to what is bundled with Mill.
//
// * The `override` keyword is optional in Mill. It is shown above for clarity, but can
// be elided for conciseness.
//
// This generated `line-count.txt` file can then be loaded and used at runtime, as see
// in the output of `mill run` below.
//
//
/** Usage

> mill foo.run
...
Line Count: 17

> mill show foo.lineCount
17

> mill inspect foo.lineCount
foo.lineCount(build.mill:...)
    Total number of lines in module source files
Inputs:
    foo.allSourceFiles
*/

//
// If you're not familiar with what tasks you can `override` or how they are related,
// you can explore the existing tasks via autocomplete in your IDE, or use the
// xref:cli/builtin-commands.adoc#_visualize[mill visualize].
//
// Custom user-defined tasks in Mill such as `def lineCount` above benefit from all
// the same things that built-in tasks do: automatic caching (in the
// xref:fundamentals/out-dir.adoc[out/ folder]), parallelism (configurable via xref:cli/flags.adoc#_jobs_j[-j/--jobs
// flag]), inspectability (via xref:cli/builtin-commands.adoc#_show[show] and xref:cli/builtin-commands.adoc#_inspect[inspect]), and so on.
// While these things may not matter for such a simple example that runs
// quickly, they ensure that custom build logic remains performant and
// maintainable even as the complexity of your project grows.
//
