// By default, dependencies are resolved from https://central.sonatype.com/[Maven Central],
// the standard package repository for JVM languages like Java, Kotlin, or Scala. You
// can also add your own resolvers by overriding the `repositoriesTask` task in the module:

//// SNIPPET:BUILD1
package build
import mill._, scalalib._
import mill.define.ModuleRef
import coursier.maven.MavenRepository

val sonatypeReleases = Seq(
  MavenRepository("https://oss.sonatype.org/content/repositories/releases")
)

object foo extends ScalaModule {
  def scalaVersion = "2.13.8"

  def ivyDeps = Agg(
    ivy"com.lihaoyi::scalatags:0.12.0",
    ivy"com.lihaoyi::mainargs:0.6.2"
  )

  def repositoriesTask = Task.Anon {
    super.repositoriesTask() ++ sonatypeReleases
  }
}

//// SNIPPET:END

// Mill uses the https://get-coursier.io/[Coursier] dependency resolver, and reads
// Coursier config files automatically.
//
// You can configure Coursier to use an alternate download location for Maven Central
// artifacts via a `mirror.properties` file:
//
// [source,properties]
// ----
// central.from=https://repo1.maven.org/maven2
// central.to=http://example.com:8080/nexus/content/groups/public
// ----
//
// Note theses default config file locatations:
//
// * Linux: `~/.config/coursier/mirror.properties`
// * MacOS: `~/Library/Preferences/Coursier/mirror.properties`
// * Windows: `C:\Users\<user_name>\AppData\Roaming\Coursier\config\mirror.properties`
//
// You can also set the environment variable `COURSIER_MIRRORS` or the jvm property `coursier.mirrors` to specify config file location.


// To add custom resolvers to the initial bootstrap of the build, you can create a
// custom `ZincWorkerModule` (named after the https://github.com/sbt/zinc[Zinc Incremental compiler]
// used to compile the `build.mill` files) and override the `zincWorker` method in your
// `ScalaModule` by pointing it to that custom object:

//// SNIPPET:BUILD2

object CustomZincWorkerModule extends ZincWorkerModule with CoursierModule {
  def repositoriesTask = Task.Anon { super.repositoriesTask() ++ sonatypeReleases }
}

object bar extends ScalaModule {
  def scalaVersion = "2.13.8"
  def zincWorker = ModuleRef(CustomZincWorkerModule)
  // ... rest of your build definitions

  def repositoriesTask = Task.Anon {super.repositoriesTask() ++ sonatypeReleases}
}

//// SNIPPET:END

/** Usage

> ./mill foo.run --text hello

> ./mill bar.compile

*/

//
// === Working without access to Maven Central
//
// Under some circumstances (e.g. corporate firewalls), you may not have access maven central. The typical symptom will be error messages which look like this;
//
// ----
// 1 tasks failed
// mill.scalalib.ZincWorkerModule.classpath
// Resolution failed for 1 modules:
// --------------------------------------------
//   com.lihaoyi:mill-scalalib-worker_2.13:0.11.1
//         not found: C:\Users\partens\.ivy2\local\com.lihaoyi\mill-scalalib-worker_2.13\0.11.1\ivys\ivy.xml
//         download error: Caught java.io.IOException (Server returned HTTP response code: 503 for URL: https://repo1.maven.org/maven2/com/lihaoyi/mill-scalalib-worker_2.13/0.11.1/mill-scalalib-worker_2.13-0.11.1.pom) while downloading https://repo1.maven.org/maven2/com/lihaoyi/mill-scalalib-worker_2.13/0.11.1/mill-scalalib-worker_2.13-0.11.1.pom
// ----
//
// It is expected that basic commands (e.g. clean) will not work, as Mill saying it is unable to resolve it's own, fundamental, dependencies. Under such circumstances, you will normally have access to some proxy, or other corporate repository which resolves maven artifacts. The strategy is simply to tell mill to use that instead.
//
// The idea is to set an environment variable COURSIER_REPOSITORIES (see coursier docs). The below command should pass the environment variable to the `mill` command.
//
// ----
//  COURSIER_REPOSITORIES=https://packages.corp.com/artifactory/maven/ mill resolve _
// ----
//
// If you are using millw, a more permanent solution could be to set the environment variable at the top of the millw script, or as a user environment variable etc.
//
//