// :api-spotless: {site-url}/api/latest/mill/scalalib/spotless

// If your project has file groups each requiring different formatting,
// you may want to give Mill's https://github.com/diffplug/spotless[Spotless] plugin a try.
// It supports formatting all files with a single command
// as opposed to using a different plugin/command for each group.

// We define a module, containing cross Scala modules, that extends
// link:{api-spotless}/SpotlessModule.html[SpotlessModule] and
// provide a JSON configuration file with the format specifications.

package build

import mill.Cross
import mill.scalalib.CrossScalaModule
import mill.scalalib.spotless.SpotlessModule

object `package` extends SpotlessModule {
  object lib extends Cross[LibModule]("2.13.15", "3.7.0")
  trait LibModule extends CrossScalaModule
}

/** See Also: lib/src/A.java */
/** See Also: lib/src-2/B.scala */
/** See Also: lib/src-3/B.scala */
/** See Also: .scalafmt.conf */
/** See Also: .scalafmt3.conf */
/** See Also: .spotless-formats.json */

// As per the specifications:

// * All Java files are to be formatted using `PalantirFormatJava` step.
// * All Scala 2 files are to be formatted using `Scalafmt` step with the configuration in `.scalafmt.conf`.
// * All Scala 3 files are to be formatted using `Scalafmt` step with the configuration in `.scalafmt3.conf`.

// NOTE: Most fields have default values and can be omitted in the JSON file.
// An example is the `ScalaFmt.configFile` field that references the `.scalafmt.conf` file.

// NOTE: If no `.scalafmt.conf` file is provided, the default configuration from `scalafmt` is used.
// Otherwise, you must also specify the `ScalaFmt.version` field in the JSON file.
//
// NOTE: as `.mill` files use Scala 3 syntax, we need the `.scalafmt.conf` above to
// configure ScalaFmt to use Scala 3 compatible formatting
//
// Next, we run the inherited `spotless` command to check/apply the format specifications.

/** Usage
> ./mill spotless --check     # check fails initially
checking format in 1 java files
format errors in lib/src/A.java
checking format in 1 scala files
format errors in lib/src-2/B.scala
checking format in 1 scala files
format errors in lib/src-3/B.scala
checking format in 1 scala files
format errors in build.mill
format errors in 4 files
error: ...format check failed for 4 files

> ./mill spotless             # auto-fix format
formatting lib/src/A.java
formatting lib/src-2/B.scala
formatting lib/src-3/B.scala
formatting build.mill
formatted 4 files

> ./mill spotless           # fast incremental format
1 java files are already formatted
1 scala files are already formatted
1 scala files are already formatted
*/

// This demonstrates how different file groups can be formatted with a single command.

// For the full list of format steps and configuration options, please refer to the
// link:{api-spotless}/Format.html[API documentation].

// TIP: As shown, for a multi-module project, it is sufficient to extend `SpotlessModule` in your
// build root module and define a format specification for each use-case.

// You can also run `spotless` xref:fundamentals/modules.adoc#_external_modules[globally]
// if you prefer not to have to extend `SpotlessModule`.

/** Usage
> ./mill mill.scalalib.spotless.SpotlessModule/ --check
checking format in 1 java files
checking format in 1 scala files
checking format in 1 scala files
format check completed
*/
