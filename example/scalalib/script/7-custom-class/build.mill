// By default, Mill single-file {language} modules inherit their behavior from the builtin
// `mill.script.{language}Module`.
// However, you can also customize them to inherit from a custom `Module` class that you define
// as part of your meta-build in `mill-build/src/`. For example, if we want to add a resource
// file generated by processing the source file of the script, this can be done in a custom
// `LineCount{language}Module` as shown below:

//// SNIPPET:USAGE
/** See Also: Qux.scala */
/** See Also: mill-build/src/LineCountScalaModule.scala */

/** Usage

> ./mill Qux.scala
...
Line Count: 15

> ./mill show Qux.scala:lineCount
15
*/
//// SNIPPET:END

// Your custom `LineCount{language}Module` must be a `class` take a
// `mill.script.ScriptModule.Config` as a parameter that is passed to the
// `mill.script.{language}Module`. Custom script module classes allows you to
// customize the semantics of your Java, Scala, or Kotlin single-file script modules.
// If you have a large number of scripts with a similar configuration, or you need
// customizations that cannot be done in the YAML build header, placing these customizations
// in a custom script module class can let you centrally define the behavior and standardize
// it across all scripts that inherit it via `extends.`
//
// Note that single-file scripts can only inherit from a single concrete module `class`,
// unlike normal xref:javalib/intro.adoc#_config_based_modules[config-based] or
// xref:javalib/intro.adoc#_programmatic_modules[programmatic modules] that can inherit
// from one-or-more abstract module `trait`s. This difference arises from the way scripts
// are instantiated dynamically when resolved, rather than being compiled ahead-of-time like
// other modules are.
