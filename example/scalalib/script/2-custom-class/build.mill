// By default, single-file Mill script modules inherit their behavior from the standard
// `mill.javalib.JavaModule`, `mill.scalalib.ScalaModule`, or `mill.scalalib.KotlinModule`.
// However, you can also customize it to inherit from a custom `Module` class that you define
// as part of your meta-build in `mill-build/src/`. For example, if we want to add a resource
// file generated by processing the source file of the script, this can be done in a custom
// `LineCount{language}Module` as shown below:

//// SNIPPET:USAGE
/** See Also: mill-build/src/LineCountScalaModule.scala */
/** See Also: Qux.scala */
/** Usage

> ./mill Qux.scala:run
...
Line Count: 17

> ./mill show Qux.scala:lineCount
17
*/

//// SNIPPET:END
// Your custom `LineCount{language}Module` must be a `class` take two parameters
// `val millScriptFile: os.Path`, and `override val moduleDeps: Seq[JavaModule]` that will be
// populated by Mill, and inherit from `mill.script.{language}.Base` or some other subclass of
// `mill.script.ScriptModule`. This can then be used via `//| extends: LineCount{language}Module`
// in the header of your script file.
//
// Custom script module classes allows you to customize the semantics of your Java, Scala, or Kotlin
// single-file script modules. If you have a large number of scripts with a similar configuration,
// or you need customizations that cannot be done in the YAML build header, placing these
// customizations in a custom script module class can let you centrally define the behavior
// and standardize it across all scripts that inherit it via `extends.`
