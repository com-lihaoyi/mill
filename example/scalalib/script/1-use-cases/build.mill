// Mill Single-file {language} programs can make it more convenient to script simple command-line
// workflows interacting with files, subprocesses, and HTTP endpoints. This section walks through
// a few examples where one-off single-file {language} programs can be useful in day-to-day
// development.
//
// === JSON API Crawler
//// SNIPPET:CRAWLER
// Below is a simple script using the bundled libraries to write a
// program that crawls wikipedia's JSON API and saves the crawl results to a file:

/** See Also: Crawler.scala */

/** Usage
> ./mill Crawler.scala --start-article singapore --depth 2
... seen: HashSet(
  "Calling code",
  "+65",
  "British Empire",
  "1st Parliament of Singapore",
...
)

> cat fetched.json
[
    "Calling code",
    "+65",
    "British Empire",
    "1st Parliament of Singapore",
    ...
]

*/

//// SNIPPET:END
//
// === HTML Web Scraper
// Below is another web crawler, but instead of interacting with Wikipedia via a JSON API
// it scrapes the website's HTML pages using JSoup. JSoup is not bundled with Mill, but
// can be included easily via `mvnDeps` header declaration:
//// SNIPPET:SCRAPER
/** See Also: Scraper.scala */

/** Usage
> ./mill Scraper.scala --start-article singapore --depth 1
Scraper.scala:21 seen: HashSet(
  "Hokkien",
  "Conscription_in_Singapore",
  "Malaysia_Agreement",
  "Government_of_Singapore",
...
*/

//// SNIPPET:END

// === Web Server
// This example shows off running a simple webserver in a single-file script. While
// a production-quality website is a lot more complex and would need a proper `build.mill`
// file, sometimes you just need a simple webserver running for local testing or experimentation.
// In these scenarios, writing a single-file script in {language} to run the server is a great
// way to start, and it can always grow into a more full-featured project later if necessary.
//
//
//// SNIPPET:WEBSERVER
// In this example, the webserver script uses of the https://github.com/com-lihaoyi/cask[Cask] framework
// to run the web server
/** See Also: WebServer.scala */

/** Usage
> ./mill WebServer.scala:runBackground

> curl -d 'hello world' localhost:8080/reverse-string
dlrow olleh

*/
//// SNIPPET:END
// === Database Queries
// This example shows populating and querying a simple database using a {language} script.
// While you often want to query databases using SQL directly, sometimes it is useful to be
// be able to query them programmatically from {language}, possibly making use of the {language}
// libraries and application code you use in the rest of your codebase. It uses a local
// Sqlite database populated by the contents of a local `sqlite-customers.sql` file.
//
//
//// SNIPPET:DATABASE
//
// In this case, we make use of the popular https://github.com/com-lihaoyi/scalasql[ScalaSql]
// library to perform the queries:

/** See Also: Database.scala */

/** Usage
> ./mill Database.scala 2011-01-01
James Bond
叉烧包

*/
//// SNIPPET:END
//
//// === Static Site Generator
// This example is a small static site generator written as a single-file {language} script.
// It lists markdown files in a `post/` folder, converts them to HTML using the
// https://github.com/commonmark/commonmark-java[Commonmark-Java] library, wraps them in
// a HTML template and writes them to HTML files in an `out/` folder along with an `index.html`
// page that links to them:
//
//
//// SNIPPET:STATICSITE
//

/** See Also: StaticSite.scala */

/** Usage
> ./mill -i StaticSite.scala

> cat site-out/post/my-first-post.html
<!DOCTYPE html><html><body><h1><a>Blog</a> / My First Post</h1><p>Sometimes you want numbered lists:</p>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
</body></html>

*/
//// SNIPPET:END
//
// '''
//
// While initially single-file {language} programs may be a bit more verbose than the equivalent
// Bash script containing `cp` or `curl` commands, as the script grows in complexity the value
// of IDE support, typechecking, and JVM libraries makes writing them in {language} an attractive
// proposition. This is especially true if you already have developers fluent in {language} which
// may not be as familiar with the intricacies of writing robust and maintainable Bash code.
