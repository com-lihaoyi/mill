//// SNIPPET:BUILD
package build
import mill._, scalalib._
import mill.scalalib.Assembly._

object foo extends ScalaModule {
  def moduleDeps = Seq(bar)
  def scalaVersion = "2.13.8"
  def ivyDeps = Agg(ivy"com.lihaoyi::os-lib:0.10.7")
  def assemblyRules = Seq(
    // all application.conf files will be concatenated into single file
    Rule.Append("application.conf"),
    // all *.conf files will be concatenated into single file
    Rule.AppendPattern(".*\\.conf"),
    // all *.temp files will be excluded from a final jar
    Rule.ExcludePattern(".*\\.temp"),
    // the `shapeless` package will be relocated under the `shade` package
    Rule.Relocate("shapeless.**", "shade.shapless.@1")
  )
}

object bar extends ScalaModule {
  def scalaVersion = "2.13.8"
}
//// SNIPPET:END

// When you make a runnable jar of your project with `assembly` command,
// you may want to exclude some files from a final jar (like signature files,
// and manifest files from library jars), and merge duplicated files (for
// instance `reference.conf` files from library dependencies).
//
// By default mill excludes all `+*.sf+`, `+*.dsa+`, `+*.rsa+`, and
// `META-INF/MANIFEST.MF` files from assembly, and concatenates all
// `reference.conf` files. You can also define your own merge/exclude rules.

/** Usage

> ./mill foo.assembly

> unzip -p ./out/foo/assembly.dest/out.jar application.conf || true
Bar Application Conf
Foo Application Conf

> java -jar ./out/foo/assembly.dest/out.jar
Loaded application.conf from resources:...
...Foo Application Conf
...Bar Application Conf

*/

// Note that when running the assembly directly via `./out.jar`, you can configure
// JVM flags via the `JAVA_OPTS` environment variable, and select the JVM
// to use via `JAVA_HOME`.

/** Usage

> JAVA_OPTS=-Dtest.property=1337 ./out/foo/assembly.dest/out.jar
Loaded test.property: 1337

*/
