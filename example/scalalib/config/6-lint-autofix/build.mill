// Mill config-based `build.mill.yaml` modules support all the same linting
// features as the more flexible programmatic module definitions, as described
// in xref:{language-small}lib/linting.adoc[Linting {language} Projects]. This section covers two
// common workflows: autoformatting and auto-fixing your {language} module.
//
//// SNIPPET:LINT
// === Autoformatting
//
// To autoformat your Scala code with https://scalameta.org/scalafmt/[ScalaFmt], you
// need to define a `.scalafmt.conf` file in the root of your project, and then run
// `./mill mill.scalalib.scalafmt/` as shown below:

/** See Also: .scalafmt.conf */

/** Usage

> cat src/Foo.scala
package foo
object Foo {
def main(args: Array[String]) = {
val res = println("Hello world")
}
}

> ./mill mill.scalalib.scalafmt/
Formatting 1 Scala sources

> cat src/Foo.scala
package foo
object Foo {
  def main(args: Array[String]) = {
    val res = println("Hello world")
  }
}

*/

// === Autofixing

// To autofix your code with https://scalacenter.github.io/scalafix/[ScalaFix], you
// need to include the https://github.com/joan38/mill-scalafix[third-party mill-scalafix plugin]
// as shown below, define a `.scalafix.conf` file to configure the Scalafix tool, and
// make your module extend `com.goyeau.mill.scalafix.ScalafixModule`. Then you can run
// `./mill __.fix` to run Scalafix across all such modules in your project, which in the
// example below removes the unused `val res` variable from the program:
//
/** See Also: build.mill.yaml */
/** See Also: .scalafix.conf */
/** Usage

> ./mill __.fix

> cat src/Foo.scala
package foo
object Foo {
  def main(args: Array[String]) = {
    println("Hello world")
  }
}

*/