package build
import mill._, scalalib._, scalajslib._, publish._

object foo extends Cross[FooModule]("2.13.14", "3.3.3")
trait FooModule extends Cross.Module[String] {
  trait Shared extends CrossScalaModule with CrossValue with PlatformScalaModule with PublishModule {
    def publishVersion = "0.0.1"

    def pomSettings = PomSettings(
      description = "Hello",
      organization = "com.lihaoyi",
      url = "https://github.com/lihaoyi/example",
      licenses = Seq(License.MIT),
      versionControl = VersionControl.github("lihaoyi", "example"),
      developers = Seq(Developer("lihaoyi", "Li Haoyi", "https://github.com/lihaoyi"))
    )

    def ivyDeps = Agg(ivy"com.lihaoyi::scalatags::0.12.0")
  }

  trait FooTestModule extends TestModule {
    def ivyDeps = Agg(ivy"com.lihaoyi::utest::0.8.4")
    def testFramework = "utest.runner.Framework"
  }

  trait SharedJS extends Shared with ScalaJSModule {
    def scalaJSVersion = "1.16.0"
  }

  object bar extends Module {
    object jvm extends Shared{
      object test extends ScalaTests with FooTestModule
    }
    object js extends SharedJS {
      object test extends ScalaJSTests with FooTestModule
    }
  }

  object qux extends Module {
    object jvm extends Shared {
      def moduleDeps = Seq(bar.jvm)
      def ivyDeps = super.ivyDeps() ++ Agg(ivy"com.lihaoyi::upickle::3.0.0")

      object test extends ScalaTests with FooTestModule
    }

    object js extends SharedJS {
      def moduleDeps = Seq(bar.js)

      object test extends ScalaJSTests with FooTestModule
    }
  }
}

// This example demonstrates how to publish Scala modules which are both
// cross-version and cross-platform: running on both Scala 2.13.14/3.3.3 as
// well as Scala-JVM/JS.

/** Usage

> ./mill show foo[2.13.14].bar.jvm.sources
[
  ".../foo/bar/src",
  ".../foo/bar/src-jvm",
  ".../foo/bar/src-2.13.14",
  ".../foo/bar/src-2.13.14-jvm",
  ".../foo/bar/src-2.13",
  ".../foo/bar/src-2.13-jvm",
  ".../foo/bar/src-2",
  ".../foo/bar/src-2-jvm"
]

> ./mill show foo[3.3.3].qux.js.sources
[
  ".../foo/qux/src",
  ".../foo/qux/src-js",
  ".../foo/qux/src-3.3.3",
  ".../foo/qux/src-3.3.3-js",
  ".../foo/qux/src-3.3",
  ".../foo/qux/src-3.3-js",
  ".../foo/qux/src-3",
  ".../foo/qux/src-3-js"
]

> ./mill foo[2.13.14].qux.jvm.run
Bar.value: <p>world Specific code for Scala 2.x</p>
Parsing JSON with ujson.read
Qux.main: Set(<p>i</p>, <p>cow</p>, <p>me</p>)

> ./mill foo[3.3.3].qux.js.run
Bar.value: <p>world Specific code for Scala 3.x</p>
Parsing JSON with js.JSON.parse
Qux.main: Set(<p>i</p>, <p>cow</p>, <p>me</p>)

> ./mill foo[3.3.3].__.js.test
+ bar.BarTests.test ...  <p>world Specific code for Scala 3.x</p>
+ qux.QuxTests.parseJsonGetKeys ...  Set(i, cow, me)

> ./mill __.publishLocal
Publishing Artifact(com.lihaoyi,foo-bar_sjs1_2.13,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-bar_2.13,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-qux_sjs1_2.13,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-qux_2.13,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-bar_sjs1_3,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-bar_3,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-qux_sjs1_3,0.0.1) to ivy repo...
Publishing Artifact(com.lihaoyi,foo-qux_3,0.0.1) to ivy repo...

*/
