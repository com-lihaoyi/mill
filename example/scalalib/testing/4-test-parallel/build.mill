// Test parallelism is an opt-in, powerful feature that enables parallel test execution.
// When enabled, Mill automatically distributes your test classes across multiple JVM subprocesses.
// This is especially useful when you have multiple test classes that can be run in parallel.
// Test parallelism scheduler ensures throughput is maximized: no "slow" tests can block "fast" tests,
// tests are run in parallel for performance, while overhead of JVM creation overhead is minimized.
// This feature is expected to be enabled by default in future versions of Mill.
//
// Test parallelism can be enabled by overriding def testParallelism, as demonstrated below.

//// SNIPPET:BUILD1
package build
import mill._, scalalib._

object foo extends ScalaModule {
  def scalaVersion = "2.13.8"
  object test extends ScalaTests {
    def ivyDeps = Seq(ivy"com.lihaoyi::utest:0.8.5")
    def testFramework = "utest.runner.Framework"

    def testParallelism = true
  }
}

//// SNIPPET:END

/** Usage

> mill -j 3 foo.test

> find out/foo/test/testForked.dest
...
out/foo/test/testForked.dest/worker-0.log
out/foo/test/testForked.dest/worker-0
out/foo/test/testForked.dest/worker-1.log
out/foo/test/testForked.dest/worker-1
out/foo/test/testForked.dest/worker-2.log
out/foo/test/testForked.dest/worker-2
out/foo/test/testForked.dest/test-classes
out/foo/test/testForked.dest/test-report.xml
...

*/
