// Test parallelism automatically
// distributes your test classes across multiple JVM subprocesses, while minimizing the
// overhead of JVM creation by re-using the subprocesses where possible.
//
//// SNIPPET:BUILD1
package build
import mill.*, scalalib.*

object foo extends ScalaModule {
  def scalaVersion = "3.7.1"
  object test extends ScalaTests, TestModule.Utest {
    def utestVersion = "0.8.9"

    def testParallelism = true
  }
}

//// SNIPPET:END

/** Usage

> ./mill --jobs 3 foo.test

> find out/foo/test/testForked.dest
...
out/foo/test/testForked.dest/worker-0.log
out/foo/test/testForked.dest/worker-0
out/foo/test/testForked.dest/worker-1.log
out/foo/test/testForked.dest/worker-1
out/foo/test/testForked.dest/worker-2.log
out/foo/test/testForked.dest/worker-2
out/foo/test/testForked.dest/test-classes
out/foo/test/testForked.dest/test-report.xml
...

*/

// `def testParallelism = true` is enabled by default, and only shown in the above
// example for clarity. To disable test parallelism, add `def testParallelism = false`
// to your test suites
