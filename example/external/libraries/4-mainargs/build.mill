// Mill uses MainArgs to handle argument parsing for ``T.command``s that
// are run from the command line.
import mill._

def commandSimple(str: String, i: Int, bool: Boolean = true) = T.command{
  println(s"$str $i $bool")
}

// Mill uses MainArgs to let you parse most common Scala primitive types as command
// parameters: `String`s, `Int`s, `Boolean`s, etc. Single-character parameter names
// are treated as short arguments called with one dash `-` rather than two dashes `--`.
// Default values work as you would expect, and are substituted in if a value is not
// given at the command line

/** Usage

> ./mill commandSimple --str hello -i 123
hello 123 true

*/


// === `os.Path`
//
// In addition to the builtin set of types that MainArgs supports, Mill also
// supports parsing OS-Lib ``os.Path``s from the command line:


def commandTakingPath(path: os.Path) = T.command{
  println(path)
}

/** Usage

> ./mill commandTakingPath --path foo/bar/baz.txt
...foo/bar/baz.txt

*/


// === Custom Main Argument Parsers
//
// You can define your own custom types and use them as command line arguments,
// as long as you define an `implicit mainargs.TokensReader[T]` for that type.

class LettersOrDigits(val value: String)

implicit object LettersOrDigitsTokensReader
  extends mainargs.TokensReader.Simple[LettersOrDigits] {
  def shortName = "letters-or-digits"
  def read(strs: Seq[String]) = {
    if (strs.last.forall(_.isLetterOrDigit)) Right(new LettersOrDigits(strs.last))
    else Left("non-letter/digit characters")
  }
}

def commandCustomArg(custom: LettersOrDigits) = T.command{
  println("hello " + custom.value)
}

// Above, we show an example where we have a custom `class LettersOrDigits` type,
// where the `implicit object LettersOrDigitsTokensReader` does some basic validation
// to raise an error if the argument contains characters that are not etters or digits:

/** Usage

> ./mill commandCustomArg --custom 123abc
hello 123abc

> ./mill commandCustomArg --custom 123?abc
error: Invalid argument --custom <letters-or-digits> failed to parse "123?abc"...
...due to non-letter/digit characters
...

*/


// === `Task`
//
// Mill allows commands to take ``Task[T]``s as parameters anywhere they can
// take an unboxed `T`. This can be handy later on if you want to call the
// command as part of another target, while passing it the value of an upstream
// target:

def commandTakingTask(str: Task[String]) = T.command{
  val result = "arg: " + str()
  println(result)
  result
}

/** Usage

> ./mill commandTakingTask --str helloworld
arg: helloworld

*/

def upstreamTarget = T{
  "HELLO"
}

def targetCallingCommand = T{
  commandTakingTask(upstreamTarget)()
}


/** Usage

> ./mill show targetCallingCommand
"arg: HELLO"

*/


// === Evaluator (experimental)
//
// _Evaluator Command are experimental and suspected to change.
// See {mill-github-url}/issues/502[issue #502] for details._
//
// You can define a command that takes in the current `Evaluator` as an argument,
// which you can use to inspect the entire build, or run arbitrary tasks.
// For example, here is a `customPlanCommand` command which uses this
// to traverse the module tree to find the targets specified by the `targets` strings,
// and plan out what would be necessary to run them
import mill.eval.{Evaluator, Terminal}
import mill.resolve.{Resolve, SelectMode}

def customPlanCommand(evaluator: Evaluator, targets: String*) = T.command {
  Resolve.Tasks.resolve(
    evaluator.rootModule,
    targets,
    SelectMode.Multi
  ) match{
    case Left(err) => Left(err)
    case Right(resolved) =>
      val (sortedGroups, _) = evaluator.plan(resolved)
      val plan = sortedGroups
        .keys()
        .collect { case r: Terminal.Labelled[_] => r.render }
        .toArray

      plan.foreach(println)
      Right(())
  }
}

// We can call our `customPlanCommand` from the command line and pass it the
// `targetCallingCommand` we saw earlier, and it prints out the list of tasks
// it needs to run in the order necessary to reach `targetCallingCommand

/** Usage

> ./mill customPlanCommand targetCallingCommand
upstreamTarget
commandTakingTask
targetCallingCommand

*/

// Many built-in tools are implemented as custom evaluator commands:
// xref:Scala_Builtin_Commands.adoc#_inspect[inspect],
// xref:Scala_Builtin_Commands.adoc#_resolve[resolve],
// xref:Scala_Builtin_Commands.adoc#_show[show].
// If you want a way to run Mill commands and programmatically manipulate the
// tasks and outputs, you do so with your own evaluator command.
