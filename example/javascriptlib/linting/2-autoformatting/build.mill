package build

import mill._, javascriptlib._

object foo extends TypeScriptModule

// Mill supports code formatting via `eslint` and `prettier`.
// You can reformat your projects code by providing a configuration for your preferred linter and running `mill _.reformatAll`.

// If both configurations files are present, the command `mill _.reformatAll` will default to eslint.
// You can format via a specificied linter via the commands `mill _.reformatEslint` to format with eslint and
// `mill _.reformatPrettier` to format with prettier.

// When using prettier you can specify the path to reformat via command line argument, `mill _.reformatAll "*/**/*.ts"`
// just as you would when running `prettier --write` if no path is provided mill will default to using "*/**/*.ts".

/** Usage
> cat foo/src/foo.ts # initial poorly formatted source code
export class Foo{
static main(
args: string[
])
{console.log("Hello World!")
}
}

> mill foo.reformatAll
...
All matched files have been reformatted!

> cat foo/src/foo.ts # code formatted with eslint configuration.
export class Foo{
  static main(
    args: string[
]) {
    console.log('Hello World!');
  }
}

> rm -rf eslint.config.mjs # since there is no eslint config file `eslint.config.(js|mjs|cjs)`, mill will use the prettier configuration available.

> mill foo.reformatAll
...
All matched files have been reformatted!

> cat foo/src/foo.ts # code formatted with prettier configuration.
export class Foo {
  static main(args: string[]) {
    console.log('Hello World!');
  }
}
*/
