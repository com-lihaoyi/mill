package build

import mill._
import mill.javascriptlib._

object foo extends TypeScriptModule {

  def customSource = Task {
    Seq(PathRef(millSourcePath / "custom-src" / "foo2.ts"))
  }

  def allSources = super.allSources() ++ customSource()

  def resources = super.resources() ++ Seq(PathRef(millSourcePath / "custom-resources"))

  def generatedSources = Task {
    for (name <- Seq("A", "B", "C")) os.write(
      Task.dest / s"foo-$name.ts",
      s"""export default class Foo$name {
         |  static value: string = "Hello $name"
         |}
      """.stripMargin
    )

    Seq(PathRef(Task.dest))
  }

  def forkEnv = super.forkEnv() + ("MY_CUSTOM_ENV" -> "my-env-value")

  def mainFileName = s"foo2.ts"

  def mainFilePath = compile()._2.path / "custom-src" / mainFileName()

}

// This example demonstrates usage of common configs

// Note the use of `millSourcePath`, `Task.dest`, and `PathRef` when preforming
// various filesystem operations:
//
// 1. `millSourcePath`: Base path of the module. For the root module, it's the repo root.
//    For inner modules, it's the module path (e.g., `foo/bar/qux` for `foo.bar.qux`). Can be overridden if needed.
//
// 2. `Task.dest`: Destination folder in the `out/` folder for task output.
//    Prevents filesystem conflicts and serves as temporary storage or output for tasks.
//
// 3. `PathRef`: Represents the contents of a file or folder, not just its path,
//    ensuring downstream tasks properly invalidate when contents change.
//
// Typical Usage is given below:

/** Usage

> mill foo.run
hello2
Hello A
Hello B
Hello C
my-env-value
MyResource: My Resource Contents

> mill foo.bundle
Build succeeded!

> MY_CUSTOM_ENV=my-env-value node out/foo/bundle.dest/bundle.js
hello2
Hello A
Hello B
Hello C
my-env-value
MyResource: My Resource Contents
MyOtherResource: My Other Resource Contents
*/
