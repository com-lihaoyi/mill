package build
import mill._, javascriptlib._

trait CustomModule extends TypeScriptModule {
  def npmDevDeps: T[Seq[String]] = Task { Seq.empty[String] }

  override def npmInstall: T[PathRef] = Task.Anon {
    os.call((
      "npm",
      "install",
      "esbuild@0.24.0",
      npmDevDeps()
    ))
    PathRef(Task.dest)
  }

  def testPath = Task.Source(millSourcePath / "test")
  val testConfigPath = millSourcePath / os.up / "jest.config.ts"

  def bundle = Task {
    val (_, env) = prepareRun()
    val esbuild = npmInstall().path / "node_modules/esbuild/bin/esbuild"
    val bundle = Task.dest / "bundle.js"
    val mainFile = compile()._1.path / millSourcePath.last / "src" / mainFileName()
    os.call((esbuild, mainFile, "--bundle", "--platform=node", s"--outfile=$bundle"), env = env)
    PathRef(bundle)
  }

  def allSources = Task.Anon {
    (os.walk(sources().path) ++ os.walk(testPath().path) ++ IndexedSeq(testConfigPath))
      .filter(_.ext == "ts")
      .map(PathRef(_))
  }

  override def mainFileName = Task { s"index.js" }

  def test = Task {
    val javascriptOut = compile()._1.path

    // env
    // note: ' npmInstall().path / "node_modules" ' required in NODE_PATH for jest to find preset: ts-jest
    val env = Map("NODE_PATH" -> Seq(
      ".",
      javascriptOut,
      npmInstall().path,
      npmInstall().path / "node_modules"
    ).mkString(":"))

    os.call(
      ("node", npmInstall().path / "node_modules/jest/bin/jest.js", javascriptOut.toString()),
      stdout = os.Inherit,
      env = env
    )
  }

}

object foo extends CustomModule {
  def npmDevDeps = Seq(
    "@types/jest@^29.0.0",
    "@types/node@^20.0.0",
    "jest@^29.0.0",
    "ts-jest@^29.0.0",
    "ts-node@^10.9.2",
    "typescript@^5.0.0"
  )

  /** Total number of lines in module source files */
  def lineCount = Task {
    allSources().map(f => os.read.lines(f.path).size).sum
  }

  /** Generate resources using lineCount of sources */
  def resources = Task {
    os.write(Task.dest / "line-count.txt", "" + lineCount())
    PathRef(Task.dest)
  }

  def run: T[Unit] = Task {
    val pathToResources = resources().path
    val (_, env) = prepareRun()
    val mainFile = compile()._1.path / millSourcePath.last / "src" / mainFileName()
    os.call(("node", mainFile, pathToResources.toString()), stdout = os.Inherit, env = env)
  }

}

// Documentation for mill.example.javascriptlib

/** Usage

> mill show foo.run
[Reading file:] .../out/foo/resources.dest/line-count.txt
Line Count: ...

> mill show foo.bundle
".../out/foo/bundle.dest/bundle.js"

> node out/foo/bundle.dest/bundle.js out/foo/resources.dest/
[Reading file:] .../line-count.txt
Line Count: ...
*/
