package build

import mill._, javascriptlib._

object foo extends JestModule {
  override def mainFileName = Task { s"index.js" }

  override def mainFilePath =
    Task { compile()._1.path / millSourcePath.last / "src" / mainFileName() }

  /** Total number of lines in module source files */
  def lineCount = Task {
    allSources().map(f => os.read.lines(f.path).size).sum
  }

  /** Generate resources using lineCount of sources */
  def resources = Task {
    os.write(Task.dest / "line-count.txt", "" + lineCount())
    PathRef(Task.dest)
  }

  override def argsOrder: Task[(Boolean, Seq[String])] =
    Task { (true, Seq(resources().path.toString())) }

}

// Documentation for mill.example.javascriptlib

/** Usage

> mill foo.test
PASS .../foo.test.js
...Foo.getLineCount
...✓ should return the content of the line-count.txt file...
...✓ should return null if the file cannot be read...
...
Test Suites:...1 passed, 1 total...
Tests:...2 passed, 2 total...
Snapshots:...
Time:...
Ran all test suites matching...

> mill foo.run
[Reading file:] .../out/foo/resources.dest/line-count.txt
Line Count: ...

> mill show foo.bundle
".../out/foo/bundle.dest/bundle.js"

> node out/foo/bundle.dest/bundle.js out/foo/resources.dest/
[Reading file:] .../line-count.txt
Line Count: ...
*/
