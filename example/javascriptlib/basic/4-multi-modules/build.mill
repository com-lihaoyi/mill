package build
import mill._, javascriptlib._

trait MultipleModules extends JestModule {
  def npmDevDeps: T[Seq[String]] = Task { Seq.empty[String] }

  override def npmInstall: T[PathRef] = Task {
    os.call((
      "npm",
      "install",
      "--save-dev",
      "@types/node@^20.0.0",
      "ts-node@^10.9.2",
      "typescript@^5.0.0",
      npmDevDeps()
    ))
    PathRef(Task.dest)
  }

  override def mainFileName = Task { s"index.js" }

  override def mainFilePath =
    Task { compile()._1.path / millSourcePath.last / "src" / mainFileName() }
}

object authors extends TypeScriptModule

object books extends TypeScriptModule {
  def moduleDeps = Seq(authors)
}

object library extends MultipleModules {
  def moduleDeps = Seq(authors, books)

  def npmDevDeps = Seq(
    "@types/jest@^29.0.0",
    "jest@^29.0.0",
    "ts-jest@^29.0.0",
    "esbuild@0.24.0"
  )

  // intialize a data source
  def resources = Task {
    val mockAuthors = ujson.Arr(
      ujson.Obj("id" -> 1, "name" -> "Ben"),
      ujson.Obj("id" -> 2, "name" -> "Jerry")
    )

    val mockBooks = ujson.Arr(
      ujson.Obj(
        "id" -> 1,
        "title" -> "Book One",
        "publication" -> 2001,
        "sn" -> "SN001",
        "author" -> ujson.Obj("id" -> 1)
      ),
      ujson.Obj(
        "id" -> 2,
        "title" -> "Book Two",
        "publication" -> 2002,
        "sn" -> "SN002",
        "author" -> ujson.Obj("id" -> 1)
      ),
      ujson.Obj(
        "id" -> 3,
        "title" -> "Book Three",
        "publication" -> 2003,
        "sn" -> "SN003",
        "author" -> ujson.Obj("id" -> 2)
      )
    )

    os.write(Task.dest / "authors.json", ujson.write(mockAuthors, indent = 2))
    os.write(Task.dest / "books.json", ujson.write(mockBooks, indent = 2))
    PathRef(Task.dest)
  }

  def runArguments: Task[String] = Task { resources().path.toString() }

}

// Documentation for mill.example.javascriptlib

/** Usage

> mill library.test
PASS .../library.test.js
...✓ should return all authors with their books when no authorName is provided...
...✓ should return books for a specific author when authorName is provided...
...✓ should throw an error if the author is not found...
...
Test Suites:...1 passed, 1 total...
Tests:...3 passed, 3 total...
Snapshots:...
Time:...
Ran all test suites matching ...

> mill library.run Jerry
[
  {
    "author": "Jerry",
    "books": [
      {
        "title": "Book Three",
        "publication": 2003,
        "sn": "SN003"
      }
    ]
  }
]

> mill show library.bundle
".../out/library/bundle.dest/bundle.js"

> node out/library/bundle.dest/bundle.js out/library/resources.dest/ Jerry
...
*/
