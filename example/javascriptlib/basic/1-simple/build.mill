package build
import mill._, javascriptlib._

trait SimpleMod extends TypeScriptModule {
  override def npmInstall = Task {
    os.call((
      "npm",
      "install",
      "--save-dev",
      "@types/node@22.7.8",
      "@types/jest@^29.5.14",
      "@babel/core@^7.26.0",
      "@babel/preset-env@^7.26.0",
      "typescript@5.6.3",
      "jest@^29.7.0",
      "ts-jest@^29.2.5",
      "ts-node@^10.9.2",
      "babel-jest@^29.7.0",
      "esbuild@0.24.0",
      transitiveNpmDeps()
    ))
    PathRef(Task.dest)
  }

  def testPath = Task.Source(millSourcePath / "test")
  val testConfigPath = millSourcePath / os.up / "jest.config.ts"

  def sourceForTask = Task.Anon {
    val destination = T.dest.toString()
    val destSource = destination match {
      case x if !x.contains("test") => os.walk(sources().path).filter(_.ext == "ts").map(PathRef(_))
      case _ => (os.walk(sources().path) ++ os.walk(testPath().path) ++ IndexedSeq(
          testConfigPath
        )).filter(_.ext == "ts").map(PathRef(_))
    }

    destSource
  }

  def tsConfig = Task.Anon {
    val nodeTypes = npmInstall().path / "node_modules/@types"
    val javascriptOut = Task.dest / "javascript"
    val declarationsOut = Task.dest / "declarations"

    val upstreamPaths =
      for (((jsDir, dTsDir), mod) <- Task.traverse(moduleDeps)(_.compile)().zip(moduleDeps))
        yield (mod.millSourcePath.subRelativeTo(build.millSourcePath) + "/*", dTsDir.path)

    val allPaths = upstreamPaths ++ Seq("*" -> sources().path, "*" -> npmInstall().path)
    os.write(
      Task.dest / "tsconfig.json",
      ujson.Obj(
        "compilerOptions" -> ujson.Obj(
          "outDir" -> javascriptOut.toString,
          "declaration" -> true,
          "declarationDir" -> declarationsOut.toString,
          "typeRoots" -> ujson.Arr(nodeTypes.toString),
          "paths" -> ujson.Obj.from(allPaths.map { case (k, v) => (k, ujson.Arr(s"$v/*")) })
        ),
        "files" -> sourceForTask().map(_.path.toString)
      )
    )
  }

  override def compile: T[(PathRef, PathRef)] = Task {
    tsConfig()
    os.call(npmInstall().path / "node_modules/typescript/bin/tsc")
    val javascriptOut = T.dest / "javascript"
    val declarationsOut = T.dest / "declarations"
    (PathRef(javascriptOut), PathRef(declarationsOut))
  }

  def typeCheck: T[Unit] = Task {
    tsConfig()
    os.call((
      npmInstall().path / "node_modules/typescript/bin/tsc",
      "--noemit"
    ))
  }
}

object foo extends SimpleMod {
  object bar extends SimpleMod {
    def npmDeps = Seq("immutable@4.3.7")
  }
}

object qux extends SimpleMod {
  def moduleDeps = Seq(foo, foo.bar)

  def test = Task {
    tsConfig()
    os.call(npmInstall().path / "node_modules/typescript/bin/tsc")

    val javascriptOut = Task.dest / "javascript"

    // env
    // note: ' npmInstall().path / "node_modules" ' required in NODE_PATH for jest to find preset: ts-jest
    val env = Map("NODE_PATH" -> Seq(
      ".",
      javascriptOut,
      npmInstall().path,
      npmInstall().path / "node_modules"
    ).mkString(":"))

    os.call(
      ("node", npmInstall().path / "node_modules/jest/bin/jest.js", javascriptOut.toString()),
      stdout = os.Inherit,
      env = env
    )
  }
}

// Documentation for mill.example.javascriptlib.basic

/** Usage

> mill dist.run example/javascriptlib/basic/1-simple qux.run James Bond prof
Hello James Bond Professor

> mill dist.run example/javascriptlib/basic/1-simple show qux.bundle
 ".../out/qux/bundle.dest/bundle.js"

> node out/qux/bundle.dest/bundle.js James Bond prof
Hello James Bond Professor

*/
