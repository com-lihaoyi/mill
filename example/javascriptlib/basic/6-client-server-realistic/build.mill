package build
import mill._, javascriptlib._

object client extends ReactScriptsModule

object server extends TypeScriptModule {
  def npmDeps =
    Seq("@types/cors@^2.8.17", "@types/express@^5.0.0", "cors@^2.8.5", "express@^4.21.1")

  def npmDevDeps =
    super.npmDevDeps() ++ Seq("@types/supertest@^6.0.2", "supertest@^7.0.0")

  def bundleExternal = super.bundleExternal() ++ Seq(ujson.Str("express"), ujson.Str("cors"))

  def forkEnv = super.forkEnv() + ("PORT" -> "3001")

  /** Bundle client as resource */
  def resources = Task {
    os.copy(client.bundle().path, Task.dest / "build")
    super.resources() ++ Seq(PathRef(Task.dest))
  }

  object test extends TypeScriptTests with TestModule.Jest
}

// Documentation for mill.example.javascriptlib

// This example demonstrates how to set up a simple React web app running on an Express JS server
// implementing the popular Todo-MVC demo application. It includes a test suite
// for both client and server modules.
// Runninng `mill app.run` serves bundled static HTML files through the server.

/** Usage

> mill client.test
PASS src/test/App.test.tsx
...

> mill client.bundle   # bundle the react app;
...

> mill server.test
PASS .../server.test.ts
...
Test Suites:...1 passed, 1 total...
Tests:...3 passed, 3 total...
...

> mill show server.bundle # bundle the express server
...
Build succeeded!
*/
