package build
import mill._, javascriptlib._

object client extends TypeScriptModule

object server extends JestModule

object app extends TypeScriptModule {
  def moduleDeps = Seq(client, server)

  def bundleApp =
    Task {
      val serverPath = server.bundle().path
      val clientPath = client.bundle().path
      os.call(
        ("echo", s"client bundled@$clientPath\nserver bundled@$serverPath"),
        stdout = os.Inherit
      );
      (PathRef(serverPath), PathRef(clientPath))
    }

}

// Documentation for mill.example.javascriptlib

/** Usage

> mill client.test
PASS .../client.test.js
...getServerResponse
...✓ should return mocked response...
Test Suites:...1 passed, 1 total...
Tests:...1 passed, 1 total...
Snapshots:...
Time:...
Ran all test suites matching ...

> mill server.test
PASS .../server.test.js
...Server Tests
...✓ GET /hello should return "Hello from the server!"...
...
Test Suites:...
Tests:...
Snapshots:...
Time:...
Ran all test suites matching ...

> mill show app.bundleApp
...
...
...
...
client bundled@...client/bundle.dest/bundle.js
server bundled@...server/bundle.dest/bundle.js
...

> node out/server/bundle.dest/bundle.js & echo "hello" | node out/client/bundle.dest/bundle.js &  sleep 2 && kill -9 $(lsof -t -i:3000) # 1) start server 2) start client 3) send client input 4) kill server
...
...
...
Response from server: Hello from the server!
...
*/
