//// SNIPPET:BUILD
package build
import mill._, javalib._
import mill.define.ModuleRef

object foo extends JavaModule with NativeImageModule {
  def ivyDeps = Agg(
    ivy"net.sourceforge.argparse4j:argparse4j:0.9.0",
    ivy"org.thymeleaf:thymeleaf:3.1.1.RELEASE",
    ivy"org.slf4j:slf4j-nop:2.0.7"
  )

  def zincWorker = ModuleRef(ZincWorkerGraalvm)

  def nativeImageOptions = Seq(
    "--no-fallback",
    "-H:IncludeResourceBundles=net.sourceforge.argparse4j.internal.ArgumentParserImpl",
    "-Os"
  )
}

object ZincWorkerGraalvm extends ZincWorkerModule {
  def jvmId = "graalvm-community:23.0.1"
}

// This example shows how to generate native images for projects using third-party
// libraries, in this case ArgParse4J and Thymeleaf. ArgParse4J does use some dynamic
// resource loading and reflection, and so we need to pass the `-H:IncludeResourceBundles`
// flag to `nativeImageOptions` in order to be compatible. We also demonstrate setting
// using `-Os` to optimize for the smallest binary size,
// which is available in the `graalvm-community:23` JDK selected above.

//// SNIPPET:END
