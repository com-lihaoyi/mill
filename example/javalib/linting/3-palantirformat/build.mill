// Mill supports auto-formatting Java code via the
// https://github.com/palantir/palantir-java-format[Palantir Java Format] project.
package build

import mill._
import mill.javalib.palantirformat._

object `package` extends RootModule with PalantirFormatModule

/** See Also: src/A.java */

// Palantir Java Format can  be used on a per-module basis by inheriting from
// `PalantirFormatModule` and running the `palanatirformat` command on that module
// You can also use `--check` if you wish  to error if the code is not formatted,
// which is useful in CI validation jobs to ensure code is formatted before merging.


/** Usage

> ./mill palantirformat --check    # check should fail initially
...checking format in java sources ...
...src/A.java
error: ...palantirformat aborted due to format error(s) (or invalid plugin settings/palantirformat options)

> ./mill palantirformat    # format all Java source files
...formatting java sources ...

> ./mill palantirformat --check    # check should succeed now
...checking format in java sources ...
*/
// You can also use Palantir Java Format globally on all `JavaModule`s in your build by running
// `mill.javalib.palantirformat.PalantirFormatModule/`.

/** Usage
> ./mill mill.javalib.palantirformat.PalantirFormatModule/ # alternatively, use external module to check/format
...formatting java sources ...
*/

// If entering the long fully-qualified module name
// `mill.javalib.palantirformat.PalantirFormatModule/` is tedious, you can add
// an xref:fundamentals/modules.adoc#_aliasing_external_modules[External Module Alias]
// to give it a shorter name that's easier to type