// Similar to the Spotless Gradle and Maven plugins, Mill provides the ability to
// enforce formatting gradually aka https://github.com/diffplug/spotless/tree/main/plugin-gradle#ratchet[ratchet].

// Here, we see a module with an incorrectly formatted source file.

package build

import mill.javalib.JavaModule

object `package` extends JavaModule

/** See Also: src/A.java */

// A Git repository is initialized and a base commit is created with the incorrectly formatted file.

/** Usage
> git init . -b main
> git add .gitignore build.mill src/A.java
> git commit -a -m "1"
*/

// Next, we create a new file with format errors.

/** Usage
> echo " module hello {}" > src/module-info.java  # content has leading space at start

> ./mill mill.scalalib.spotless/ --check
checking format in 2 java files
format errors in src/A.java
format errors in src/module-info.java
format errors in 2 files
error: ...format check failed for 2 files
*/

// NOTE: Since no `spotless-formats.json` file is present, a default list of formatter steps is used.
// The default is meant for use cases where some basic formatting is sufficient.

// The `mill.scalalib.spotless/` command finds format errors in both files.
// But we do not want to fix the formatting in `A.java` since it is part of the commit history.
// Instead, we use the `mill.scalalib.spotless/ratchet` command to identify and format files that differ between Git trees.

/** Usage
> ./mill mill.scalalib.spotless/ratchet --check # check changes in working tree since HEAD
checking format in 1 java files
format errors in src/module-info.java
format errors in 1 files
error: ...format check failed for 1 files

> ./mill mill.scalalib.spotless/ratchet         # fix formatting in changeset
formatting src/module-info.java
formatted 1 files

> git add src/module-info.java    # stage and
> git commit -a -m "2"            # commit changes

> ./mill mill.scalalib.spotless/ratchet --check HEAD^ HEAD # check changes between last 2 commits
everything is already formatted
*/

// This demonstrates how to gradually enforce formatting in an existing Git project.
// You can also adapt these commands to set up actions on CI systems that check/fix formatting.

// CAUTION: CI actions may require additional
// https://github.com/diffplug/spotless/tree/main/plugin-gradle#using-ratchetfrom-on-ci-systems[setup].
