//// SNIPPET:BUILD
package build
import mill.*, javalib.*

object foo extends JavaModule {
  def mvnDeps = Seq(
    mvn"net.sourceforge.argparse4j:argparse4j:0.9.0",
    mvn"org.thymeleaf:thymeleaf:3.1.1.RELEASE"
  )

  object test extends JavaTests, TestModule.Junit4 {
    def mvnDeps = Seq(
      mvn"com.google.guava:guava:33.3.0-jre"
    )
  }
}


//// SNIPPET:TREE
// ----
// build.mill
// foo/
//     src/
//         foo/Foo.java
//     resources/
//         ...
//     test/
//         src/
//             foo/FooTest.java
// out/foo/
//     compile.json
//     compile.dest/
//     ...
//     test/
//         compile.json
//         compile.dest/
//         ...
// ----
//
//

// Typical usage of a `JavaModule` is shown below

/** Usage

> ./mill resolve foo._ # List what tasks are available to run
foo.assembly
...
foo.compile
...
foo.run
*/
/** Usage
> ./mill inspect foo.compile # Show documentation and inputs of a task
foo.compile(JavaModule...)
    Compiles the current module to generate compiled classfiles/bytecode.
Inputs:
    foo.upstreamCompileOutput
    foo.allSourceFiles
    foo.compileClasspath
...
*/
/** Usage
> ./mill foo.compile # compile sources into classfiles
...
compiling 1 Java source to...
*/
/** Usage
> ./mill foo.run # run the main method, if any
error: argument -t/--text is required
...
*/
/** Usage
> ./mill foo.run --text hello
<h1>hello</h1>
*/
/** Usage
> ./mill foo.test
...
Test foo.FooTest.testEscaping finished, ...
Test foo.FooTest.testSimple finished, ...
Test run foo.FooTest finished: 0 failed, 0 ignored, 2 total, ...
*/
/** Usage
> ./mill foo.assembly # bundle classfiles and libraries into a jar for deployment

> ./mill show foo.assembly # show the output of the assembly task
".../out/foo/assembly.dest/out.jar"

> java -jar ./out/foo/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/foo/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

> cp ./out/foo/assembly.dest/out.jar out.bat # windows

> ./out.bat --text hello # windows
<h1>hello</h1>

*/
