//// SNIPPET:BUILD
package build
import mill._, javalib._

object foo extends JavaModule {
  def ivyDeps = Agg(
    ivy"net.sourceforge.argparse4j:argparse4j:0.9.0",
    ivy"org.thymeleaf:thymeleaf:3.1.1.RELEASE"
  )

  object test extends JavaTests with TestModule.Junit4{
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"com.google.guava:guava:33.3.0-jre"
    )
  }
}

// This is a basic Mill build for a single `JavaModule`, with two
// third-party dependencies and a test suite using the JUnit framework.
//
//// SNIPPET:TREE
// ----
// build.mill
// foo/
//     src/
//         foo/Foo.java
//     resources/
//         ...
//     test/
//         src/
//             foo/FooTest.java
// out/foo/
//     compile.json
//     compile.dest/
//     ...
//     test/
//         compile.json
//         compile.dest/
//         ...
// ----
//
// NOTE: The default Mill source folder layout `foo/src/` differs from that of Maven/Gradle's
// `foo/src/main/java/`.
// If you wish to use the Maven source folder layout, e.g. for migrating
// an existing codebase, you should use
// xref:#_maven_compatible_modules[Maven-Compatible Modules]
//
//// SNIPPET:DEPENDENCIES
//
// This example project uses two third-party dependencies - https://argparse4j.github.io/[ArgParse4J] for CLI
// argument parsing, https://www.thymeleaf.org//[Thymeleaf] for HTML rendering - and uses them to wrap a
// given input string in HTML templates with proper escaping.
//
// Typical usage of a `JavaModule` is shown below

/** Usage

> ./mill resolve foo._ # List what tasks are available to run
foo.assembly
...
foo.compile
...
foo.run

> ./mill inspect foo.compile # Show documentation and inputs of a task
foo.compile(JavaModule...)
    Compiles the current module to generate compiled classfiles/bytecode.
Inputs:
    foo.upstreamCompileOutput
    foo.allSourceFiles
    foo.compileClasspath
...

> ./mill foo.compile # compile sources into classfiles
...
compiling 1 Java source to...

> ./mill foo.run # run the main method, if any
error: argument -t/--text is required
...

> ./mill foo.run --text hello
<h1>hello</h1>

> ./mill foo.test
...
Test foo.FooTest.testEscaping finished, ...
Test foo.FooTest.testSimple finished, ...
Test run foo.FooTest finished: 0 failed, 0 ignored, 2 total, ...

> ./mill foo.assembly # bundle classfiles and libraries into a jar for deployment

> ./mill show foo.assembly # show the output of the assembly task
".../out/foo/assembly.dest/out.jar"

> java -jar ./out/foo/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/foo/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

*/
