// This section sets up a basic Android project using Mill.
// We utilize `AndroidAppModule`, `AndroidSdkModule` and `AndroidLibModule` and `PublishModule` to streamline the process of
// building an Android application with minimal configuration that uses our custom library that we locally publish.
//
// By extending `AndroidAppModule`, we inherit all Android-related tasks such as
// resource generation, APK building, DEX conversion, and APK signing.
// Additionally, `AndroidSdkModule` is embedded, making SDK management seamless.
// Also `AndroidLibModule` has all the nescesarry tasks to build an Android library AAR.
// And by using `PublishModule` we can publish our library locally.

//// SNIPPET:BUILD
package build

import mill._
import kotlinlib._
import mill.javalib.android.AndroidLibModule
import mill.javalib.android.AndroidTestModule
import coursier.maven.MavenRepository
import mill.javalib.android.{AndroidAppModule, AndroidSdkModule}
import mill.javalib.android.AndroidTestModule
import publish._

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
}

object lib extends AndroidLibModule with PublishModule {

  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
  def androidMinSdk = 19
  def androidCompileSdk = 35

  def publishVersion = "0.0.1"
  def pomSettings = PomSettings(
    description = "sumlib",
    organization = "com.example.sumlib",
    url = "https://github.com/lihaoyi/example",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("lihaoyi", "example"),
    developers = Seq(Developer("lihaoyi", "Li Haoyi", "https://github.com/lihaoyi"))
  )

  // Configuration for ReleaseKey
  def androidReleaseKeyAlias: T[Option[String]] = Task { Some("releaseKey") }
  def androidReleaseKeyPass: T[Option[String]] = Task { Some("MillBuildTool") }
  def androidReleaseKeyStorePass: T[Option[String]] = Task { Some("MillBuildTool") }

  object test extends AndroidLibTests with TestModule.Junit4 {
    def mvnDeps = super.mvnDeps() ++ Seq(
      mvn"junit:junit:4.13.2"
    )
  }

}

object app extends AndroidAppModule {

  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
  def androidMinSdk = 19
  def androidCompileSdk = 35

  def androidApplicationId = "com.example.app"
  def androidApplicationNamespace = "com.example.app"

  override def repositoriesTask = Task.Anon {
    super.repositoriesTask() ++ Seq(
      MavenRepository("file://" + sys.props("user.home") + "/.m2/repository")
    )
  }

  def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"com.example.sumlib:lib:0.0.1"
  )

  object test extends AndroidAppTests with TestModule.Junit4 {
    def testFramework = "com.novocode.junit.JUnitFramework"

    def mvnDeps = super.mvnDeps() ++ Seq(
      mvn"junit:junit:4.13.2"
    )

  }
}

////SNIPPET:END

// This command triggers the build process, which create the library AAR and publish it locally at ~/.m2/repository
//
// #### Project Structure:
// The project follows the standard Android app layout. Below is a typical project folder structure:
//
// ----
// .
//├── app
//│   └── src
//│       ├── main
//│       │   ├── AndroidManifest.xml
//│       │   ├── java/com/example/app/Calculator.java
//│       │   └── res
//│       │       └── values
//│       │           ├── colors.xml
//│       │           └── strings.xml
//│       └── test/java/com/example/CalculatorUnitTest.java
//├── lib
//│   └── src
//│       └── main
//│           ├── AndroidManifest.xml
//│       |   └── java/com/example/lib/Sum.java
//|       |   └── res
//|       |       └── values
//|       |           ├── colors.xml
//|       |           └── strings.xml
//|       └── test/java/com/example/lib/SumUnitTest.java
//└── build.mill
// ----
//

/** Usage

> ./mill lib.publishM2Local
Publish ... to /home/.../.m2/repository/...

> ./mill show lib.publishArtifacts
{
  "meta": {
    "group": "com.example.sumlib",
    "id": "lib",
    "version": "0.0.1"
  },
  "payload": [
    [
      ".../out/lib/androidAar.dest/library.aar",
      "lib-0.0.1.aar"
    ],
...

*/

// This command runs unit tests on your local environment.

/** Usage

> ./mill show app.test
...
[
  "",
  [
    {
      "fullyQualifiedName": "com.example.app.CalculatorUnitTest.textSize_isCorrect",
      "selector": "com.example.app.CalculatorUnitTest.textSize_isCorrect",
      "duration": ...,
      "status": "Success"
    },
    {
      "fullyQualifiedName": "com.example.app.CalculatorUnitTest.testPlus",
      "selector": "com.example.app.CalculatorUnitTest.testPlus",
      "duration": ...,
      "status": "Success"
    }
  ]
]
...
*/
