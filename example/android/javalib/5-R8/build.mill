// R8 is a code shrinker and obfuscator for Android applications. Is designed to optimize the size of the APK
// while maintaining the functionality of the app.
// When using R8, you can configure the rules for code shrinking and obfuscation in a ProGuard configuration file.
// You need 2 files on the root of your project:
// 1. proguard-rules.pro: This file contains the rules for R8 to follow when shrinking and obfuscating the code.
// 2. test-proguard-rules.pro: This file contains the rules for R8 to follow when shrinking and obfuscating the unit and instrumented tests.
// You can also override the default Proguard files by using override def proguardConfigs: T[Seq[PathRef]]
// See Also: app/proguard-rules.pro & app/test-proguard-rules.pro
package build

import mill._, javalib._
import mill.javalib.android.{AndroidAppModule, AndroidSdkModule}
import mill.javalib.android.AndroidTestModule

object androidSdkModule0 extends AndroidSdkModule { // <1>
  def buildToolsVersion = "35.0.0"
}

object app extends AndroidAppModule { // <2>
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
  def androidMinSdk = 19
  def androidCompileSdk = 35

  /**
   * Configuration for ReleaseKey
   * WARNING: Replace these default values with secure and private credentials before using in production.
   * Never use these defaults in a production environment as they are not secure.
   * This is just for testing purposes.
   */
  def androidReleaseKeyName: T[Option[String]] = Task { Some("releaseKey.jks") }
  def androidReleaseKeyAlias: T[Option[String]] = Task { Some("releaseKey") }
  def androidReleaseKeyPass: T[Option[String]] = Task { Some("MillBuildTool") }
  def androidReleaseKeyStorePass: T[Option[String]] = Task { Some("MillBuildTool") }

  override def androidVirtualDeviceIdentifier: String = "java-test"

  // Unit tests for the application
  object test extends AndroidAppTests with TestModule.Junit4 {
    def ivyDeps = super.ivyDeps() ++ Seq(
      ivy"junit:junit:4.13.2"
    )
  }

  // Instrumented tests (runs on emulator)
  object it extends AndroidAppInstrumentedTests with AndroidTestModule.AndroidJUnit {
    def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
    override def instrumentationPackage = "com.helloworld.app"

    /* TODO currently the dependency resolution ignores the platform type and kotlinx-coroutines-core has
     * conflicting classes with kotlinx-coroutines-core-jvm . Remove the exclusions once the dependency
     * resolution resolves conflicts between androidJvm and jvm platform types
     */
    def ivyDeps = super.ivyDeps() ++ Seq(
      ivy"androidx.test.ext:junit:1.2.1".exclude(
        ("org.jetbrains.kotlinx", "kotlinx-coroutines-core-jvm")
      ),
      ivy"androidx.test:runner:1.6.2",
      ivy"androidx.test.espresso:espresso-core:3.5.1".exclude(
        ("org.jetbrains.kotlinx", "kotlinx-coroutines-core-jvm")
      ),
      ivy"junit:junit:4.13.2"
    )
  }

}

// <1> Create and configure an Android SDK module to manage Android SDK paths and tools.
// <2> The actual Android application

/** Usage

> ./mill show app.androidApk
".../out/app/androidApk.dest/app.apk"

> ./mill show app.createAndroidVirtualDevice
...Name: java-test, DeviceId: medium_phone...

> ./mill show app.startAndroidEmulator

> ./mill show app.androidReleaseInstall
...All files should be loaded. Notifying the device...

> ./mill show app.stopAndroidEmulator

> ./mill show app.deleteAndroidVirtualDevice

*/

// R8 will run automatically when you run the androidReleaseInstall task.
// If you want to create the APK without R8, you can use the androidApk task to create the not-optimized APK. You can also
// run the andoidInstall task that will automaticaly run the androidApk and also install it in the emulator.
// The androidReleaseInstall task will install the optimized APK on the emulator.
// So first you need to create the emulator and start it.
// After the emulator is started, you can run the androidReleaseInstall task and see the app in the emulator.
