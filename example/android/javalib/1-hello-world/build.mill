// This section sets up a basic Android project using Mill.
// We utilize `AndroidAppModule` and `AndroidSdkModule` to streamline the process of
// building an Android application with minimal configuration.
//
// By extending `AndroidAppModule`, we inherit all Android-related tasks such as
// resource generation, APK building, DEX conversion, and APK signing.
// Additionally, `AndroidSdkModule` is embedded, making SDK management seamless.

//// SNIPPET:BUILD
package build

import mill._, javalib._

import mill.javalib.android.{AndroidAppModule, AndroidSdkModule}
import coursier.maven.MavenRepository
import mill.javalib.android.AndroidTestModule

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
  def bundleToolVersion = "1.17.2"
}

// Actual android application
object app extends AndroidAppModule {
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)

  // Configuration for ReleaseKey
  override def releaseKeyPath = super.millSourcePath

  def androidReleaseKeyName: T[String] = Task { "releaseKey.jks" }
  def androidReleaseKeyAlias: T[String] = Task { "releaseKey" }
  def androidReleaseKeyPass: T[String] = Task { "MillBuildTool" }
  def androidReleaseKeyStorePass: T[String] = Task { "MillBuildTool" }

  override def androidVirtualDeviceIdentifier: String = "java-test"

  private def mainRoot = millSourcePath

  object test extends AndroidAppTests with TestModule.Junit4 {
    def testFramework = "com.novocode.junit.JUnitFramework"
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"junit:junit:4.13.2"
    )
  }

  object it extends AndroidAppIntegrationTests with AndroidTestModule.AndroidJUnit {
    def repositoriesTask = Task.Anon {
      super.repositoriesTask() ++
        Seq(MavenRepository("https://maven.google.com"))
    }

    def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)

    override def instrumentationPackage = "com.helloworld.app"

    /* TODO this needs to change to the location of the debug keystore once integration test */
    override def releaseKeyPath = mainRoot

    def androidReleaseKeyName: T[String] = Task {
      "releaseKey.jks"
    }

    def androidReleaseKeyAlias: T[String] = Task {
      "releaseKey"
    }

    def androidReleaseKeyPass: T[String] = Task {
      "MillBuildTool"
    }

    def androidReleaseKeyStorePass: T[String] = Task {
      "MillBuildTool"
    }

    /* TODO currently the dependency resolution ignores the platform type and kotlinx-coroutines-core has
     * conflicting classes with kotlinx-coroutines-core-jvm . Remove the exclusions once the dependency
     * resolution resolves conflicts between androidJvm and jvm platform types
     */
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"androidx.test.ext:junit:1.2.1".exclude((
        "org.jetbrains.kotlinx",
        "kotlinx-coroutines-core-jvm"
      )),
      ivy"androidx.test:runner:1.6.2",
      ivy"androidx.test.espresso:espresso-core:3.5.1".exclude((
        "org.jetbrains.kotlinx",
        "kotlinx-coroutines-core-jvm"
      )),
      ivy"junit:junit:4.13.2"
    )
  }

}

////SNIPPET:END

/** Usage

> ./mill show app.androidApk
".../out/app/androidApk.dest/app.apk"

*/

// This command triggers the build process, which installs the Android Setup, compiles the Java
// code, generates Android resources, converts Java bytecode to DEX format, packages everything
// into an APK, optimizes the APK using `zipalign`, and finally signs it.
//
// This Mill build configuration is designed to build a simple "Hello World" Android application.
// By extending `AndroidAppModule`, we leverage its predefined Android build tasks, ensuring that
// all necessary steps (resource generation, APK creation, and signing) are executed automatically.
//
// #### Project Structure:
// The project follows the standard Android app layout. Below is a typical project folder structure:
//
// ----
// .
//├── app
//│     └── src
//│         ├── androidTest/java/com/helloworld/app/ExampleInstrumentedTest.java
//│         ├── main
//│         │     ├── AndroidManifest.xml
//│         │     ├── java/com/helloworld/app/MainActivity.java
//│         │     └── res
//│         │         └── values
//│         │             ├── colors.xml
//│         │             └── strings.xml
//│         └── test/java/com/helloworld/app/ExampleUnitTest.java
//└── build.mill
// ----
//

/** Usage

> ./mill show app.test
...compiling 3 Java sources...

> cat out/app/test/test.dest/out.json
["",[{"fullyQualifiedName":"com.helloworld.ExampleUnitTest.textSize_isCorrect","selector":"com.helloworld.ExampleUnitTest.textSize_isCorrect","duration":...,"status":"Success"}]]

*/

// This command runs unit tests on your local environment.

/** Usage

> ./mill show app.createAndroidVirtualDevice
...Name: java-test, DeviceId: medium_phone...

> ./mill show app.startAndroidEmulator

> ./mill show app.waitForDevice
...emulator-5554...

> ./mill show app.it | grep '"OK (1 test)"'
..."OK (1 test)",

> cat out/app/it/test.json | grep '"OK (1 test)"'
..."OK (1 test)"...

> ./mill show app.stopAndroidEmulator

> ./mill show app.deleteAndroidVirtualDevice

*/

// The android tests (existing typically in androidTest directory, aka instrumented tests)
// typically run on an android device.
// The createAndroidVirtualDevice command creates an AVD (Android Virtual Device)
// and the startAndroidEmulator command starts the AVD. The it task runs the android tests
// against the available AVD. The stopAndroidEmulator command stops the AVD and the
// destroyAndroidVirtualDevice command destroys the AVD.
// The provided commands can be used in a CI/CD pipeline assuming the right setup is in place.
