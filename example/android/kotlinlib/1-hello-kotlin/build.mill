// This section sets up a basic Android project using Mill.
// We utilize `AndroidAppKotlinModule` and `AndroidSdkModule` to streamline the process of
// building an Android application with minimal configuration.
//
// By extending `AndroidAppKotlinModule`, we inherit all Android-related tasks such as
// resource generation, APK building, DEX conversion, and APK signing.
// Additionally, `AndroidSdkModule` is embedded, making SDK management seamless.

//// SNIPPET:BUILD
package build

import mill._
import kotlinlib._
import mill.kotlinlib.android.AndroidAppKotlinModule
import mill.javalib.android.AndroidTestModule
import mill.javalib.android.AndroidSdkModule
import coursier.maven.MavenRepository

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
}

// Actual android application
object app extends AndroidAppKotlinModule {

  def kotlinVersion = "2.0.20"
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
  def androidMinSdk = 19
  def androidCompileSdk = 35

  // Configuration for ReleaseKey
  def androidReleaseKeyName: T[Option[String]] = Task { Some("releaseKey.jks") }
  def androidReleaseKeyAlias: T[Option[String]] = Task { Some("releaseKey") }
  def androidReleaseKeyPass: T[Option[String]] = Task { Some("MillBuildTool") }
  def androidReleaseKeyStorePass: T[Option[String]] = Task { Some("MillBuildTool") }
  override def androidVirtualDeviceIdentifier: String = "kotlin-test"
  override def androidEmulatorPort: String = "5556"

  object test extends AndroidAppKotlinTests with TestModule.Junit4 {
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"junit:junit:4.13.2"
    )
  }

  object it extends AndroidAppKotlinInstrumentedTests with AndroidTestModule.AndroidJUnit {

    override def instrumentationPackage = "com.helloworld.app"

    /* TODO currently the dependency resolution ignores the platform type and kotlinx-coroutines-core has
     * conflicting classes with kotlinx-coroutines-core-jvm . Remove the exclusions once the dependency
     * resolution resolves conflicts between androidJvm and jvm platform types
     */
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"androidx.test.ext:junit:1.2.1".exclude((
        "org.jetbrains.kotlinx",
        "kotlinx-coroutines-core-jvm"
      )),
      ivy"androidx.test:runner:1.6.2",
      ivy"androidx.test.espresso:espresso-core:3.5.1".exclude((
        "org.jetbrains.kotlinx",
        "kotlinx-coroutines-core-jvm"
      )),
      ivy"junit:junit:4.13.2"
    )
  }
}

////SNIPPET:END

/** Usage

> ./mill show app.androidApk
".../out/app/androidApk.dest/app.apk"

*/

// This command triggers the build process, which installs the Android Setup, compiles the kotlin
// code, generates Android resources, converts kotlin bytecode to DEX format, packages everything
// into an APK, optimizes the APK using `zipalign`, and finally signs it.
//
// This Mill build configuration is designed to build a simple "Hello World" Android application.
// By extending `AndroidAppKotlinModule`, we leverage its predefined Android build tasks, ensuring that
// all necessary steps (resource generation, APK creation, and signing) are executed automatically.
//
// #### Project Structure:
// The project follows the standard Android app layout. Below is a typical project folder structure:
//
// ----
// .
//├── app
//│   └── src
//│       ├── androidTest/java/com/helloworld/app/ExampleInstrumentedTest.kt
//│       ├── main
//│       │   ├── AndroidManifest.xml
//│       │   ├── java/com/helloworld/app/MainActivity.kt
//│       │   └── res
//│       │       └── values
//│       │           ├── colors.xml
//│       │           └── strings.xml
//│       └── test/java/com/helloworld/app/ExampleUnitTest.kt
//└── build.mill
// ----
//

/** Usage

> ./mill show app.test
...Compiling 2 Kotlin sources...

> cat out/app/test/test.dest/out.json
["",[{"fullyQualifiedName":"com.helloworld.ExampleUnitTest.text_size_is_correct","selector":"com.helloworld.ExampleUnitTest.text_size_is_correct","duration":...,"status":"Success"},{"fullyQualifiedName":"com.helloworld.ExampleUnitTestInKotlinDir.kotlin_dir_text_size_is_correct","selector":"com.helloworld.ExampleUnitTestInKotlinDir.kotlin_dir_text_size_is_correct","duration":...,"status":"Success"}]]

*/

// This command runs unit tests on your local environment.

/** Usage

> ./mill app.createAndroidVirtualDevice

> ./mill show app.startAndroidEmulator

> ./mill show app.adbDevices
...emulator-5556...device...

> ./mill show app.it
...
[
  "",
  [
    {
      "fullyQualifiedName": "com.helloworld.app.ExampleInstrumentedTest.useAppContext",
      "selector": "com.helloworld.app.ExampleInstrumentedTest.useAppContext",
      "duration": ...,
      "status": "Success"
    }
  ]
]
...

> cat out/app/it/testTask.dest/test-report.xml
...
<?xml version='1.0' encoding='UTF-8'?>
<testsuites tests="1" failures="0" errors="0" skipped="0" time="...">
        <testsuite name="com.helloworld.app.ExampleInstrumentedTest.useAppContext" tests="1" failures="0" errors="0" skipped="0" time="0.0" timestamp="...">
        <properties>
      </properties>
        <testcase classname="com.helloworld.app.ExampleInstrumentedTest.useAppContext" name="com.helloworld.app.ExampleInstrumentedTest.useAppContext" time="...">
        </testcase>
      </testsuite>
      </testsuites>
...

> ./mill show app.stopAndroidEmulator

> ./mill show app.deleteAndroidVirtualDevice

*/

// The android tests (existing typically in androidTest directory, aka instrumented tests)
// typically run on an android device.
// The createAndroidVirtualDevice command creates an AVD (Android Virtual Device)
// and the startAndroidEmulator command starts the AVD. The it task runs the integration tests
// against the available AVD. The stopAndroidEmulator command stops the AVD and the
// destroyAndroidVirtualDevice command destroys the AVD.
// The provided commands can be used in a CI/CD pipeline assuming the right setup is in place.
