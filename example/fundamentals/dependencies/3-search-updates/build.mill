// Mill can search for updated versions of your project's dependencies, if
// available from your project's configured repositories. Note that it uses
// heuristics based on common versioning schemes, so it may not work as expected for
// dependencies with particularly weird version numbers. For example, given the following
// build:

package build
import mill._, scalalib._

trait MyModule extends ScalaModule {
  def scalaVersion = "2.13.11"
}

object foo extends MyModule {
  def moduleDeps = Seq(bar)
  def mvnDeps = Seq(mvn"com.lihaoyi::mainargs:0.4.0")
}

object bar extends MyModule {
  def mvnDeps = Seq(
    mvn"com.lihaoyi::mainargs:0.4.0",
    mvn"com.lihaoyi::scalatags:0.8.2"
  )
}

// You can run

/** Usage

> mill mill.scalalib.Dependency/showUpdates
Found 2 dependency update for bar
  com.lihaoyi:mainargs_2.13 : 0.4.0 -> 0.5.0 -> 0.5.1 -> 0.5.2 -> 0.5.3 -> ...
  com.lihaoyi:scalatags_2.13 : 0.8.2 -> 0.8.3 -> 0.8.4 -> 0.8.5 -> 0.8.6 -> ...
Found 1 dependency update for foo
  com.lihaoyi:mainargs_2.13 : 0.4.0 -> 0.5.0 -> 0.5.1 -> 0.5.2 -> 0.5.3 -> ...

> mill mill.scalalib.Dependency/showUpdates --format PerDependency
com.lihaoyi:mainargs_2.13 : 0.4.0 -> 0.5.0 -> 0.5.1 -> 0.5.2 -> 0.5.3 -> ... in
  bar
  foo
com.lihaoyi:scalatags_2.13 : 0.8.2 -> 0.8.3 -> 0.8.4 -> 0.8.5 -> 0.8.6 -> ... in
  bar

> mill mill.scalalib.Dependency/showUpdates --allowPreRelease true # also show pre-release versions

*/

// If you have a meta-build, you can also search for updates there

/** Usage
> mill --meta-level 1 mill.scalalib.Dependency/showUpdates
*/

// Current limitations:
//
// * Only works for `JavaModule` modules (including ``ScalaModule``s,
// ``CrossScalaModule``s, ``KotlinModule``s, etc.) and Maven repositories.
// * Always applies to all modules in the build.
