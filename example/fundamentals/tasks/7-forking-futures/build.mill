// Mill provides the `Task.fork.async` and `Task.fork.await` APIs for spawning async
// futures within a task and aggregating their results later. This API is used by Mill
// to support xref:javalib/testing.adoc#_test_grouping[parallelizing test classes],
// but can be used in your own tasks as well:

package build

import mill._

def taskSpawningFutures = Task {
  val f1 = Task.fork.async(dest = Task.dest / "future-1", key = "1", message = "First Future") {
    println("Running First Future inside " + os.pwd)
    Thread.sleep(3000)
    val res = 1
    println("Finished First Future")
    res
  }
  val f2 = Task.fork.async(dest = Task.dest / "future-2", key = "2", message = "Second Future") {
    println("Running Second Future inside " + os.pwd)
    Thread.sleep(3000)
    val res = 2
    println("Finished Second Future")
    res
  }

  Task.fork.await(f1) + Task.fork.await(f2)
}

/** Usage

> ./mill show taskSpawningFutures
[1] Running First Future inside .../out/taskSpawningFutures.dest/future-1
[2] Running Second Future inside .../out/taskSpawningFutures.dest/future-2
[1] Finished First Future
[2] Finished Second Future
3

*/

// `Task.fork.async` takes several parameters in addition to the code block to be run:
//
// - `dest` is a folder for which the async future is to be run, overriding `os.pwd`
//   for the duration of the future
// - `key` is a short prefix prepended to log lines to let you easily identify the future's
//    log lines and distinguish them from logs of other futures and tasks running concurrently
// - `message` is a one-line description of what the future is doing
//
// Futures spawned by `Task.fork.async` count towards Mill's `-j`/`--jobs` concurrency limit
// (which defaults to one-per-core), so you can freely use `Task.fork.async` without worrying
// about spawning too many concurrent threads and causing CPU or memory contention. `Task.fork`
// uses Java's built in `ForkJoinPool` and `ManagedBlocker` infrastructure under the hood
// to effectively manage the number of running threads.
//
// While `scala.concurrent` and `java.util.concurrent` can also be used to spawn thread
// pools and run async futures, `Task.fork` provides a way to do so that integrates with Mill's
// existing concurrency, sandboxing and logging systems. Thus you should always prefer to
// run async futures on `Task.fork` whenever possible.
