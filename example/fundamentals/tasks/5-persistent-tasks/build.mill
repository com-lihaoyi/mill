// Persistent tasks defined using `Task(persistent = true)` are similar to normal
// cached ``Task``s, except their `Task.dest` folder is not cleared before every
// evaluation. This makes them useful for caching things on disk in a more
// fine-grained manner than Mill's own Task-level caching: the task can
// maintain a cache of one or more files on disk, and decide itself which files
// (or parts of which files!) need to invalidate, rather than having all generated
// files wiped out every time (which is the default behavior for normal Tasks).
//
//
// Below is a semi-realistic example of using `Task(persistent = true)` to compress
// files in an input folder, and re-use previously-compressed files if a file in the
// input folder did not change:
package build
import mill._, scalalib._
import java.util.Arrays
import java.io.ByteArrayOutputStream
import java.util.zip.GZIPOutputStream

def data = Task.Source(millSourcePath / "data")

def compressedData = Task(persistent = true) {
  println("Evaluating compressedData")
  os.makeDir.all(Task.dest / "cache")
  os.remove.all(Task.dest / "compressed")

  for(p <- os.list(data().path)) {
    val compressedPath = Task.dest / "compressed" / s"${p.last}.gz"
    val bytes = os.read.bytes(p)
    val hash = Arrays.hashCode(bytes)
    val cachedPath = Task.dest / "cache" / hash.toHexString
    if (!os.exists(cachedPath)) {
      println("Compressing: " + p.last)
      os.write(cachedPath, compressBytes(bytes))
    } else {
      println("Reading Cached from disk: " + p.last)
    }
    os.copy(cachedPath, compressedPath, createFolders = true)
  }

  os.list(Task.dest / "compressed").map(PathRef(_))
}

def compressBytes(input: Array[Byte]) = {
  val bos = new ByteArrayOutputStream(input.length)
  val gzip = new GZIPOutputStream(bos)
  gzip.write(input)
  gzip.close()
  bos.toByteArray
}

// In this example, we implement a `compressedData` task that takes a folder
// of files in `data` and compresses them, while maintaining a cache of
// compressed contents for each file. That means that if the `data` folder
// is modified, but some files remain unchanged, those files would not be
// unnecessarily re-compressed when `compressedData` evaluates.
//
// Since persistent tasks have long-lived state on disk that lives beyond a
// single evaluation, this raises the possibility of the disk contents getting
// into a bad state and causing all future evaluations to fail. It is left up
// to user of `Task(persistent = true)` to ensure their implementation
// is eventually consistent. You can also use `mill clean` to manually purge
// the disk contents to start fresh.

/** Usage

> ./mill show compressedData
Evaluating compressedData
Compressing: hello.txt
Compressing: world.txt
[
  ".../hello.txt.gz",
  ".../world.txt.gz"
]

> ./mill compressedData # when no input changes, compressedData does not evaluate at all

> sed -i.bak 's/Hello/HELLO/g' data/hello.txt

> ./mill compressedData # when one input file changes, only that file is re-compressed
Compressing: hello.txt
Reading Cached from disk: world.txt

> ./mill clean compressedData

> ./mill compressedData
Evaluating compressedData
Compressing: hello.txt
Compressing: world.txt

*/
