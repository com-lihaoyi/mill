package build
import mill._

def myInput = Task.Input {
  os.proc("git", "rev-parse", "HEAD").call(cwd = Task.workspace)
    .out
    .text()
    .trim()
}

// A generalization of <<_sources>>, ``Task.Input``s are tasks that re-evaluate
// _every time_ (unlike <<_anonymous_tasks>>), containing an
// arbitrary block of code.
//
// Inputs can be used to force re-evaluation of some external property that may
// affect your build. For example, if I have a <<_cached_task, cached task>> `bar` that
// calls out to `git` to compute the latest commit hash and message directly,
// that target does not have any `Task` inputs and so will never re-compute
// even if the external `git` status changes:

def gitStatusTask = Task {
  "version-" +
  os.proc("git", "log", "-1", "--pretty=format:%h-%B ")
    .call(cwd = Task.workspace)
    .out
    .text()
    .trim()
}

/** Usage

> git init .
> git commit --allow-empty -m "Initial-Commit"

> ./mill show gitStatusTask
"version-...-Initial-Commit"

> git commit --allow-empty -m "Second-Commit"

> ./mill show gitStatusTask # Mill didn't pick up the git change!
"version-...-Initial-Commit"

*/

// `gitStatusTask` will not know that `git rev-parse` can change, and will
// not know to re-evaluate when your `git log` _does_ change. This means
// `gitStatusTask` will continue to use any previously cached value, and
// ``gitStatusTask``'s output will  be out of date!

// To fix this, you can wrap your `git log` in a `Task.Input`:

def gitStatusInput = Task.Input {
  os.proc("git", "log", "-1", "--pretty=format:%h-%B ")
    .call(cwd = Task.workspace)
    .out
    .text()
    .trim()
}
def gitStatusTask2 = Task { "version-" + gitStatusInput() }

// This makes `gitStatusInput` to always re-evaluate every build, and only if
// the output of `gitStatusInput` changes will `gitStatusTask2` re-compute

/** Usage

> git commit --allow-empty -m "Initial-Commit"

> ./mill show gitStatusTask2
"version-...-Initial-Commit"

> git commit --allow-empty -m "Second-Commit"

> ./mill show gitStatusTask2 # Mill picked up git change
"version-...-Second-Commit"

*/

// Note that because ``Task.Input``s re-evaluate every time, you should ensure that the
// code you put in `Task.Input` runs quickly. Ideally it should just be a simple check
// "did anything change?" and any heavy-lifting should be delegated to downstream
// tasks where it can be cached if possible.
