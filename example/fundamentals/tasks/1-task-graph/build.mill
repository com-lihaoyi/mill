// The following is a simple self-contained example using Mill to compile Java,
// making use of the most common `Task.Source`, `Task`, and `Task.Command` types
// to define a simple build graph with some input source files and intermediate build steps:
package build
import mill._

def mainClass: T[Option[String]] = Some("foo.Foo")

def sources = Task.Source("src")
def resources = Task.Source("resources")

def compile = Task {
  val allSources = os.walk(sources().path)
  os.call(("javac", allSources, "-d", Task.dest))
  PathRef(Task.dest)
}

def assembly = Task {
  for (p <- Seq(compile(), resources())) os.copy(p.path, Task.dest, mergeFolders = true)

  val mainFlags = mainClass().toSeq.flatMap(Seq("-e", _))
  os.call(
    ("jar", "-c", mainFlags, "-f", Task.dest / "assembly.jar", "."),
    cwd = Task.dest
  )

  PathRef(Task.dest / "assembly.jar")
}

def run(args: String*) = Task.Command {
  os.call(("java", "-jar", assembly().path, args), stdout = os.Inherit)
}

// This code defines the following task graph, with the boxes being the tasks
// and the arrows representing the _data-flow_ between them:
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   sources -> compile -> assembly
//   resources -> assembly
//   mainClass -> assembly
//   assembly -> run
// }
// ```
//
// This example does not use any of Mill's builtin support for building Java or
// Scala projects, and instead builds a pipeline "from scratch" using Mill
// tasks and `javac`/`jar`/`java` subprocesses. It makes use of the three most
// common kind of tasks:
//
// - `sources` and `resources` are <<Sources>>
// - `mainClass`, `compile`, and `assembly` are cached <<Tasks>>
// - `run` is a xref:#_commands[Command]

/** Usage

> ./mill show assembly
".../out/assembly.dest/assembly.jar"

> java -jar out/assembly.dest/assembly.jar i am cow
Foo.value: 31337
args: i am cow

> unzip -p out/assembly.dest/assembly.jar foo.txt
My Example Text

*/

// When you first evaluate `assembly` (e.g. via `mill assembly` at the command
// line), it will evaluate all the defined tasks: `mainClass`, `sources`,
// `compile`, and `assembly`.
//
// Subsequent invocations of `mill assembly` will evaluate only as much as is
// necessary, depending on what input sources changed:
//
// * If the files in `sources` change, it will re-evaluate
//  `compile`, and `assembly` (red)
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   sources -> compile -> assembly
//   resources -> assembly
//   mainClass -> assembly
//   assembly -> run
//   assembly [fillcolor=lightpink]
//   sources [fillcolor=lightpink]
//   compile [fillcolor=lightpink]
//   resources [fillcolor=lightgreen]
//   mainClass [fillcolor=lightgreen]
// }
// ```
//
// * If the files in `resources` change, it will only re-evaluate `assembly` (red)
//   and use the cached output of `compile` (green)
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   sources -> compile -> assembly
//   resources -> assembly
//   mainClass -> assembly
//   assembly -> run
//   assembly [fillcolor=lightpink]
//   resources [fillcolor=lightpink]
//   compile [fillcolor=lightgreen]
//   sources [fillcolor=lightgreen]
//   mainClass [fillcolor=lightgreen]
// }
// ```
//
// `run` behaves differently from `assembly`: as a `Task.Command` it is executed
// every time you run it, even if none of it's upstream ``Task``s or ``Source``s changed.
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0 style=filled fillcolor=white]
//   sources -> compile -> assembly
//   resources -> assembly
//   mainClass -> assembly
//   assembly -> run
//   run [fillcolor=lightpink]
//   assembly [fillcolor=lightgreen]
//   resources [fillcolor=lightgreen]
//   compile [fillcolor=lightgreen]
//   sources [fillcolor=lightgreen]
//   mainClass [fillcolor=lightgreen]
// }
// ```
//
// `Command` outputs are never cached, and thus can never be
// re-used. The only times ``Command``s may be
// skipped is due to xref:large/selective-execution.adoc[]
