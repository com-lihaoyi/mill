package build
import mill._, pythonlib._

object foo extends PythonModule {
  def sources = Task {
    val destPath = Task.dest / "src"
    os.makeDir.all(destPath)

    os.write(
      destPath / "foo.py",
      s"""
         |class Foo:
         |    def main(self) -> None:
         |        print("Hello World")
         |
         |if __name__ ==  '__main__':
         |    Foo().main()
      """.stripMargin
    )
    Seq(PathRef(destPath))
  }

  def mainScript = Task { PathRef(sources().head.path / "foo.py") }

  def typeCheck = Task {
    println("Type Checking...")
    super.typeCheck()
  }

  def run(args: mill.define.Args) = Task.Command {
    typeCheck()
    println("Running..." + args.value.mkString(" "))
    super.run(args)()
  }
}

// You can re-define tasks to override them, and use `super` if you
// want to refer to the originally defined task. The above example shows how to
// override `typeCheck` and `run` to add additional logging messages, and we
// override `sources` which was `Task.Sources` for the `src/` folder with a plain
// `T{...}` task that generates the  necessary source files on-the-fly.
//
// NOTE: that this example *replaces* your `src/` folder with the generated
// sources, as we are overriding the `def sources` task. If you want to *add*
// generated sources, you can either override `generatedSources`, or you can
// override `sources` and use `super` to include the original source folder with `super`:

object foo2 extends PythonModule {
  def generatedSources = Task {
    val destPath = Task.dest / "src"
    os.makeDir.all(destPath)
    os.write(destPath / "foo.py", """...""")
    Seq(PathRef(destPath))
  }

  def mainScript = Task { PathRef(generatedSources().head.path / "foo.py") }

}

object foo3 extends PythonModule {
  def sources = Task {
    val destPath = Task.dest / "src"
    os.makeDir.all(destPath)
    os.write(destPath / "foo.py", """...""")
    super.sources() ++ Seq(PathRef(destPath))
  }
  def mainScript = Task { PathRef(sources().head.path / "foo.py") }

}

// In Mill builds the `override` keyword is optional.

/** Usage

> ./mill foo.run
Type Checking...
Success: no issues found in 1 source file
Running...
Hello World

*/
