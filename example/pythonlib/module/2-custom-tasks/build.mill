// This example shows how to define task that depend on other tasks:
//
// 1. For `generatedSources`, we override the task and make it depend
//    directly on `pythonDeps` to generate its source files. In this example,
//    to include the list of dependencies as tuples in the `value` variable.
//
// 2. For `lineCount`, we define a brand new task that depends on `sources`.
//    That lets us access the line count at runtime using `MY_LINE_COUNT`
//    env variable defined in `forkEnv` and print it when the program runs
//
package build
import mill._, pythonlib._

object foo extends PythonModule {

  def pythonDeps = Seq("argparse==1.4.0", "jinja2==3.1.4")

  def mainScript = Task.Source { millSourcePath / "src" / "foo.py" }

  def generatedSources: T[Seq[PathRef]] = Task {
    val destPath = Task.dest / "generatedSources"
    os.makeDir.all(destPath)

    val prettyPythonDeps = pythonDeps().map { dep =>
      val parts = dep.split("==")
      s"""("${parts(0)}", "${parts(1)}")"""
    }.mkString(", ")

    os.write(
      destPath / s"myDeps.py",
      s"""
         |class MyDeps:
         |    value = [${prettyPythonDeps}]
			""".stripMargin
    )

    Seq(PathRef(destPath))
  }

  def lineCount: T[Int] = Task {
    sources()
      .flatMap(pathRef => os.walk(pathRef.path))
      .filter(_.ext == "py")
      .map(os.read.lines(_).size)
      .sum
  }

  def forkEnv: T[Map[String, String]] = Map("MY_LINE_COUNT" -> s"${lineCount()}")

  def printLineCount() = Task.Command { println(lineCount()) }

}

// The above build defines the customizations to the Mill task graph shown below,
// with the boxes representing tasks defined or overriden above and the un-boxed
// labels representing existing Mill tasks:
//
// ```graphviz
// digraph G {
//   rankdir=LR
//   node [shape=box width=0 height=0]
//   pythonDeps -> generatedSources -> "..."
//
//   sources -> lineCount -> forkEnv -> "..." -> run
//   lineCount -> printLineCount
//
//   sources [color=white]
//   run [color=white]
//
//   "..." [color=white]
// }
// ```
//
// Mill lets you define new cached Tasks using the `Task {...}` syntax,
// depending on existing Tasks e.g. `foo.sources` via the `foo.sources()`
// syntax to extract their current value, as shown in `lineCount` above. The
// return-type of a Task has to be JSON-serializable (using
// https://github.com/lihaoyi/upickle[uPickle], one of Mill's xref:fundamentals/bundled-libraries.adoc[Bundled Libraries])
// and the Task is cached when first run until its inputs change (in this case, if
// someone edits the `foo.sources` files which live in `foo/src`). Cached Tasks
// cannot take parameters.
//
// Note that depending on a task requires use of parentheses after the task
// name, e.g. `pythonDeps()`, `sources()` and `lineCount()`. This converts the
// task of type `T[V]` into a value of type `V` you can make use in your task
// implementation.
//
// This example can be run as follows:
//
/** Usage

> ./mill foo.run --text hello
text:  hello
MyDeps.value:  [('argparse', '1.4.0'), ('jinja2', '3.1.4')]
My_Line_Count:  23

> ./mill show foo.lineCount
23

> ./mill foo.printLineCount
23

*/

// Custom tasks can contain arbitrary code. Whether you want to download files
// using `requests.get`, generate sources to feed into a Python Interpreter, or
// create some custom pex bundle with the files you want , all of these
// can simply be custom tasks with your code running in the `Task {...}` block.
//
// You can create arbitrarily long chains of dependent tasks, and Mill will
// handle the re-evaluation and caching of the tasks' output for you.
// Mill also provides you a `Task.dest` folder for you to use as scratch space or
// to store files you want to return:
//
// * Any files a task creates should live
//   within `Task.dest`
//
// * Any files a task modifies should be copied into
//   `Task.dest` before being modified.
//
// * Any files that a task returns should be returned as a `PathRef` to a path
//   within `Task.dest`
//
// That ensures that the files belonging to a particular task all live in one place,
// avoiding file-name conflicts, preventing race conditions when tasks evaluate
// in parallel, and letting Mill automatically invalidate the files when
// the task's inputs change.
