// This example shows some of the common tasks you may want to override on a
// `PythonModule`: specifying the `mainScript`, adding additional
// sources/resources, generating sources, and setting typecheck/run options.
// Also we have support for `forkenv` and  `pythonOptions` to allow user to
// add variables for environment and options for python respectively.

package build
import mill._, pythonlib._

object foo extends PythonModule {
  // You can have arbitrary numbers of third-party libraries
  def pythonDeps = Seq("MarkupSafe==3.0.2", "Jinja2==3.1.4")

  // choose a main Script to run if there are multiple present
  def mainScript = Task.Source { millSourcePath / "custom-src" / "foo2.py" }

  // Add (or replace) source folders for the module to use
  def sources = Task.Sources {
    super.sources() ++ Seq(PathRef(millSourcePath / "custom-src"))
  }

  // Add (or replace) resource folders for the module to use
  def resources = Task.Sources {
    super.resources() ++ Seq(PathRef(millSourcePath / "custom-resources"))
  }

  // Generate sources at build time
  def generatedSources: T[Seq[PathRef]] = Task {
    val destPath = Task.dest / "generatedSources"
    os.makeDir.all(destPath)
    for (name <- Seq("A", "B", "C")) os.write(
      destPath / s"foo$name.py",
      s"""
         |class Foo$name:
         |    value = "hello $name"
      """.stripMargin
    )

    Seq(PathRef(destPath))
  }
  // Pass additional environmental variables when `.run` is called.
  def forkEnv: T[Map[String, String]] = Map("MY_CUSTOM_ENV" -> "my-env-value")

  // Additional Python options e.g. to Turn On Warnings and ignore import and resource warnings
  // we can use -Werror to treat warnings as errors
  def pythonOptions: T[Seq[String]] =
    Seq("-Wall", "-Wignore::ImportWarning", "-Wignore::ResourceWarning")

}

// Note the use of `millSourcePath`, `Task.dest`, and `PathRef` when preforming
// various filesystem operations:
//
// 1. `millSourcePath`: Base path of the module. For the root module, it's the repo root.
//    For inner modules, it's the module path (e.g., `foo/bar/qux` for `foo.bar.qux`). Can be overridden if needed.
//
// 2. `Task.dest`: Destination folder in the `out/` folder for task output.
//    Prevents filesystem conflicts and serves as temporary storage or output for tasks.
//
// 3. `PathRef`: Represents the contents of a file or folder, not just its path,
//    ensuring downstream tasks properly invalidate when contents change.
//
// Typical Usage is given below:
//
/** Usage

> ./mill foo.run
...
Foo2.value: <h1>hello2</h1>
Foo.value: <h1>hello</h1>
FooA.value: hello A
FooB.value: hello B
FooC.value: hello C
MyResource: My Resource Contents
MyOtherResource: My Other Resource Contents
MY_CUSTOM_ENV: my-env-value
...

> ./mill show foo.bundle
".../out/foo/bundle.dest/bundle.pex"

> out/foo/bundle.dest/bundle.pex
...
Foo2.value: <h1>hello2</h1>
Foo.value: <h1>hello</h1>
FooA.value: hello A
FooB.value: hello B
FooC.value: hello C
MyResource: My Resource Contents
MyOtherResource: My Other Resource Contents
...

> sed -i.bak 's/import os/import os, warnings; warnings.warn("This is a test warning!")/g' foo/custom-src/foo2.py

> ./mill foo.run
...UserWarning: This is a test warning!...

*/
