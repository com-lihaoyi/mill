package build
import mill._, pythonlib._

object foo extends PythonModule {

  def mainScript = Task.Source { millSourcePath / "src" / "foo.py" }

  object test extends PythonTests with TestModule.Unittest

}

object bar extends PythonModule {

  def mainScript = Task.Source { millSourcePath / "src" / "bar.py" }

  object test extends PythonTests with TestModule.Pytest

}

/** Usage

> ./mill foo.test.test
...
test_hello (test_foo.TestScript...) ... ok
test_mock (test_foo.TestScript...) ... ok
test_world (test_foo.TestScript...) ... ok
...Ran 3 tests...
OK
...

> ./mill foo.test # same as above, `.test` is the default task for the `test` module
...
test_hello (test_foo.TestScript...) ... ok
test_mock (test_foo.TestScript...) ... ok
test_world (test_foo.TestScript...) ... ok
...Ran 3 tests...
OK
...

> ./mill foo.test test_foo.TestScript.test_mock # explicitly select the test class you wish to run 
...
test_mock (test_foo.TestScript...) ... ok
...Ran 1 test...
OK
...

> ./mill foo.test.testCached
...
test_hello (test_foo.TestScript...) ... ok
test_mock (test_foo.TestScript...) ... ok
test_world (test_foo.TestScript...) ... ok
...Ran 3 tests...
OK
...

> ./mill bar.test
...test_bar.py::test_hello PASSED...
...test_bar.py::test_world PASSED...
...test_bar.py::test_mock PASSED...
...3 passed...

> ./mill bar.test bar/test/src/test_bar.py::test_mock # explicitly select the test class you wish to run 
...test_bar.py::test_mock PASSED...
...1 passed...

> ./mill __.test
...
test_hello (test_foo.TestScript...) ... ok
test_mock (test_foo.TestScript...) ... ok
test_world (test_foo.TestScript...) ... ok
...Ran 3 tests...
OK
...test_bar.py::test_hello PASSED...
...test_bar.py::test_world PASSED...
...test_bar.py::test_mock PASSED...
...3 passed...
...

*/
