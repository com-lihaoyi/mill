// First, make your module extend `pythonlib.RuffModule`.

package build
import mill._, pythonlib._

object `package` extends RootModule with PythonModule with RuffModule

// You can reformat your project's code by running the `ruffFormat` task.

/** Usage

> cat src/main.py # initial poorly formatted source code
from typing import Self
class IntWrapper:
   def __init__(self, x:int):
     self.x    =x
   def plus(self, w:Self) ->   Self:
      return     IntWrapper(self.x + w.x)
print(IntWrapper(2).plus(IntWrapper(3)).x)
...

> mill ruffFormat --diff # you can also pass in extra arguments understood by `ruff format`
error: ...
error: @@ -1,7 +1,12 @@
error:  from typing import Self
error: +
error: +
error:  class IntWrapper:
error: -   def __init__(self, x:int):
error: -     self.x    =x
error: -   def plus(self, w:Self) ->   Self:
error: -      return     IntWrapper(self.x + w.x)
error: +    def __init__(self, x: int):
error: +        self.x = x
error: +
error: +    def plus(self, w: Self) -> Self:
error: +        return IntWrapper(self.x + w.x)
error: +
error: +
error:  print(IntWrapper(2).plus(IntWrapper(3)).x)
error: ...
error: 1 file would be reformatted

> mill ruffFormat
...1 file reformatted

> cat src/main.py # the file is now correctly formatted
from typing import Self
...
class IntWrapper:
    def __init__(self, x: int):
        self.x = x
...
    def plus(self, w: Self) -> Self:
        return IntWrapper(self.x + w.x)
...
print(IntWrapper(2).plus(IntWrapper(3)).x)
*/

// You can create a `ruff.toml` file in your project root to adjust the
// formatting options as desired. For example,

/** Usage

> echo indent-width=2 > ruff.toml

> mill ruffFormat
...1 file reformatted

> cat src/main.py # the file is now correctly formatted with 2 spaces indentation
from typing import Self
...
class IntWrapper:
  def __init__(self, x: int):
    self.x = x
...
  def plus(self, w: Self) -> Self:
    return IntWrapper(self.x + w.x)
...
print(IntWrapper(2).plus(IntWrapper(3)).x)

*/

// Mill also has built-in global tasks, which allow you to run ruff across all projects in your
// build, without ever needing to extend `RuffModule`.
//
// - format all Python files globally: `mill mill.pythonlib.RuffModule/formatAll`
// - lint all Python files globally: `mill mill.pythonlib.RuffModule/checkAll`
//
// You can also pass-in extra arguments to ruff, for example to find unformatted files and show the
// diff: `mill mill.pythonlib.RuffModule/formatAll --diff`
//
// If entering `mill.pythonlib.RuffModule/formatAll` is too long, you can add an
// xref:fundamentals/modules.adoc#_aliasing_external_modules[External Module Alias] to give it a
// shorter name that's easier to type.

/** Usage
> mill mill.pythonlib.RuffModule/formatAll
*/
