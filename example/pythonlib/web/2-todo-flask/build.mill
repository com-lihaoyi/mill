// This is a `Flask`-based `Todo` application managed and build using `Mill`.
// It allows users to `add`, `edit`, `delete`, and `view` tasks stored in a `SQLite` database.
// `Flask-SQLAlchemy` handles database operations, while `Flask-WTF` manages forms
// for task creation and updates.
package build
import mill._, pythonlib._

object todo extends PythonModule {

  def mainScript = Task.Source { millSourcePath / "src" / "app.py" }

  def pythonDeps = Seq("flask==3.1.0", "Flask-SQLAlchemy==3.1.1", "Flask-WTF==1.2.2")

  object unitTest extends PythonTests with TestModule.Unittest
  object integrationTest extends PythonTests with TestModule.Unittest

}

// Apart from running a web server, this example demonstrates:

// - **Serving HTML templates** using **Jinja2** (Flask's default templating engine).
// - **Managing static files** such as JavaScript, CSS, and images.
// - **Querying a SQL database** using **Flask-SQLAlchemy** with an **SQLite** backend.
// - **Form handling and validation** with **Flask-WTF**.
// - **Unit testing** using **unittest** with SQLite in-memory database.
// - **Integration testing** using **unittest**.

// This example also utilizes **Mill** for managing `dependencies`, `builds`, and `tests`,
// offering an efficient development workflow.

/** Usage

> ./mill todo.unitTest
...
test_task_creation (test_unit.UnitTest...) ... ok
test_task_status_update (test_unit.UnitTest...) ... ok
...
Ran 2 tests...
OK
...

> ./mill todo.integrationTest
...
test_add_task (test_integration.IntegrationTest...)
Test adding a task through the /add route. ... ok
test_delete_task (test_integration.IntegrationTest...) ... ok
test_edit_task (test_integration.IntegrationTest...)
Test editing a task through the /edit/<int:task_id> route. ... ok
test_index_empty (test_integration.IntegrationTest...)
Test the index route with no tasks. ... ok
...
Ran 4 tests...
OK
...

> ./mill todo.runBackground

> curl http://localhost:5001
...To-Do Flask App Using Mill Build Tool...

> ./mill clean todo.runBackground

*/
