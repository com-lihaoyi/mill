// This `Django TodoMVC` example is a task management application built using `Mill` Build Tool.
// It features dynamic `HTML` rendering with `Django's` template engine, `CRUD` operations with
// Django `ORM`, and efficient form handling for managing tasks.
package build
import mill._, pythonlib._

object todo extends PythonModule {

  def mainScript = Task.Source { millSourcePath / "src" / "manage.py" }

  def pythonDeps = Seq("django==5.1.4")

}

// Apart from running a `web server`, this example demonstrates:

// - **Serving HTML templates** using **Django's template engine**.
// - **Managing static files** such as JavaScript, CSS, and images.
// - **Querying a SQL database** using **Django ORM** with an **SQLite** backend.
// - **Form handling and validation** with **Django forms**.
// - **Unit testing** using Django's inbuilt testing framework with SQLite in-memory database.
// - **URL routing** and **views** for CRUD operations.

// This Mill Build File simplifies `dependency management`, `database migrations`, and `testing workflows`.

// Running these commands will `test` and `run` the `Django Todo App`.

/** Usage

> ./mill todo.run makemigrations
...Migrations for 'main'...
...Create model Task...

> ./mill todo.run migrate
...Apply all migrations: admin, auth, contenttypes, main, sessions...
...Running migrations...
...OK...

> ./mill todo.run test main -v 2
...
test_add_task_message (main.tests.TestScript...)
Test that a success message appears when a task is successfully added. ... ok
test_add_task_view_get (main.tests.TestScript...)
Test that the 'Add Task' page loads successfully with an empty form. ... ok
test_add_task_view_post_invalid_data (main.tests.TestScript...)
Test that submitting the form with invalid data shows errors. ... ok
test_add_task_view_post_valid_data (main.tests.TestScript...)
Test that submitting the form with valid data creates a new task. ... ok
test_default_status (main.tests.TestScript...)
Test that the default status of a task is 'Pending'. ... ok
test_delete_task_message (main.tests.TestScript...)
Test that a success message appears when a task is deleted. ... ok
test_delete_task_view (main.tests.TestScript...)
Test that deleting a task works and redirects to the task list. ... ok
test_edit_task_view_post_valid_data (main.tests.TestScript...)
Test that editing a task updates its details. ... ok
test_str_method (main.tests.TestScript...)
Test the __str__ method of the Task model. ... ok
test_url_resolves_to_correct_view (main.tests.TestScript...)
Test that the correct view function is mapped to each URL. ... ok
...
...Ran 10 tests...
OK
...

> ./mill todo.runBackground runserver 8001

> curl http://localhost:8001
...To-Do Django App Using Mill Build Tool...

> ./mill clean todo.runBackground

*/
