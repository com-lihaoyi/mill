package build
import mill._, pythonlib._

object foo extends PythonModule { f =>

  def script: T[PathRef] = Task.Source { millSourcePath / "src" / "foo.py" }

  def pythonDeps = Seq("Jinja2==3.1.4")

  object test extends PythonTests with TestModule.Unittest
  // object test2 extends PythonTests with TestModule.Pytest {
  //   override def sources = Task {
  //     f.test.sources()
  //   }
  // }
}

/** Usage

> ./mill foo.typeCheck
Success: no issues found in 1 source file

> ./mill foo.run --text "Hello Mill"
<h1>Hello Mill</h1>

> ./mill foo.test
...
test_escaping (...test.TestScript...) ... ok
test_simple (...test.TestScript...) ... ok
...
----------------------------------------------------------------------
...Ran 2 tests...
OK
...

> ./mill show foo.bundle
".../out/foo/bundle.dest/bundle.pex"

> out/foo/bundle.dest/bundle.pex --text "Hello Mill" # running the PEX binary outside of Mill
<h1>Hello Mill</h1>

> sed -i.bak 's/print(main())/print(maaain())/g' foo/src/foo.py

> ./mill foo.typeCheck # if we make a typo in a method name, mypy flags it
error: ...Name "maaain" is not defined...

*/
