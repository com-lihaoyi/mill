//// SNIPPET:BUILD
package build
import mill._, kotlinlib._

object foo extends KotlinModule {

  def kotlinVersion = "1.9.24"

  def mainClass = Some("foo.FooKt")

  def ivyDeps = Agg(
    ivy"com.github.ajalt.clikt:clikt-jvm:4.4.0",
    ivy"org.jetbrains.kotlinx:kotlinx-html-jvm:0.11.0"
  )

  object test extends KotlinTests with TestModule.Junit5 {
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"io.kotest:kotest-runner-junit5-jvm:5.9.1"
    )
  }
}

// This is a basic Mill build for a single `KotlinModule`, with two
// third-party dependencies and a test suite using the JUnit framework.
//// SNIPPET:TREE
// ----
// build.mill
// foo/
//     src/
//         foo/Foo.kt
//     resources/
//         ...
//     test/
//         src/
//             foo/FooTest.kt
// out/foo/
//     compile.json
//     compile.dest/
//     ...
//     test/
//         compile.json
//         compile.dest/
//         ...
// ----
//
// NOTE: The default Mill source folder layout `foo/src/` differs from that of Maven/Gradle's
// `foo/src/main/kotlin`. If you wish to use the Maven source folder layout, e.g. for migrating
// an existing codebase, you should use
// xref:#_maven_compatible_modules[Maven-Compatible Modules]
//
//// SNIPPET:DEPENDENCIES
//
// This example project uses two third-party dependencies - Clikt for CLI
// argument parsing, Apache Commons Text for HTML escaping - and uses them to wrap a
// given input string in HTML templates with proper escaping.
//
// Typical usage of a `KotlinModule` is shown below

/** Usage

> ./mill resolve foo._ # List what tasks are available to run
foo.assembly
...
foo.compile
...
foo.run
...

> ./mill inspect foo.compile # Show documentation and inputs of a task
foo.compile(KotlinModule...)
    Compiles all the sources to JVM class files.
    Compiles the current module to generate compiled classfiles/bytecode.
    When you override this, you probably also want/need to override [[bspCompileClassesPath]],
    as that needs to point to the same compilation output path.
    Keep in sync with [[bspCompileClassesPath]]
Inputs:
    foo.allJavaSourceFiles
    foo.allKotlinSourceFiles
    foo.compileClasspath
    foo.upstreamCompileOutput
    foo.javacOptions
    foo.zincReportCachedProblems
    foo.kotlincOptions
    foo.kotlinCompilerClasspath
...

> ./mill foo.compile # compile sources into classfiles
...
Compiling 1 Kotlin sources to...

> ./mill foo.run # run the main method, if any
error: Error: missing option --text
...

> ./mill foo.run --text hello
<h1>hello</h1>

> ./mill foo.test
...
Test foo.FooTesttestSimple finished, ...
Test foo.FooTesttestEscaping finished, ...
Test foo.FooTest finished, ...
Test run finished: 0 failed, 0 ignored, 2 total, ...

> ./mill foo.assembly # bundle classfiles and libraries into a jar for deployment

> ./mill show foo.assembly # show the output of the assembly task
".../out/foo/assembly.dest/out.jar"

> java -jar ./out/foo/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/foo/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

*/
