//// SNIPPET:ALL
// Mill's default folder layout of `foo/src/` and `foo/test/src` differs from that
// of Maven or Gradle's `foo/src/main/kotlin/` and `foo/src/test/kotlin/`. If you are
// migrating an existing codebase, you can use Mill's `KotlinMavenModule` and
// `KotlinMavenTests` as shown below to preserve filesystem compatibility with an existing
// Maven or Gradle build:

package build
import mill._, kotlinlib._

object foo extends KotlinModule with KotlinMavenModule {

  def kotlinVersion = "1.9.24"

  object test extends KotlinMavenTests with TestModule.Junit5 {
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"io.kotest:kotest-runner-junit5-jvm:5.9.1"
    )
  }
}


// `KotlinMavenModule` is a variant of `KotlinModule`
// that uses the more verbose folder layout of Maven, SBT, and other tools:
//
// - `foo/src/main/java`
// - `foo/src/main/kotlin`
// - `foo/src/test/java`
// - `foo/src/test/kotlin`
//
// Rather than Mill's
//
// - `foo/src`
// - `foo/test/src`
//
// This is especially useful if you are migrating from Maven to Mill (or vice
// versa), during which a particular module may be built using both Maven and
// Mill at the same time

/** Usage

> mill foo.compile
Compiling 1 Kotlin source...

> mill foo.test.compile
Compiling 1 Kotlin source...

> mill foo.test.test
...foo.FooTestshello ...

> mill foo.test
...foo.FooTestshello ...

*/
