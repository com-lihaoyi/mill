//// SNIPPET:BUILD

package build
import mill._, kotlinlib._
import kotlinlib.ksp.KspModule

object dagger extends KspModule {

  def kotlinVersion = "2.1.0"

  def kspVersion = "1.0.29"

  def kotlinLanguageVersion = "1.9"

  def mainClass = Some("com.example.dagger.MainKt")

  def kotlincOptions = super.kotlincOptions() ++ Seq("-no-reflect", "-verbose")

  def ivyDeps = Agg(
    ivy"com.google.dagger:dagger-compiler:2.55"
  )

  def kotlinSymbolProcessors = Agg(
    ivy"com.google.dagger:dagger-compiler:2.55"
  )

  object test extends KspTests with TestModule.Junit5 {

    def kotlincOptions = super.kotlincOptions() ++ Seq("-no-reflect", "-verbose")

    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"com.google.dagger:dagger-compiler:2.55",
      ivy"io.kotest:kotest-runner-junit5-jvm:5.9.1"
    )

    def kotlinSymbolProcessors = Agg(
      ivy"com.google.dagger:dagger-compiler:2.55"
    )

  }
}

// This is a basic Mill build for a single `KotlinModule`, with
// the purpose to demonstrate the Kotlin Symbol Processing API
// using Dagger, a dependency injection framework as an example.

/** Usage

> ./mill show dagger.compile

> ls out/dagger/generateSourcesWithKSP.dest/generated/ksp/main/java/com/example/dagger/
DaggerNumberApp.java
NumberService_Factory.java
RandomNumberGenerator_Factory.java

> ./mill show dagger.run
Random number: ...

> ./mill show dagger.test
...
[
  "",
  [
    {
      "fullyQualifiedName": "com.example.dagger.TestConstantNumberGeneratorInjection",
      "selector": "SuiteSelector",
      "duration": ...,
      "status": "Success"
    },
    {
      "fullyQualifiedName": "com.example.dagger.TestConstantNumberGeneratorInjection",
      "selector": "SuiteSelector",
      "duration": ...,
      "status": "Success"
    }
  ]
]
...

> ls out/dagger/test/generateSourcesWithKSP.dest/generated/ksp/main/java/com/example/dagger/
ConstantNumberGenerator_Factory.java
DaggerDemoComponent.java
DaggerTestApp.java

*/
