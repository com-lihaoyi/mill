//// SNIPPET:ALL
// Mill's default folder layout of `foo/src/` and `foo/test/src` differs from that
// of Maven or Gradle's `foo/src/main/kotlin/` and `foo/src/test/kotlin/`. If you are
// migrating an existing codebase, you can use Mill's `KotlinMavenModule` and
// `KotlinMavenTests` as shown below to preserve filesystem compatibility with an existing
// Maven or Gradle build:

/** See Also: build.mill.yaml */

// `KotlinMavenModule` is a variant of `KotlinModule`
// that uses the more verbose folder layout of Maven, `sbt`, and other tools:
//
// - `src/main/java`
// - `src/main/kotlin`
// - `src/test/java`
// - `src/test/kotlin`
// - `src/integration/java`
// - `src/integration/kotlin`
//
// Rather than Mill's
//
// - `src`
// - `test/src`
//
// This is especially useful if you are migrating to Mill, as during the migration a
// particular module may be built using both Maven/Gradle and Mill at the
// same time. That means that during migration, you can leave all your source files
// in place while setting up your Mill build, and do not need to invasively move them
// around to match the Mill default module layout.
//
// Although the source layout of these compatibility modules is different from the
// default `KotlinModule`, the command-line usage is the same:

/** Usage

> ./mill compile
Compiling 1 Kotlin source...

> ./mill test.compile
Compiling 1 Kotlin source...

> ./mill test.testForked
...foo.FooTests hello ...

> ./mill test
...foo.FooTests hello ...

> ./mill integration
...foo.FooIntegrationTests hello ...

*/

// For more details on migrating from other build tools, see xref:migrating/migrating.adoc[]
