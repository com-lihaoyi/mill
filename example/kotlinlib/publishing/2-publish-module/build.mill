//// SNIPPET:BUILD
package build
import mill._, kotlinlib._, publish._

object foo extends KotlinModule with PublishModule {

  def kotlinVersion = "1.9.24"

  def publishVersion = "0.0.1"

  def pomSettings = PomSettings(
    description = "Hello",
    organization = "com.lihaoyi",
    url = "https://github.com/lihaoyi/example",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("lihaoyi", "example"),
    developers = Seq(Developer("lihaoyi", "Li Haoyi", "https://github.com/lihaoyi"))
  )
}

// This is an example `KotlinModule` with added publishing capabilities via
// `PublishModule`. This requires that you define an additional
// `publishVersion` and `pomSettings` with the relevant metadata, and provides
// the `.publishLocal` and `publishSigned` tasks for publishing locally to the
// machine or to the central maven repository

/** Usage

> mill foo.publishLocal
Publishing Artifact(com.lihaoyi,foo,0.0.1) to ivy repo...

*/

// `publishLocal` accepts options like `--doc=false` and `--sources=false`,
// to disable publishing javadoc JARs and source JARs, which are generated and
// published by default. This can be helpful if you're not interested in javadoc JARs,
// and javadoc generation fails, and you would rather address those errors later for example.

// `publishLocal` also accepts `--transitive=true`, to also publish locally the
// transitive dependencies of the module being published. This ensures the module
// can be resolved from the local repository, with no missing dependencies.
