// This section sets up a basic Jetpack Compose project using Mill.
// We utilize `AndroidAppKotlinModule` and `AndroidSdkModule` to streamline the process of
// building an Android application with minimal configuration.
//
// By extending `AndroidAppKotlinModule`, we inherit all Android-related tasks such as
// resource generation, APK building, DEX conversion, and APK signing.
// Additionally, `AndroidSdkModule` is embedded, making SDK management seamless.

//// SNIPPET:BUILD
package build

import mill._, androidlib._, kotlinlib._

import coursier.core.{MinimizedExclusions, ModuleName, Organization}
import coursier.params.ResolutionParams

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
}

// Actual android application
object app extends AndroidAppKotlinModule {

  def kotlinVersion = "2.0.21"
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)
  def androidCompileSdk = 35
  def androidMinSdk = 26
  def androidEnableCompose = true

  def androidIsDebug = true

  def androidApplicationId = "com.example.composetest"
  def androidApplicationNamespace = "com.example.composetest"

  def mvnDeps: T[Seq[Dep]] = Seq(
    mvn"androidx.core:core-ktx:1.15.0",
    mvn"androidx.appcompat:appcompat:1.7.0",
    mvn"androidx.annotation:annotation:1.9.1",
    mvn"androidx.activity:activity-compose:1.10.0",
    mvn"androidx.compose.material3:material3:1.3.1",
    mvn"androidx.compose.ui:ui:1.7.6",
    mvn"androidx.emoji2:emoji2:1.3.0",
    mvn"androidx.compose.ui:ui-graphics:1.7.6",
    mvn"androidx.lifecycle:lifecycle-common:2.8.7",
    mvn"androidx.lifecycle:lifecycle-process:2.8.7",
    mvn"androidx.lifecycle:lifecycle-runtime-compose:2.8.7",
    mvn"androidx.lifecycle:lifecycle-viewmodel-compose:2.8.7",
    mvn"androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7",
    mvn"androidx.customview:customview-poolingcontainer:1.0.0",
    mvn"androidx.tracing:tracing:1.2.0"
  )

}

////SNIPPET:END

/** Usage

> ./mill show app.androidApk
".../out/app/androidApk.dest/app.apk"


> ./mill show app.createAndroidVirtualDevice
...Name: test, DeviceId: medium_phone...

> ./mill show app.startAndroidEmulator

> ./mill show app.androidInstall
...All files should be loaded. Notifying the device...

> ./mill show app.androidRun --activity com.example.composetest.MainActivity
[
  "Starting: Intent { cmp=com.example.composetest/.MainActivity }",
  "Status: ok",
  "LaunchState: COLD",
  "Activity: com.example.composetest/.MainActivity",
  "TotalTime: ...",
  "WaitTime: ...",
  "Complete"
]

> ./mill show app.stopAndroidEmulator

> ./mill show app.deleteAndroidVirtualDevice

*/

// This command triggers the build process, which installs the necessary build components, compiles the Kotlin
// code, generates Android resources, converts Kotlin bytecode to DEX format, packages everything
// into an APK, optimizes the APK using `zipalign`, and finally signs it.
//
// This Mill build configuration is designed to build a simple click counter Jetpack Compose application.
// By extending `AndroidAppKotlinModule`, we leverage its predefined Android build tasks, ensuring that
// all necessary steps (resource generation, APK creation, and signing) are executed automatically.
//
// #### Project Structure:
// The project follows the standard Android app layout from Android Studio, you can see the necessary changes in
// the build script to support it.
//
// ----
// .
// ├── app
// │   └── src
// │       └── main
// │           ├── kotlin/com/helloworld/app/MainActivity.kt
// │           ├── res
// │           │   └── [values, drawable, mipmap-<conf>, xml]
// │           └── AndroidManifest.xml
// └── build.mill
// ----
//
