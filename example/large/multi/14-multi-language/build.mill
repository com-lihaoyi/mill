package build
import mill._, javascriptlib._, pythonlib._, javalib.{TestModule => JTestModule, _}

object client extends ReactScriptsModule

object `sentiment-analysis` extends PythonModule {
  def mainScript = Task.Source { millSourcePath / "src" / "foo.py" }

  def pythonDeps = Seq("Jinja2==3.1.4", "textblob==0.19.0")
}

object server extends JavaModule {
  def ivyDeps = Agg(
    ivy"org.springframework.boot:spring-boot-starter-web:2.5.6",
    ivy"org.springframework.boot:spring-boot-starter-actuator:2.5.6"
  )

  /** Bundle client & sentiment-analysis as resource */
  def resources = Task.Sources {
    os.copy(client.bundle().path, Task.dest / "static")
    os.makeDir.all(Task.dest / "analysis")
    os.copy(`sentiment-analysis`.bundle().path, Task.dest / "analysis" / "analysis.pex")
    super.resources() ++ Seq(PathRef(Task.dest))
  }

  object test extends JavaTests with JTestModule.Junit5 {
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"org.springframework.boot:spring-boot-starter-test:2.5.6"
    )
  }
}

// This example demonstrates a simple multi-langauge project,
// running a `spring boot webserver` serving a `react client` and interacting with a `python binary`
// through the web-server api.

/** Usage

> mill server.test
...com.example.ServerTest#shouldReturnStaticPage() finished...
...com.example.ServerTest#shouldReturnPositiveAnalysis() finished...
...com.example.ServerTest#shouldReturnNegativeAnalysis() finished...

> mill server.runBackground

> curl http://localhost:8086
...<title>Sentiment Analysis Tool</title>...

> mill clean server.runBackground
*/
