// Apart from having `package` files in subfolders to define modules, Mill
// also allows you to have helper code in any `*.mill` file in the same folder
// as your `build.mill` or a `package.mill`.

package build
import mill.*, scalalib.*

object `package` extends MyModule {
  def forkEnv = Map(
    "MY_SCALA_VERSION" -> build.scalaVersion(),
    "MY_PROJECT_VERSION" -> foo.myProjectVersion
  )
}

/** See Also: util.mill */
/** See Also: foo/package.mill */
/** See Also: foo/versions.mill */

//
// Different helper scripts and ``build.mill``/``package`` files can all refer to
// each other using the `build` object, which marks the root object of your build.
// In this example:
//
// * `build.mill`, `util.mill` and other adjacent files  can be referred to as simple `build`
// * `foo/package`, `foo/versions.mill`, and other adjacent files can be referred to as simple `build.foo`

// Helper files are very handy for you to put custom logic which you use in
// your `build.mill` or `package.mill` module definitions. This can help keep
// your `build.mill` or `package.mill` files concise and understandable.

/** Usage

> ./mill run
Main Env build.util.myScalaVersion: 2.13.14
Main Env build.foo.versions.myProjectVersion: 0.0.1

> ./mill foo.run
Foo Env build.util.myScalaVersion: 2.13.14
Foo Env build.foo.versions.myProjectVersion: 0.0.1

*/
