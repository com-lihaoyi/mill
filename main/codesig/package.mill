package build.main.codesig
import mill._, scalalib._

object `package` extends RootModule with build.MillPublishScalaModule {
  override def ivyDeps = Agg(build.Deps.asmTree, build.Deps.osLib, build.Deps.pprint)
  def moduleDeps = Seq(build.main.util)

  override lazy val test: CodeSigTests = new CodeSigTests {}
  trait CodeSigTests extends MillScalaTests {
    val caseKeys = build.interp.watchValue(
      os.walk(millSourcePath / "cases", maxDepth = 3)
        .map(_.subRelativeTo(millSourcePath / "cases").segments)
        .collect { case Seq(a, b, c) => s"$a-$b-$c" }
    )

    def testLogFolder = Task { T.dest }

    def caseEnvs[V](f1: CaseModule => Task[V])(s: String, f2: V => String) = {
      T.traverse(caseKeys) { i => f1(cases(i)).map(v => s"MILL_TEST_${s}_$i" -> f2(v)) }
    }
    def forkEnv = Task {
      Map("MILL_TEST_LOGS" -> testLogFolder().toString) ++
        caseEnvs(_.compile)("CLASSES", _.classes.path.toString)() ++
        caseEnvs(_.compileClasspath)("CLASSPATH", _.map(_.path).mkString(","))() ++
        caseEnvs(_.sources)("SOURCES", _.head.path.toString)()
    }

    object cases extends Cross[CaseModule](caseKeys)
    trait CaseModule extends ScalaModule with Cross.Module[String] {
      def caseName = crossValue
      object external extends ScalaModule {
        def scalaVersion = build.Deps.scalaVersion
      }

      def moduleDeps = Seq(external)

      val Array(prefix, suffix, rest) = caseName.split("-", 3)
      def millSourcePath = super.millSourcePath / prefix / suffix / rest
      def scalaVersion = build.Deps.scalaVersion
      def ivyDeps = Task {
        if (!caseName.contains("realistic") && !caseName.contains("sourcecode")) super.ivyDeps()
        else Agg(
          build.Deps.fastparse,
          build.Deps.scalatags,
          build.Deps.cask,
          build.Deps.castor,
          build.Deps.mainargs,
          build.Deps.requests,
          build.Deps.osLib,
          build.Deps.upickle,
          build.Deps.sourcecode
        )
      }
    }
  }
}
