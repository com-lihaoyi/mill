package build

import mill._
import mill.javalib._
import mill.javalib.publish._

object Deps {

  val `javax.servlet.jsp:jsp-api` = ivy"javax.servlet.jsp:jsp-api:2.2"
  val `javax.servlet:servlet-api` = ivy"javax.servlet:servlet-api:2.5"
  val `junit:junit-dep` = ivy"junit:junit-dep:4.10"
  val `org.hamcrest:hamcrest-core` = ivy"org.hamcrest:hamcrest-core:1.2.1"
  val `org.hamcrest:hamcrest-library` = ivy"org.hamcrest:hamcrest-library:1.2.1"
  val `org.mockito:mockito-core` = ivy"org.mockito:mockito-core:1.8.5"
}

object `package` extends RootModule with MyModule {

  def artifactName = "parent"

  def pomPackagingType = PackagingType.Pom

  object `multi-module` extends MyModule {

    def artifactName = "multi-module-parent"

    def javacOptions = super.javacOptions() ++
      Seq("-source", "1.6", "-target", "1.6")

    def pomPackagingType = PackagingType.Pom

    def publishProperties = super.publishProperties() ++ Map(
      ("project.build.sourceEncoding", "utf-8"),
      ("project.reporting.outputEncoding", "utf-8")
    )

    object server extends MyModule {

      def javacOptions = super.javacOptions() ++
        Seq("-source", "1.6", "-target", "1.6")

      def pomParentProject = Some(Artifact(
        "com.example.maven-samples",
        "multi-module-parent",
        "1.0-SNAPSHOT"
      ))

      def publishProperties = super.publishProperties() ++ Map(
        ("project.build.sourceEncoding", "utf-8"),
        ("project.reporting.outputEncoding", "utf-8")
      )

      object tests extends MavenTests with TestModule.Junit4 {

        def ivyDeps = super.ivyDeps() ++ Agg(
          Deps.`junit:junit-dep`,
          Deps.`org.hamcrest:hamcrest-core`,
          Deps.`org.hamcrest:hamcrest-library`,
          Deps.`org.mockito:mockito-core`
        )

      }
    }

    object webapp extends MyModule {

      def javacOptions = super.javacOptions() ++
        Seq("-source", "1.6", "-target", "1.6")

      def moduleDeps = super.moduleDeps ++ Seq(build.`multi-module`.server)

      def compileIvyDeps = super.compileIvyDeps() ++
        Agg(Deps.`javax.servlet.jsp:jsp-api`, Deps.`javax.servlet:servlet-api`)

      def pomPackagingType = "war"

      def pomParentProject = Some(Artifact(
        "com.example.maven-samples",
        "multi-module-parent",
        "1.0-SNAPSHOT"
      ))

      def publishProperties = super.publishProperties() ++ Map(
        ("project.build.sourceEncoding", "utf-8"),
        ("project.reporting.outputEncoding", "utf-8")
      )

    }
  }

  object `single-module` extends MyModule {

    def artifactName = "single-module-project"

    def javacOptions = super.javacOptions() ++
      Seq("-source", "1.6", "-target", "1.6")

    def ivyDeps = super.ivyDeps() ++
      Agg(Deps.`javax.servlet.jsp:jsp-api`, Deps.`javax.servlet:servlet-api`)

    def publishProperties = super.publishProperties() ++ Map(
      ("project.build.sourceEncoding", "utf-8"),
      ("project.reporting.outputEncoding", "utf-8")
    )

    object tests extends MavenTests with TestModule.Junit4 {

      def ivyDeps = super.ivyDeps() ++ Agg(
        Deps.`junit:junit-dep`,
        Deps.`org.hamcrest:hamcrest-core`,
        Deps.`org.hamcrest:hamcrest-library`,
        Deps.`org.mockito:mockito-core`
      )

    }
  }
}

trait MyModule extends PublishModule with MavenModule {

  def pomSettings = PomSettings(
    "Just a pom that makes it easy to build both projects at the same time.",
    "com.example.maven-samples",
    "",
    Seq(),
    VersionControl(None, None, None, None),
    Seq()
  )

  def publishVersion = "1.0-SNAPSHOT"

  def zincWorker = mill.define.ModuleRef(MyModuleZincWorker)

  object MyModuleZincWorker extends ZincWorkerModule {
    def jvmId = "11"
  }
}
