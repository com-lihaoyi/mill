package build.main.init

import mill._
import scala.util.matching.Regex

object `package` extends RootModule with build.MillPublishScalaModule {

  def moduleDeps = Seq(build.main, build.main.init.buildgen, build.scalalib)

  override def resources = Task {
    super.resources() ++ Seq(exampleList())
  }

  def exampleList: T[PathRef] = Task {
    val data: Seq[(os.SubPath, String)] =
      build.dist.examplePathsWithArtifactName().map { case (path, str) =>
        val downloadUrl = s"${build.millDownloadUrl()}/$str.zip"
        val subPath = path.subRelativeTo(Task.workspace / "example")
        (subPath, downloadUrl)
      }

    val libsSortOrder = List(
      "scalalib",
      "javalib",
      "kotlinlib",
      "extending",
      "external",
      "thirdparty",
      "depth"
    )

    val categoriesSortOrder = List("basic", "builds", "web")

    def sortCriterium(strOpt: Option[String], sortOrderList: List[String]): Int =
      strOpt
        .flatMap { str =>
          val idx = sortOrderList.indexOf(str)
          Option.when(idx >= 0)(idx)
        }
        .getOrElse(Int.MaxValue)

    val sortedData = data.sortBy { case (p1, _) =>
      val segmentsReversed = p1.segments.reverse.lift
      val libOpt = segmentsReversed(2)
      val categoryOpt = segmentsReversed(1)
      val nameOpt = segmentsReversed(0)

      val libSortCriterium = sortCriterium(libOpt, libsSortOrder)
      val categorySortCriterium = sortCriterium(categoryOpt, categoriesSortOrder)
      val nameSortCriterium = nameOpt
        .flatMap(_.takeWhile(_.isDigit).toIntOption)
        .getOrElse(Int.MinValue)

      (libSortCriterium, libOpt, categorySortCriterium, categoryOpt, nameSortCriterium, nameOpt)
    }

    os.write(
      Task.dest / "exampleList.txt",
      upickle.default.write(sortedData.map { case (p, s) => (p.toString(), s) })
    )

    PathRef(Task.dest)
  }

  object buildgen extends build.MillPublishScalaModule {
    def moduleDeps = Seq(build.runner)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib)
  }
  object gradle extends build.MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def ivyDeps = Agg(
      build.Deps.gradleApi,
      build.Deps.logback
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib, buildgen.test)
  }
  object maven extends build.MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def ivyDeps = Agg(
      build.Deps.mavenEmbedder,
      build.Deps.mavenResolverConnectorBasic,
      build.Deps.mavenResolverSupplier,
      build.Deps.mavenResolverTransportFile,
      build.Deps.mavenResolverTransportHttp,
      build.Deps.mavenResolverTransportWagon
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.scalalib, buildgen.test)
  }
}
