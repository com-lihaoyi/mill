package build.main
// imports
import mill._
import mill.scalalib._
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross
import mill.scalalib.api.ZincWorkerUtil

/**
 * This package contains the helpers necessary to define the `build.*` builtin helpers,
 * e.g. `inspect`/`init`/`visualize`, along with helpers in [[build.util]] that are
 * intended for use in downstream user-land code, but without the various language-specific
 * packages which are defined separately in [[build.scalalib]], [[build.pythonlib]], etc.
 */
object `package` extends RootModule with build.MillStableScalaModule with BuildInfo {

  def moduleDeps = Seq(build.core, build.core.client, util)
  def ivyDeps = Agg(
    build.Deps.windowsAnsi,
    build.Deps.coursierInterface,
    build.Deps.mainargs,
    build.Deps.requests,
    build.Deps.logback,
    build.Deps.jgraphtCore,
    ivy"guru.nidi:graphviz-java-min-deps:0.18.1"
  )

  def compileIvyDeps = Task {
    if (ZincWorkerUtil.isScala3(scalaVersion())) Agg.empty
    else Agg(build.Deps.scalaReflect(scalaVersion()))
  }

  def buildInfoPackageName = "mill.main"

  def buildInfoMembers = Seq(
    BuildInfo.Value("scalaVersion", scalaVersion(), "Scala version used to compile mill core."),
    BuildInfo.Value(
      "workerScalaVersion213",
      build.Deps.scala2Version,
      "Scala 2.13 version used by some workers."
    ),
    BuildInfo.Value(
      "workerScalaVersion212",
      build.Deps.workerScalaVersion212,
      "Scala 2.12 version used by some workers."
    ),
    BuildInfo.Value("millVersion", build.millVersion(), "Mill version."),
    BuildInfo.Value("millBinPlatform", build.millBinPlatform(), "Mill binary platform version."),
    BuildInfo.Value(
      "millEmbeddedDeps",
      (
        Task.traverse(
          build.dist.recursiveModuleDeps.collect { case m: PublishModule => m }
        )(
          _.publishSelfDependency
        )()
          .map(artifact => s"${artifact.group}:${artifact.id}:${artifact.version}") ++
          Lib.resolveDependenciesMetadataSafe(
            repositories = build.dist.repositoriesTask(),
            Seq(BoundDep(build.dist.coursierDependency, force = false)),
            Some(build.dist.mapDependencies()),
            build.dist.resolutionCustomizer(),
            Some(Task.ctx()),
            build.dist.coursierCacheCustomizer()
          ).getOrThrow.minDependencies.toSeq
            // change to this when bumping Mill
            //   ).getOrThrow.minDependencies.toSeq
            .map(d => s"${d.module.organization.value}:${d.module.name.value}:${d.version}")
      )
        //      Task.traverse(dev.moduleDeps)(_.publishSelfDependency)()
        //        .map(artifact => s"${artifact.group}:${artifact.id}:${artifact.version}")
        .mkString(","),
      "Dependency artifacts embedded in mill assembly by default."
    ),
    BuildInfo.Value(
      "millScalacPluginDeps",
      build.Deps.millModuledefsString,
      "Scalac compiler plugin dependencies to compile the build script."
    )
  )

  object util extends build.MillStableScalaModule {
    def moduleDeps = Seq(build.core.api, build.core.client)
    def ivyDeps = Agg(
      build.Deps.coursier,
      build.Deps.coursierJvm,
      build.Deps.jline
    )
  }

  object graphviz extends build.MillPublishScalaModule {
    def moduleDeps = Seq(build.main, build.scalalib)
    def ivyDeps = Agg(build.Deps.jgraphtCore) ++ build.Deps.graphvizJava ++ build.Deps.javet
  }

  def testModuleDeps = super.testModuleDeps ++ Seq(build.testkit)
}
