package build.scalajslib

// imports
import scala.util.chaining._
import com.github.lolgab.mill.mima.Mima
import coursier.maven.MavenRepository
import de.tobiasroeser.mill.vcs.version.VcsVersion
import com.goyeau.mill.scalafix.ScalafixModule
import build.example.millSourcePath
import mill._
import mill.api.JarManifest
import mill.define.NamedTask
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.api.ZincWorkerUtil
import mill.scalalib.publish._
import mill.util.Jvm
import mill.resolve.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross

// plugins and dependencies
import $meta._
import $file.ci.shared
import $file.ci.upload

object `package` extends RootModule with build.MillStableScalaModule with BuildInfo {
  def moduleDeps = Seq(build.scalalib, `worker-api`)
  def testTransitiveDeps = super.testTransitiveDeps() ++ Seq(worker("1").testDep())
  def buildInfoPackageName = "mill.scalajslib"
  def buildInfoObjectName = "ScalaJSBuildInfo"

  def buildInfoMembers = T {
    val resolve = resolveCoursierDependency()

    def formatDep(dep: Dep) = {
      val d = resolve(dep)
      s"${d.module.organization.value}:${d.module.name.value}:${d.version}"
    }

    Seq(
      BuildInfo.Value("scalajsEnvNodejs", formatDep(build.Deps.Scalajs_1.scalajsEnvNodejs)),
      BuildInfo.Value("scalajsEnvJsdomNodejs", formatDep(build.Deps.Scalajs_1.scalajsEnvJsdomNodejs)),
      BuildInfo.Value(
        "scalajsEnvExoegoJsdomNodejs",
        formatDep(build.Deps.Scalajs_1.scalajsEnvExoegoJsdomNodejs)
      ),
      BuildInfo.Value("scalajsEnvPhantomJs", formatDep(build.Deps.Scalajs_1.scalajsEnvPhantomjs)),
      BuildInfo.Value("scalajsEnvSelenium", formatDep(build.Deps.Scalajs_1.scalajsEnvSelenium)),
      BuildInfo.Value("scalajsImportMap", formatDep(build.Deps.Scalajs_1.scalajsImportMap))
    )
  }

  object `worker-api` extends build.MillPublishScalaModule {
    def ivyDeps = Agg(build.Deps.sbtTestInterface)
  }

  object worker extends Cross[WorkerModule]("1")
  trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
    def scalajsWorkerVersion = crossValue
    def millSourcePath: os.Path = super.millSourcePath / scalajsWorkerVersion
    def testDepPaths = T { Seq(compile().classes) }
    def moduleDeps = Seq(build.scalajslib.`worker-api`, build.main.client, build.main.api)
    def ivyDeps = Agg(
      build.Deps.Scalajs_1.scalajsLinker,
      build.Deps.Scalajs_1.scalajsSbtTestAdapter,
      build.Deps.Scalajs_1.scalajsEnvNodejs,
      build.Deps.Scalajs_1.scalajsEnvJsdomNodejs,
      build.Deps.Scalajs_1.scalajsEnvExoegoJsdomNodejs,
      build.Deps.Scalajs_1.scalajsEnvPhantomjs,
      build.Deps.Scalajs_1.scalajsEnvSelenium,
      build.Deps.Scalajs_1.scalajsImportMap
    )
  }
}
