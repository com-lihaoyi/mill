package build.scalalib
import scala.util.Properties
import scala.util.chaining._
import coursier.maven.MavenRepository
import mill._
import mill.api.JarManifest
import mill.define.NamedTask
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.api.ZincWorkerUtil
import mill.scalalib.publish._
import mill.util.Jvm
import mill.resolve.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross
import millbuild._

object `package` extends RootModule with MillStableScalaModule {

  def moduleDeps = Seq(build.main, build.scalalib.api, build.testrunner)
  def ivyDeps = {
    Agg(Deps.scalafmtDynamic, Deps.scalaXml) ++ {
      // despite compiling with Scala 3, we need to include scala-reflect
      // for the scala.reflect.internal.util.ScalaClassLoader
      // used in ScalaModule.scalacHelp,
      // (also transitively included by com.eed3si9n.jarjarabrams:jarjar-abrams-core)
      // perhaps the class can be copied here?
      Agg(Deps.scalaReflect(scalaVersion()))
    }
  }
  def testIvyDeps = super.testIvyDeps() ++ Agg(Deps.TestDeps.scalaCheck)
  def testTransitiveDeps = super.testTransitiveDeps() ++ Seq(worker.testDep())
  def testForkEnv = {
    val locale = if (Properties.isMac) "en_US.UTF-8" else "C.utf8"
    super.testForkEnv() ++ Map("LC_ALL" -> locale)
  }

  object backgroundwrapper extends MillPublishJavaModule with MillJavaModule {
    def ivyDeps = Agg(Deps.sbtTestInterface)
  }

  object api extends MillStableScalaModule with BuildInfo {
    def moduleDeps = Seq(build.core.api)
    def buildInfoPackageName = "mill.scalalib.api"
    def buildInfoObjectName = "Versions"

    def buildInfoMembers = Seq(
      BuildInfo.Value("ammonite", Deps.ammoniteVersion, "Version of Ammonite."),
      BuildInfo.Value("zinc", Deps.zinc.version, "Version of Zinc"),
      BuildInfo.Value(
        "scalafmtVersion",
        Deps.scalafmtDynamic.version,
        "Version of Scalafmt"
      ),
      BuildInfo.Value(
        "semanticDBVersion",
        Deps.semanticDBscala.version,
        "SemanticDB version."
      ),
      BuildInfo.Value(
        "semanticDbJavaVersion",
        Deps.semanticDbJava.version,
        "Java SemanticDB plugin version."
      ),
      BuildInfo.Value(
        "millModuledefsVersion",
        Deps.millModuledefsVersion,
        "Mill ModuleDefs plugins version."
      ),
      BuildInfo.Value("millCompilerBridgeScalaVersions", build.bridgeScalaVersions.mkString(",")),
      BuildInfo.Value("millCompilerBridgeVersion", build.bridgeVersion),
      BuildInfo.Value("millVersion", build.millVersion(), "Mill version."),
      BuildInfo.Value(
        "sbtTestInterface",
        Dep.unparse(Deps.RuntimeDeps.sbtTestInterface).get,
        "Dependency sbt-test-interface"
      ),
      BuildInfo.Value(
        "jupiterInterface",
        Dep.unparse(Deps.RuntimeDeps.jupiterInterface).get,
        "Dependency to jupiter-interface"
      ),
      BuildInfo.Value("errorProneVersion", Deps.RuntimeDeps.errorProneCore.version),
      BuildInfo.Value("coursierJvmIndexVersion", Deps.coursierJvmIndexVersion),
      BuildInfo.Value("palantirFormatVersion", Deps.RuntimeDeps.palantirFormat.version),
      BuildInfo.Value(
        "revApiVersion",
        Deps.RuntimeDeps.revApi.version,
        "Version of revApi"
      )
    )
  }

  object worker extends MillPublishScalaModule with BuildInfo {
    def moduleDeps = Seq(api, build.main.util)
    def ivyDeps = Agg(Deps.zinc, Deps.log4j2Core, Deps.scalap(scalapVersion()))
    def buildInfoPackageName = "mill.scalalib.worker"
    def buildInfoObjectName = "Versions"
    def buildInfoMembers = Seq(
      BuildInfo.Value("zinc", Deps.zinc.version, "Version of Zinc.")
    )
  }
}
