package build.runner
// imports
import mill._
import mill.contrib.buildinfo.BuildInfo
import millbuild._

/**
 * Logic around the Mill command-line runner, script loading,
 * process management, and build bootstrapping process.
 *
 * Mostly tested by [[build.integration]] and [[build.example]] tests.
 */
object `package` extends RootModule with MillPublishScalaModule with BuildInfo {
  object `worker-api` extends MillPublishScalaModule {
    // def ivyDeps = Agg(Deps.osLib)
  }

  object worker extends MillPublishScalaModule {
    def moduleDeps = Seq(`worker-api`)
    def ivyDeps = Agg(Deps.scalaCompiler(scalaVersion()))

    private[runner] def bootstrapDeps = Task {
      val moduleDep = {
        val m = artifactMetadata()
        s"${m.group}:${m.id}:${m.version}"
      }
      val boundIvys = allIvyDeps()
      val nameFilter = "scala(.*)-compiler(.*)".r
      Agg(moduleDep) ++ boundIvys.collect {
        case dep if nameFilter.matches(dep.name) =>
          s"${dep.organization}:${dep.name}:${dep.version}"
      }
    }

    def reportDeps() = Task.Command {
      bootstrapDeps().foreach(d => T.log.info(s"ivy dep: $d"))
    }
  }

  object client extends MillPublishScalaModule with BuildInfo {
    // Disable scalafix because it seems to misbehave and cause
    // spurious errors when there are mixed Java/Scala sources
    def fix(args: String*): Command[Unit] = Task.Command {}
    def buildInfoPackageName = "mill.runner.client"
    def moduleDeps = Seq(build.runner.server.client)
    def ivyDeps = Agg(
      Deps.windowsAnsi,
      Deps.coursier,
      Deps.coursierJvm,
      Deps.logback
    )
    def buildInfoObjectName = "Versions"
    def buildInfoMembers = Seq(
      BuildInfo.Value("coursierJvmIndexVersion", Deps.coursierJvmIndexVersion)
    )
  }

  def moduleDeps = Seq(
    build.scalalib,
    build.kotlinlib,
    build.scalajslib,
    build.scalanativelib,
    build.javascriptlib,
    build.pythonlib,
    build.bsp,
    build.core.codesig,
    build.runner.server,
    client,
    `worker-api`
  )

  def buildInfoPackageName = "mill.runner.worker"

  def buildInfoMembers = Seq(
    BuildInfo.Value(
      "bootstrapDeps",
      worker.bootstrapDeps().mkString(";"),
      "Depedendencies used to bootstrap the scala compiler worker."
    )
  )
}
