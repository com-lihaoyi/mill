package build.libs.androidlib

import coursier.MavenRepository
import mill.*
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib.*
import millbuild.*

// TODO when android hardcoded versions are fixed, generate a build info
// TODO change MillPublishScalaModule to MillStableScalaModule after mill version when androidlib is stable and released.
object `package` extends MillPublishScalaModule with BuildInfo {

  def moduleDeps = Seq(build.libs.scalalib, build.libs.kotlinlib)
  def transitiveLocalTestOverrides =
    super.transitiveLocalTestOverrides() ++ Seq(
      build.libs.kotlinlib.worker.localTestOverride()
    )

  def buildInfoPackageName = "mill.androidlib"
  def buildInfoObjectName = "Versions"
  // Add versions?
  def buildInfoMembers = Seq(
    BuildInfo.Value("manifestMergerVersion",Deps.AndroidDeps.manifestMergerVersion, "Version of manifestMerger"),
    BuildInfo.Value("bundleToolVersion",Deps.AndroidDeps.bundleToolVersion, "Version of bundleTool"),
    BuildInfo.Value("ndkVersion",Deps.AndroidDeps.ndkVersion, "Version of ndk"),
    BuildInfo.Value("cmakeVersion",Deps.AndroidDeps.cmakeVersion, "Version of cmake"),

  )

  trait MillAndroidModule extends MillPublishScalaModule {
    override def javacOptions = {
      val release = Seq("-source", "1.8", "-target", "1.8")
      release ++ Seq("-encoding", "UTF-8", "-deprecation")
    }

    override def repositoriesTask = Task.Anon {
      super.repositoriesTask() :+ MavenRepository("https://maven.google.com/")
    }
  }

  object hilt extends MillAndroidModule {
    override def moduleDeps = Seq(build.libs.androidlib)

    override def mvnDeps = Seq(
      Deps.hiltGradlePlugin,
      Deps.androidTools
    )
  }

}
