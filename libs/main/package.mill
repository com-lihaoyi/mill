package build.libs.main

// imports
import mill._
import mill.scalalib._
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross
import mill.scalalib.api.JvmWorkerUtil

/**
 * This package encapsulates the entire classpath that is available within the `build.mill`
 * file, for use by build authors or plugin authors. All the various language `*lib` modules,
 * the available `core.*` modules, and builtin tasks defined on the top-level `build` object.
 */
object `package` extends RootModule with build.MillStableScalaModule {

  def moduleDeps = Seq(
    build.core.util,
    build.core.define,
    build.libs.init
  )
  def mvnDeps = Agg(
    build.Deps.nativeTerminal,
    build.Deps.coursierInterface,
    build.Deps.logback,
    build.Deps.jgraphtCore,
    build.Deps.millModuledefs,
    mvn"guru.nidi:graphviz-java-min-deps:0.18.1"
      // We only need the in-memory library for some stuff, and don't
      // need the heavyweight v8 binary that comes bundled with it
      .exclude(
        "guru.nidi.com.eclipsesource.j2v8" -> "j2v8_macosx_x86_64",
        "guru.nidi.com.eclipsesource.j2v8" -> "j2v8_linux_x86_64"
      )
  )

  def compileMvnDeps = Task {
    if (JvmWorkerUtil.isScala3(scalaVersion())) Agg.empty
    else Agg(build.Deps.scalaReflect(scalaVersion()))
  }

  private def dist = build.dist.dist0

  def testModuleDeps = super.testModuleDeps ++ Seq(build.testkit)
}
