package build.libs.init.migrate

import mill.api.{Cross, PathRef, Task}
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib.Assembly.Rule
import mill.scalalib.ScalaModule
import millbuild.*

object `package` extends MillPublishScalaModule { migrate =>

  def moduleDeps = Seq(api(Deps.scalaVersion), build.core.internal, build.libs.util)

  object api extends Cross[ApiModule](Deps.sbtScalaVersion212, Deps.scalaVersion)
  trait ApiModule extends MillPublishCrossScalaModule {
    def mvnDeps = Seq(Deps.upickle)
  }

  object sbt extends MillPublishScalaModule with BuildInfo {
    def moduleDeps = Seq(api(Deps.scalaVersion), migrate)
    def sbtScriptJarResource = Task {
      os.copy(exportscript.assembly().path, Task.dest / "exportscript-assembly.jar")
      PathRef(Task.dest)
    }
    def resources = Task { super.resources() ++ Seq(sbtScriptJarResource()) }
    def buildInfoPackageName = "mill.init.migrate.sbt"
    def buildInfoMembers = Seq(
      BuildInfo.Value("exportscriptAssemblyResource", "/exportscript-assembly.jar")
    )

    object api extends Cross[ApiModule](Deps.sbtScalaVersion212, Deps.scalaVersion)
    trait ApiModule extends MillPublishCrossScalaModule {
      def moduleDeps = Seq(migrate.api())
    }

    object exportscript extends ScalaModule {
      def scalaVersion = Deps.sbtScalaVersion212
      def mvnDeps = Seq(Deps.osLib)
      def moduleDeps = Seq(api(Deps.sbtScalaVersion212))
      def compileMvnDeps = Seq(Deps.sbt)
      def assemblyRules = Seq(Rule.ExcludePattern("scala\\.*"))
    }
  }
}
