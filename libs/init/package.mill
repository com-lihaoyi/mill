package build.libs.init

import mill._
import mill.api.{BuildCtx, Cross}
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib.Assembly.Rule
import mill.scalalib.ScalaModule
import mill.util.Jvm
import millbuild.*

object `package` extends MillPublishScalaModule {

  def moduleDeps = Seq(build.libs.scalalib)

  override def resources = Task {
    super.resources() ++ Seq(exampleList())
  }

  def exampleList: T[PathRef] = Task {
    val data: Seq[(os.SubPath, String)] =
      build.dist.examplePaths().zip(build.dist.exampleArtifactNames()).map { case (path, str) =>
        val downloadUrl =
          s"${build.millDownloadUrlCurrent()}/$str.zip"
        val subPath = path.subRelativeTo(BuildCtx.workspaceRoot / "example")
        (subPath, downloadUrl)
      }

    val libsSortOrder = List(
      "scalalib",
      "javalib",
      "kotlinlib",
      "extending",
      "external",
      "thirdparty",
      "depth"
    )

    val categoriesSortOrder = List("basic", "builds", "web")

    def sortCriterium(strOpt: Option[String], sortOrderList: List[String]): Int =
      strOpt
        .flatMap { str =>
          val idx = sortOrderList.indexOf(str)
          Option.when(idx >= 0)(idx)
        }
        .getOrElse(Int.MaxValue)

    val sortedData = data.sortBy { case (p1, _) =>
      val segmentsReversed = p1.segments.reverse.lift
      val libOpt = segmentsReversed(2)
      val categoryOpt = segmentsReversed(1)
      val nameOpt = segmentsReversed(0)

      val libSortCriterium = sortCriterium(libOpt, libsSortOrder)
      val categorySortCriterium = sortCriterium(categoryOpt, categoriesSortOrder)
      val nameSortCriterium = nameOpt
        .flatMap(_.takeWhile(_.isDigit).toIntOption)
        .getOrElse(Int.MinValue)

      (libSortCriterium, libOpt, categorySortCriterium, categoryOpt, nameSortCriterium, nameOpt)
    }

    os.write(
      Task.dest / "exampleList.txt",
      upickle.default.write(sortedData.map { case (p, s) => (p.toString(), s) })
    )

    PathRef(Task.dest)
  }

  object buildgen extends MillPublishScalaModule {
    def moduleDeps =
      Seq(api(Deps.scalaVersion), build.libs.init, build.core.internal, build.libs.util)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)

    object api extends Cross[ApiModule](Deps.sbtScalaVersion212, Deps.scalaVersion)
    trait ApiModule extends MillPublishCrossScalaModule {
      def mvnDeps = Seq(Deps.upickle)
    }
  }
  object gradle extends MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def mvnDeps = Seq(
      Deps.gradleApi,
      Deps.logback
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)
  }
  object maven extends MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    override def mvnDeps = Seq(
      Deps.MavenInit.mavenEmbedder,
      Deps.MavenInit.mavenResolverConnectorBasic,
      Deps.MavenInit.mavenResolverSupplier,
      Deps.MavenInit.mavenResolverTransportFile,
      Deps.MavenInit.mavenResolverTransportHttp,
      Deps.MavenInit.mavenResolverTransportWagon
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)
  }

  object sbt extends MillPublishScalaModule with BuildInfo {
    def moduleDeps = Seq(buildgen.api(Deps.scalaVersion), buildgen)
    def sbtScriptJarResource = Task {
      os.copy(exportscript.assembly().path, Task.dest / "exportscript-assembly.jar")
      PathRef(Task.dest)
    }
    def resources = Task { super.resources() ++ Seq(sbtScriptJarResource()) }
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)
    def buildInfoPackageName = "mill.main.sbt"
    def buildInfoMembers = Seq(
      BuildInfo.Value("exportscriptAssemblyResource", "/exportscript-assembly.jar")
    )

    object exportscript extends ScalaModule {
      def scalaVersion = Deps.sbtScalaVersion212
      def mvnDeps = Seq(Deps.osLib)
      def moduleDeps = Seq(buildgen.api(Deps.sbtScalaVersion212))
      def compileMvnDeps = Seq(Deps.sbt)
      def assemblyRules = Seq(Rule.ExcludePattern("scala\\.*"))
    }
  }
}
