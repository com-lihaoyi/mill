package build.libs.init

import mill._
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib.Assembly.Rule
import mill.scalalib.ScalaModule
import mill.util.Jvm
import millbuild.*

object `package` extends MillPublishScalaModule {

  def moduleDeps = Seq(build.libs.scalalib)

  override def resources = Task {
    super.resources() ++ Seq(exampleList())
  }

  def exampleList: T[PathRef] = Task {
    val data: Seq[(os.SubPath, String)] =
      build.dist.examplePathsWithArtifactName().map { case (pathRef, str) =>
        val downloadUrl =
          s"${build.millDownloadUrl()}/${build.dist.artifactFileNamePrefix()}-$str.zip"
        val subPath = pathRef.path.subRelativeTo(Task.workspace / "example")
        (subPath, downloadUrl)
      }

    val libsSortOrder = List(
      "scalalib",
      "javalib",
      "kotlinlib",
      "extending",
      "external",
      "thirdparty",
      "depth"
    )

    val categoriesSortOrder = List("basic", "builds", "web")

    def sortCriterium(strOpt: Option[String], sortOrderList: List[String]): Int =
      strOpt
        .flatMap { str =>
          val idx = sortOrderList.indexOf(str)
          Option.when(idx >= 0)(idx)
        }
        .getOrElse(Int.MaxValue)

    val sortedData = data.sortBy { case (p1, _) =>
      val segmentsReversed = p1.segments.reverse.lift
      val libOpt = segmentsReversed(2)
      val categoryOpt = segmentsReversed(1)
      val nameOpt = segmentsReversed(0)

      val libSortCriterium = sortCriterium(libOpt, libsSortOrder)
      val categorySortCriterium = sortCriterium(categoryOpt, categoriesSortOrder)
      val nameSortCriterium = nameOpt
        .flatMap(_.takeWhile(_.isDigit).toIntOption)
        .getOrElse(Int.MinValue)

      (libSortCriterium, libOpt, categorySortCriterium, categoryOpt, nameSortCriterium, nameOpt)
    }

    os.write(
      Task.dest / "exampleList.txt",
      upickle.default.write(sortedData.map { case (p, s) => (p.toString(), s) })
    )

    PathRef(Task.dest)
  }

  object buildgen extends MillPublishScalaModule {
    def moduleDeps = Seq(build.libs.init, build.core.internal, build.core.util)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)

    // I tried moving `Tree` into this module, but it doesn't compile with Scala 2.12.20.
    /*
    object tree extends Cross[TreeModule](Deps.sbtScalaVersion212, Deps.scalaVersion)
    trait TreeModule extends MillPublishCrossScalaModule {
      def mvnDeps = Seq(Deps.upickle)
    }
     */
  }
  object gradle extends MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def mvnDeps = Seq(
      Deps.gradleApi,
      Deps.logback
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)
  }
  object maven extends MillPublishScalaModule {
    def moduleDeps = Seq(buildgen)
    def mvnDeps = Seq(
      Deps.mavenEmbedder,
      Deps.mavenResolverConnectorBasic,
      Deps.mavenResolverSupplier,
      Deps.mavenResolverTransportFile,
      Deps.mavenResolverTransportHttp,
      Deps.mavenResolverTransportWagon
    )
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)
  }

  object sbt extends MillPublishScalaModule with BuildInfo {
    def moduleDeps = Seq(buildgen, models(Deps.scalaVersion))

    def sbtPluginJarResources = Task {
      val assemblyPathRef = exportplugin.assembly()
      os.copy(assemblyPathRef.path, Task.dest / "exportplugin-assembly.jar")
      PathRef(Task.dest)
    }
    def resources: T[Seq[PathRef]] = Task { super.resources() ++ Seq(sbtPluginJarResources()) }
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib, buildgen.test)

    def buildInfoPackageName = "mill.main.sbt"
    def buildInfoObjectName: String = "Versions"
    def buildInfoMembers = Seq(
      BuildInfo.Value("sbtVersion", Deps.sbt.version, "Version of sbt.")
    )

    // An `sbt` plugin is built with Scala 2.12. See https://www.scala-sbt.org/1.x/docs/Plugins.html#Creating+an+auto+plugin.
    object models
        extends Cross[ModelsModule](Deps.sbtScalaVersion212, Deps.scalaVersion)
    trait ModelsModule extends MillPublishCrossScalaModule {
      // def moduleDeps = Seq(buildgen.tree())
      def mvnDeps = Seq(Deps.upickle)
      def compileMvnDeps = Seq(Deps.sbt) // for definition references only

      def docJar =
        if (crossScalaVersion == Deps.scalaVersion)
          // Without this, docJar currently outputs more than 50k lines of warning. Disabling it.
          Task {
            PathRef(Jvm.createJar(Task.dest / "empty.jar", Seq.empty[os.Path]))
          }
        else
          super.docJar
    }

    // no need to publish this
    // `test` fails with `MillScalaModule`, and since it's an `sbt` plugin project it's most likely not needed.
    object exportplugin extends ScalaModule {
      private val scalaVersionString = Deps.sbtScalaVersion212
      def scalaVersion = scalaVersionString
      def moduleDeps = Seq(models(scalaVersionString))
      def compileMvnDeps = Seq(Deps.sbt)
      def assemblyRules = Seq(Rule.ExcludePattern("scala\\.*"))
    }
  }
}
