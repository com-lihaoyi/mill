package build.libs.kotlinlib

// imports
import mill.*
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib.*
import millbuild.*

// TODO change MillPublishScalaModule to MillStableScalaModule after mill version with kotlinlib is released,
//  because currently there is no previous artifact version
object `package` extends MillStableScalaModule with BuildInfo {

  def moduleDeps = Seq(build.libs.javalib, build.libs.javalib.testrunner, api, `ksp2-api`)
  def localTestExtraModules =
    super.localTestExtraModules ++ Seq(worker)

  def buildInfoPackageName = "mill.kotlinlib"
  def buildInfoObjectName = "Versions"
  def buildInfoMembers = Seq(
    BuildInfo.Value("kotlinVersion", Deps.kotlinVersion, "Version of Kotlin"),
    BuildInfo.Value("koverVersion", Deps.RuntimeDeps.koverVersion, "Version of Kover."),
    BuildInfo.Value("ktfmtVersion", Deps.RuntimeDeps.ktfmt.version, "Version of Ktfmt."),
    BuildInfo.Value("ktlintVersion", Deps.RuntimeDeps.ktlint.version, "Version of ktlint."),
    BuildInfo.Value(
      "detektVersion",
      Deps.RuntimeDeps.detektCli.version,
      "Version of Detekt."
    ),
    BuildInfo.Value("dokkaVersion", Deps.RuntimeDeps.dokkaVersion, "Version of Dokka."),
    BuildInfo.Value(
      "kotlinxHtmlJvmDep",
      Dep.unparse(Deps.RuntimeDeps.kotlinxHtmlJvm).get,
      "kotlinx-html-jvm dependency (used for Dokka)"
    ),
    BuildInfo.Value(
      "freemarkerDep",
      Dep.unparse(Deps.RuntimeDeps.freemarker).get,
      "freemarker dependency (used for Dokka)"
    )
  )

  trait MillKotlinModule extends MillPublishScalaModule

  // shared between kotlinlib and kotlinlib.worker
  object api extends MillKotlinModule {
    def moduleDeps = Seq(build.libs.javalib.testrunner)

    override def compileMvnDeps: T[Seq[Dep]] = Seq(
      Deps.osLib
    )
  }

  object worker extends MillKotlinModule {
    override def compileModuleDeps = Seq(api)

    def mandatoryMvnDeps = Seq.empty[Dep]

    override def compileMvnDeps: T[Seq[Dep]] =
      super.mandatoryMvnDeps() ++ Seq(
        Deps.osLib,
        Deps.kotlinCompiler,
        Deps.kotlinBuildToolsApi
      )
  }

  object `ksp2-api` extends MillKotlinModule

  object ksp2 extends MillKotlinModule {
    def moduleDeps = Seq(`ksp2-api`)
    override def compileMvnDeps: T[Seq[Dep]] = super.compileMvnDeps() ++ Seq(
      mvn"com.google.devtools.ksp:symbol-processing-common-deps:${Deps.kotlinVersion}-${Deps.kspVersion}",
      mvn"com.google.devtools.ksp:symbol-processing-api:${Deps.kotlinVersion}-${Deps.kspVersion}",
      mvn"com.google.devtools.ksp:symbol-processing-aa:${Deps.kotlinVersion}-${Deps.kspVersion}"
    )
  }

}
