package build.libs.scalalib

import com.github.lolgab.mill.mima.{DirectMissingMethodProblem, ProblemFilter}

import scala.util.Properties
import scala.util.chaining.*
import coursier.maven.MavenRepository
import mill.*
import mill.util.Tasks
import mill.scalalib.*
import mill.scalalib.publish.*
import mill.util.Jvm
import mill.api.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.api.Cross
import millbuild.*

object `package` extends MillStableScalaModule {
  def moduleDeps = Seq(build.libs.javalib)
  def mvnDeps =
    Seq(Deps.scalaXml) ++
      // despite compiling with Scala 3, we need to include scala-reflect
      // for the scala.reflect.internal.util.ScalaClassLoader
      // used in ScalaModule.scalacHelp,
      // (also transitively included by com.eed3si9n.jarjarabrams:jarjar-abrams-core)
      // perhaps the class can be copied here?
      Seq(Deps.scalaReflect(scalaVersion()))

  def compileMvnDeps = Seq(Deps.sonatypeCentralClient)
  def runMvnDeps = Seq(Deps.sonatypeCentralClient)

  def testForkEnv = {
    val locale = if (Properties.isMac) "en_US.UTF-8" else "C.utf8"
    super.testForkEnv() ++ Map("LC_ALL" -> locale)
  }

  override def mimaBinaryIssueFilters: T[Seq[ProblemFilter]] =
    super.mimaBinaryIssueFilters() ++ Seq(
      // This was `private[mill]`, package private doesn't have the JVM bytecode equivalent, so mima can't check it.
      ProblemFilter.exclude[DirectMissingMethodProblem]("mill.scalalib.scalafmt.ScalafmtWorkerModule.resolveRelativeToOut"),
      ProblemFilter.exclude[DirectMissingMethodProblem]("mill.scalalib.scalafmt.ScalafmtWorkerModule.resolveRelativeToOut$default$2"),
      ProblemFilter.exclude[DirectMissingMethodProblem]("mill.scalalib.scalafmt.ScalafmtWorkerModule.compileClasspathTask"),
      ProblemFilter.exclude[DirectMissingMethodProblem]("mill.scalalib.scalafmt.ScalafmtWorkerModule.compileFor"),
      ProblemFilter.exclude[DirectMissingMethodProblem]("mill.scalalib.scalafmt.ScalafmtWorkerModule.transitiveCompileClasspathTask")
    )
}
