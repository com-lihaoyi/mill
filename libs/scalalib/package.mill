package build.libs.scalalib
import scala.util.Properties
import scala.util.chaining._

import coursier.maven.MavenRepository
import mill._
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.api.JvmWorkerUtil
import mill.scalalib.publish._
import mill.util.Jvm
import mill.define.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross
import millbuild.*

object `package` extends MillStableScalaModule {

  def moduleDeps = Seq(build.core.util, build.libs.scalalib.api, build.libs.testrunner)
  def mvnDeps =
    Seq(Deps.scalaXml) ++
      // despite compiling with Scala 3, we need to include scala-reflect
      // for the scala.reflect.internal.util.ScalaClassLoader
      // used in ScalaModule.scalacHelp,
      // (also transitively included by com.eed3si9n.jarjarabrams:jarjar-abrams-core)
      // perhaps the class can be copied here?
      Seq(Deps.scalaReflect(scalaVersion()))

  def compileMvnDeps = Seq(Deps.sonatypeCentralClient)
  def runMvnDeps = Seq(Deps.sonatypeCentralClient)

  def testMvnDeps = super.testMvnDeps() ++ Seq(Deps.TestDeps.scalaCheck)
  def transitiveLocalTestOverrides =
    super.transitiveLocalTestOverrides() ++ Seq(
      worker.localTestOverride(),
      `classgraph-worker`.localTestOverride(),
      `jarjarabrams-worker`.localTestOverride()
    )
  def testForkEnv = {
    val locale = if (Properties.isMac) "en_US.UTF-8" else "C.utf8"
    super.testForkEnv() ++ Map("LC_ALL" -> locale)
  }

  object backgroundwrapper extends MillPublishJavaModule with MillJavaModule {
    def mvnDeps = Seq(Deps.sbtTestInterface)
  }

  object api extends MillStableScalaModule with BuildInfo {
    def moduleDeps = Seq(build.core.define)
    def buildInfoPackageName = "mill.scalalib.api"
    def buildInfoObjectName = "Versions"

    def buildInfoMembers = Seq(
      BuildInfo.Value("ammonite", Deps.ammoniteVersion, "Version of Ammonite."),
      BuildInfo.Value("zinc", Deps.zinc.version, "Version of Zinc"),
      BuildInfo.Value(
        "scalafmtVersion",
        Deps.scalafmtDynamic.version,
        "Version of Scalafmt"
      ),
      BuildInfo.Value(
        "semanticDBVersion",
        Deps.semanticDBscala.version,
        "SemanticDB version."
      ),
      BuildInfo.Value(
        "semanticDbJavaVersion",
        Deps.semanticDbJava.version,
        "Java SemanticDB plugin version."
      ),
      BuildInfo.Value(
        "millModuledefsVersion",
        Deps.millModuledefsVersion,
        "Mill ModuleDefs plugins version."
      ),
      BuildInfo.Value("millCompilerBridgeScalaVersions", build.bridgeScalaVersions.mkString(",")),
      BuildInfo.Value("millCompilerBridgeVersion", build.bridgeVersion),
      BuildInfo.Value("millVersion", build.millVersion(), "Mill version."),
      BuildInfo.Value(
        "sbtTestInterface",
        Dep.unparse(Deps.RuntimeDeps.sbtTestInterface).get,
        "Dependency sbt-test-interface"
      ),
      BuildInfo.Value(
        "jupiterInterface",
        Dep.unparse(Deps.RuntimeDeps.jupiterInterface).get,
        "Dependency to jupiter-interface"
      ),
      BuildInfo.Value("errorProneVersion", Deps.RuntimeDeps.errorProneCore.version),
      BuildInfo.Value("coursierJvmIndexVersion", Deps.coursierJvmIndexVersion),
      BuildInfo.Value("palantirFormatVersion", Deps.RuntimeDeps.palantirFormat.version),
      BuildInfo.Value(
        "revApiVersion",
        Deps.RuntimeDeps.revApi.version,
        "Version of revApi"
      ),
      BuildInfo.Value("springBuildToolsVersion", Deps.springBootTools.version),
      BuildInfo.Value(
        "millSpringBootWorkerDep", {
          val dep = `spring-boot-worker`.artifactMetadata()
          s"${dep.group}:${dep.id}:${dep.version}"
        },
        "The dependency containing the worker implementation to be loaded at runtime."
      )
    )
  }

  object worker extends MillPublishScalaModule with BuildInfo {
    def moduleDeps = Seq(api, build.core.util)
    def mvnDeps = Seq(Deps.zinc, Deps.log4j2Core)
    def buildInfoPackageName = "mill.scalalib.worker"
    def buildInfoObjectName = "Versions"
    def buildInfoMembers = Seq(
      BuildInfo.Value("zinc", Deps.zinc.version, "Version of Zinc.")
    )
  }

  object `classgraph-worker` extends MillPublishScalaModule {
    def moduleDeps = Seq(api, build.core.util)
    def mvnDeps = Seq(Deps.classgraph)
  }

  object `jarjarabrams-worker` extends MillPublishScalaModule {
    def moduleDeps = Seq(api, build.core.util, build.libs.scalalib)
    def mvnDeps = Seq(Deps.jarjarabrams)
  }

  object `spring-boot-worker` extends MillPublishScalaModule {
    def moduleDeps = Seq(api)
    def compileMvnDeps = Seq(
      // we just bind against the API, will be loaded at Mill runtime by the module
      Deps.springBootTools
    )
  }

}
