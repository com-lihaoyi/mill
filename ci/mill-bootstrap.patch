diff --git a/build.mill b/build.mill
index 72a2741ea9..d0e064974f 100644
--- a/build.mill
+++ b/build.mill
@@ -1,9 +1,9 @@
 package build
 // imports
-import com.github.lolgab.mill.mima.Mima
+//import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.define.NamedTask
 import mill.main.Tasks
@@ -264,14 +264,15 @@ object Deps {
 }
 
 def millVersion: T[String] = Task.Input {
-  if (Task.env.contains("MILL_STABLE_VERSION")) VcsVersion.calcVcsState(Task.log).format()
-  else "SNAPSHOT"
+  /*if (Task.env.contains("MILL_STABLE_VERSION")) VcsVersion.calcVcsState(Task.log).format()
+  else */"SNAPSHOT"
 }
 
 def millLastTag: T[String] = Task {
-  VcsVersion.vcsState().lastTag.getOrElse(
-    sys.error("No (last) git tag found. Your git history seems incomplete!")
-  )
+//  VcsVersion.vcsState().lastTag.getOrElse(
+//    sys.error("No (last) git tag found. Your git history seems incomplete!")
+//  )
+  "SNAPSHOT"
 }
 
 def millBinPlatform: T[String] = Task {
@@ -423,7 +424,7 @@ trait MillPublishJavaModule extends MillJavaModule with PublishModule {
 /**
  * Some custom scala settings and test convenience
  */
-trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModule { outer =>
+trait MillScalaModule extends ScalaModule with MillJavaModule /*with ScalafixModule*/ { outer =>
   def scalaVersion = Deps.scalaVersion
   def scalapVersion: T[String] = Deps.scala2Version
   def scalafixScalaBinaryVersion = T {
@@ -521,7 +522,8 @@ trait MillBaseTestsModule extends TestModule {
 trait MillPublishScalaModule extends MillScalaModule with MillPublishJavaModule
 
 /** Publishable module which contains strictly handled API. */
-trait MillStableScalaModule extends MillPublishScalaModule with Mima {
+trait MillStableScalaModule extends MillPublishScalaModule /*with Mima*/ {
+  /*
   import com.github.lolgab.mill.mima._
   override def mimaBinaryIssueFilters: T[Seq[ProblemFilter]] = Seq(
     // (5x) MIMA doesn't properly ignore things which are nested inside other private things
@@ -646,11 +648,11 @@ trait MillStableScalaModule extends MillPublishScalaModule with Mima {
   }
 
   def mimaExcludeAnnotations = Seq("mill.api.internal", "mill.api.experimental")
-  def mimaCheckDirection = CheckDirection.Backward
+//  def mimaCheckDirection = CheckDirection.Backward
   def skipPreviousVersions: T[Seq[String]] = T {
     T.log.info("Skipping mima for previous versions (!!1000s of errors due to Scala 3)")
     mimaPreviousVersions() // T(Seq.empty[String])
-  }
+  }*/
 }
 
 object bridge extends Cross[BridgeModule](compilerBridgeScalaVersions)
diff --git a/contrib/package.mill b/contrib/package.mill
index 3fd6b65999..3e51d630c4 100644
--- a/contrib/package.mill
+++ b/contrib/package.mill
@@ -1,10 +1,7 @@
 package build.contrib
 // imports
 import scala.util.chaining._
-import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.api.JarManifest
 import mill.main.Tasks
diff --git a/dist/package.mill b/dist/package.mill
index ef5fb1145b..a35d92d699 100644
--- a/dist/package.mill
+++ b/dist/package.mill
@@ -2,7 +2,7 @@ package build.dist
 import mill._, scalalib._, publish._
 import mill.util.Jvm
 import mill.api.JarManifest
-import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
 import $file.ci.upload
 
 object `package` extends RootModule with build.MillPublishJavaModule {
@@ -309,39 +309,39 @@ object `package` extends RootModule with build.MillPublishJavaModule {
   }
 
   def uploadToGithub(authKey: String) = Task.Command {
-    val vcsState = VcsVersion.vcsState()
-    val label = vcsState.format()
-    if (label != build.millVersion()) sys.error("Modified mill version detected, aborting upload")
-    val releaseTag = vcsState.lastTag.getOrElse(sys.error(
-      "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
-    ))
-
-    if (releaseTag == label) {
-      // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
-      requests.post(
-        s"https://api.github.com/repos/${build.Settings.githubOrg}/${build.Settings.githubRepo}/releases",
-        data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag, "prerelease" -> true),
-        headers = Seq("Authorization" -> ("token " + authKey))
-      )
-    }
-
-    val examples = exampleZips().map(z => (z.path, z.path.last))
-
-    val zips = examples ++ Seq(
-      (build.dist.assembly().path, label + "-assembly"),
-      (bootstrapLauncher().path, label),
-      (bootstrapLauncherBat().path, label + ".bat")
-    )
-
-    for ((zip, name) <- zips) {
-      upload.apply(
-        zip,
-        releaseTag,
-        name,
-        authKey,
-        build.Settings.githubOrg,
-        build.Settings.githubRepo
-      )
-    }
+//    val vcsState = VcsVersion.vcsState()
+//    val label = vcsState.format()
+//    if (label != build.millVersion()) sys.error("Modified mill version detected, aborting upload")
+//    val releaseTag = vcsState.lastTag.getOrElse(sys.error(
+//      "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
+//    ))
+//
+//    if (releaseTag == label) {
+//      // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
+//      requests.post(
+//        s"https://api.github.com/repos/${build.Settings.githubOrg}/${build.Settings.githubRepo}/releases",
+//        data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag, "prerelease" -> true),
+//        headers = Seq("Authorization" -> ("token " + authKey))
+//      )
+//    }
+//
+//    val examples = exampleZips().map(z => (z.path, z.path.last))
+//
+//    val zips = examples ++ Seq(
+//      (build.dist.assembly().path, label + "-assembly"),
+//      (bootstrapLauncher().path, label),
+//      (bootstrapLauncherBat().path, label + ".bat")
+//    )
+//
+//    for ((zip, name) <- zips) {
+//      upload.apply(
+//        zip,
+//        releaseTag,
+//        name,
+//        authKey,
+//        build.Settings.githubOrg,
+//        build.Settings.githubRepo
+//      )
+//    }
   }
 }
diff --git a/docs/package.mill b/docs/package.mill
index 85aa2da935..7471c6b4a5 100644
--- a/docs/package.mill
+++ b/docs/package.mill
@@ -2,7 +2,7 @@ package build.docs
 import org.jsoup._
 import mill.util.Jvm
 import mill._, scalalib._
-import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
 import scala.jdk.CollectionConverters._
 
 /** Generates the mill documentation with Antora. */
@@ -31,7 +31,7 @@ object `package` extends RootModule {
       case m: JavaModule if m eq build.kotlinlib => m
     }
     def unidocSourceUrl = Task {
-      val sha = VcsVersion.vcsState().currentRevision
+      val sha = "main"//VcsVersion.vcsState().currentRevision
       Some(s"${build.Settings.projectUrl}/blob/$sha")
     }
   }
@@ -208,7 +208,7 @@ object `package` extends RootModule {
   }
 
   def blogFolder = Task.Source(build.millSourcePath / "blog")
-  def githubPagesPlaybookText(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
+  def githubPagesPlaybookText(authorMode: Boolean) = T.task { (extraSources: Seq[os.Path]) =>
     val taggedSources = for (path <- extraSources) yield {
       s"""    - url: ${build.baseDir}
          |      start_path: ${path.relativeTo(build.baseDir)}
@@ -285,25 +285,25 @@ object `package` extends RootModule {
   }
 
   def githubPages: T[PathRef] = Task {
-    generatePages(authorMode = false)().apply(oldDocSources().map(_.path))
+    generatePages(authorMode = false).apply().apply(oldDocSources().map(_.path))
   }
 
   def localPages: T[PathRef] = Task {
-    val pages = generatePages(authorMode = true)().apply(oldDocSources().map(_.path))
+    val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
     T.log.outputStream.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
   def fastPages: T[PathRef] = Task {
-    val pages = generatePages(authorMode = true)().apply(Nil)
+    val pages = generatePages(authorMode = true).apply().apply(Nil)
     T.log.outputStream.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
 
-  def generatePages(authorMode: Boolean) = Task.Anon { extraSources: Seq[os.Path] =>
+  def generatePages(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
     T.log.errorStream.println("Creating Antora playbook ...")
     // dependency to sources
     source()
@@ -312,7 +312,7 @@ object `package` extends RootModule {
     val siteDir = docSite / "site"
     os.write(
       target = playbook,
-      data = githubPagesPlaybookText(authorMode)().apply(extraSources),
+      data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
       createFolders = true
     )
     T.log.errorStream.println("Running Antora ...")
diff --git a/example/package.mill b/example/package.mill
index 79d9e84f90..b4f5523932 100644
--- a/example/package.mill
+++ b/example/package.mill
@@ -1,10 +1,7 @@
 package build.example
 // imports
 import scala.util.chaining._
-import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.api.JarManifest
 import mill.main.Tasks
diff --git a/integration/package.mill b/integration/package.mill
index 4268947e76..9ff520b24f 100644
--- a/integration/package.mill
+++ b/integration/package.mill
@@ -1,10 +1,7 @@
 package build.integration
 // imports
 import scala.util.chaining._
-import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.api.JarManifest
 import mill.main.Tasks
diff --git a/mill-build/build.mill b/mill-build/build.mill
index 63c18f0997..4127937bb6 100644
--- a/mill-build/build.mill
+++ b/mill-build/build.mill
@@ -4,12 +4,12 @@ import mill.scalalib._
 
 object `package` extends MillBuildRootModule {
   override def ivyDeps = Agg(
-    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
-    ivy"com.github.lolgab::mill-mima::0.1.1",
+//    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
+//    ivy"com.github.lolgab::mill-mima::0.1.1",
     ivy"net.sourceforge.htmlcleaner:htmlcleaner:2.29",
     // TODO: implement empty version for ivy deps as we do in import parser
     ivy"com.lihaoyi::mill-contrib-buildinfo:${mill.api.BuildInfo.millVersion}",
-    ivy"com.goyeau::mill-scalafix::0.4.2",
+//    ivy"com.goyeau::mill-scalafix::0.4.2",
     ivy"com.lihaoyi::mill-main-graphviz:${mill.api.BuildInfo.millVersion}",
     // TODO: document, why we have this dependency
     ivy"org.jsoup:jsoup:1.18.1"
diff --git a/scalalib/package.mill b/scalalib/package.mill
index 5f7705dd2f..0e7fa1e796 100644
--- a/scalalib/package.mill
+++ b/scalalib/package.mill
@@ -1,9 +1,6 @@
 package build.scalalib
 import scala.util.chaining._
-import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.api.JarManifest
 import mill.define.NamedTask
