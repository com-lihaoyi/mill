diff --git a/build.sc b/build.sc
index 4f70fbc1a4..6506f15622 100644
--- a/build.sc
+++ b/build.sc
@@ -2,27 +2,18 @@
 import $file.ci.shared
 import $file.ci.upload
 import $ivy.`org.scalaj::scalaj-http:2.4.2`
-import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version_mill0.10:0.3.0`
-import $ivy.`com.github.lolgab::mill-mima_mill0.10:0.0.13`
 import $ivy.`net.sourceforge.htmlcleaner:htmlcleaner:2.25`
+import $ivy.`com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION`
+import mill.contrib.buildinfo.BuildInfo
 
 // imports
-import com.github.lolgab.mill.mima
-import com.github.lolgab.mill.mima.{
-  CheckDirection,
-  DirectMissingMethodProblem,
-  IncompatibleMethTypeProblem,
-  IncompatibleSignatureProblem,
-  ProblemFilter,
-  ReversedMissingMethodProblem
-}
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
 import mill._
 import mill.define.{Command, Source, Sources, Target, Task}
 import mill.eval.Evaluator
 import mill.main.MainModule
 import mill.scalalib._
+import mill.scalalib.api.Versions
 import mill.scalalib.publish._
 import mill.modules.Jvm
 import mill.define.SelectMode
@@ -185,12 +176,8 @@ object Deps {
   val requests = ivy"com.lihaoyi::requests:0.8.0"
 }
 
-def millVersion: T[String] = T { VcsVersion.vcsState().format() }
-def millLastTag: T[String] = T {
-  VcsVersion.vcsState().lastTag.getOrElse(
-    sys.error("No (last) git tag found. Your git history seems incomplete!")
-  )
-}
+def millVersion: T[String] = T { "0.0.0.test" }
+def millLastTag: T[String] = T { "0.0.0.test" }
 def millBinPlatform: T[String] = T {
   val tag = millLastTag()
   if (tag.contains("-M")) tag
@@ -240,219 +227,23 @@ class BridgeModule(val crossScalaVersion: String) extends PublishModule with Cro
   def generatedSources = T {
     import mill.scalalib.api.ZincWorkerUtil.{grepJar, scalaBinaryVersion}
     val resolvedJars = resolveDeps(
-      T.task { Agg(ivy"org.scala-sbt::compiler-bridge:${Deps.zinc.dep.version}") },
+      T.task { Agg(ivy"org.scala-sbt::compiler-bridge:${Deps.zinc.dep.version}").map(bindDependency()) },
       sources = true
     )()
 
     val bridgeJar = grepJar(
-      resolvedJars.map(_.path),
+      resolvedJars,
       s"compiler-bridge_${scalaBinaryVersion(scalaVersion())}",
       Deps.zinc.dep.version,
       true
     )
 
-    mill.api.IO.unpackZip(bridgeJar, os.rel)
+    mill.api.IO.unpackZip(bridgeJar.path, os.rel)
 
     Seq(PathRef(T.dest))
   }
 }
 
-
-trait BuildInfo extends JavaModule {
-  /**
-   * The package name under which the BuildInfo data object will be stored.
-   */
-  def buildInfoPackageName: String
-
-  /**
-   * The name of the BuildInfo data object, defaults to "BuildInfo"
-   */
-  def buildInfoObjectName: String = "BuildInfo"
-
-  /**
-   * Enable to compile the BuildInfo values directly into the classfiles,
-   * rather than the default behavior of storing them as a JVM resource. Needed
-   * to use BuildInfo on Scala.js which does not support JVM resources
-   */
-  def buildInfoStaticCompiled: Boolean = false
-
-  /**
-   * A mapping of key-value pairs to pass from the Build script to the
-   * application code at runtime.
-   */
-  def buildInfoMembers: T[Seq[BuildInfo.Value]] = Seq.empty[BuildInfo.Value]
-
-  def resources =
-    if (buildInfoStaticCompiled) super.resources
-    else T.sources{ super.resources() ++ Seq(buildInfoResources()) }
-
-  def buildInfoResources = T{
-    val p = new java.util.Properties
-    for (v <- buildInfoMembers()) p.setProperty(v.key, v.value)
-
-    val stream = os.write.outputStream(
-      T.dest / os.SubPath(buildInfoPackageName.replace('.', '/')) / s"$buildInfoObjectName.buildinfo.properties",
-      createFolders = true
-    )
-
-    p.store(stream, s"mill.contrib.buildinfo.BuildInfo for ${buildInfoPackageName}.${buildInfoObjectName}")
-    stream.close()
-    PathRef(T.dest)
-  }
-
-  private def isScala = this.isInstanceOf[ScalaModule]
-
-  override def generatedSources = T {
-    super.generatedSources() ++ buildInfoSources()
-  }
-
-  def buildInfoSources = T{
-    if (buildInfoMembers().isEmpty) Nil
-    else {
-      val code = if (buildInfoStaticCompiled) BuildInfo.staticCompiledCodegen(
-        buildInfoMembers(), isScala, buildInfoPackageName, buildInfoObjectName
-      ) else BuildInfo.codegen(
-        buildInfoMembers(), isScala, buildInfoPackageName, buildInfoObjectName
-      )
-
-      val ext = if (isScala) "scala" else "java"
-
-      os.write(
-        T.dest / buildInfoPackageName.split('.') / s"${buildInfoObjectName}.$ext",
-        code,
-        createFolders = true
-      )
-      Seq(PathRef(T.dest))
-    }
-  }
-}
-
-object BuildInfo{
-  case class Value(key: String, value: String, comment: String = "")
-  object Value{
-    implicit val rw: upickle.default.ReadWriter[Value] = upickle.default.macroRW
-  }
-  def staticCompiledCodegen(buildInfoMembers: Seq[Value],
-                            isScala: Boolean,
-                            buildInfoPackageName: String,
-                            buildInfoObjectName: String): String = {
-    val bindingsCode = buildInfoMembers
-      .sortBy(_.key)
-      .map {
-        case v =>
-          if (isScala) s"""${commentStr(v)}val ${v.key} = ${pprint.Util.literalize(v.value)}"""
-          else s"""${commentStr(v)}public static java.lang.String ${v.key} = ${pprint.Util.literalize(v.value)};"""
-      }
-      .mkString("\n\n  ")
-
-
-    if (isScala) {
-      val mapEntries = buildInfoMembers
-        .map { case v => s""""${v.key}" -> ${v.key}"""}
-        .mkString(",\n")
-
-      s"""
-         |package $buildInfoPackageName
-         |
-         |object $buildInfoObjectName {
-         |  $bindingsCode
-         |  val toMap = Map[String, String](
-         |    $mapEntries
-         |  )
-         |}
-      """.stripMargin.trim
-    } else {
-      val mapEntries = buildInfoMembers
-        .map { case v => s"""map.put("${v.key}", ${v.key});""" }
-        .mkString(",\n")
-
-      s"""
-         |package $buildInfoPackageName;
-         |
-         |public class $buildInfoObjectName {
-         |  $bindingsCode
-         |
-         |  public static java.util.Map<String, String> toMap(){
-         |    Map<String, String> map = new HashMap<String, String>();
-         |    $mapEntries
-         |    return map;
-         |  }
-         |}
-      """.stripMargin.trim
-    }
-  }
-
-  def codegen(buildInfoMembers: Seq[Value],
-              isScala: Boolean,
-              buildInfoPackageName: String,
-              buildInfoObjectName: String): String = {
-    val bindingsCode = buildInfoMembers
-      .sortBy(_.key)
-      .map {
-        case v =>
-          if (isScala) s"""${commentStr(v)}val ${v.key} = buildInfoProperties.getProperty("${v.key}")"""
-          else s"""${commentStr(v)}public static final java.lang.String ${v.key} = buildInfoProperties.getProperty("${v.key}");"""
-      }
-      .mkString("\n\n  ")
-
-    if (isScala)
-      s"""
-         |package ${buildInfoPackageName}
-         |
-         |object $buildInfoObjectName {
-         |  private val buildInfoProperties = new java.util.Properties
-         |
-         |  private val buildInfoInputStream = getClass
-         |    .getResourceAsStream("$buildInfoObjectName.buildinfo.properties")
-         |
-         |  buildInfoProperties.load(buildInfoInputStream)
-         |
-         |  $bindingsCode
-         |}
-      """.stripMargin.trim
-    else
-      s"""
-         |package ${buildInfoPackageName};
-         |
-         |public class $buildInfoObjectName {
-         |  private static java.util.Properties buildInfoProperties = new java.util.Properties();
-         |
-         |  static {
-         |    java.io.InputStream buildInfoInputStream = $buildInfoObjectName
-         |      .class
-         |      .getResourceAsStream("$buildInfoObjectName.buildinfo.properties");
-         |
-         |    try{
-         |      buildInfoProperties.load(buildInfoInputStream);
-         |    }catch(java.io.IOException e){
-         |      throw new RuntimeException(e);
-         |    }finally{
-         |      try{
-         |        buildInfoInputStream.close();
-         |      }catch(java.io.IOException e){
-         |        throw new RuntimeException(e);
-         |      }
-         |    }
-         |  }
-         |
-         |  $bindingsCode
-         |}
-      """.stripMargin.trim
-  }
-
-  def commentStr(v: Value) = {
-    if (v.comment.isEmpty) ""
-    else {
-      val lines = v.comment.linesIterator.toVector
-      lines.length match{
-        case 1 => s"""/** ${v.comment} */\n  """
-        case _ => s"""/**\n    ${lines.map("* " + _).mkString("\n    ")}\n    */\n  """
-      }
-
-    }
-  }
-}
-
 def commonPomSettings(artifactName: String) = {
   PomSettings(
     description = artifactName,
@@ -506,27 +297,8 @@ trait MillCoursierModule extends CoursierModule {
   )
 }
 
-trait MillMimaConfig extends mima.Mima {
+trait MillMimaConfig extends Module {
   def skipPreviousVersions: T[Seq[String]] = T(Seq.empty[String])
-  override def mimaPreviousVersions: T[Seq[String]] = Settings.mimaBaseVersions
-  override def mimaPreviousArtifacts: T[Agg[Dep]] = T {
-    Agg.from(
-      Settings.mimaBaseVersions
-        .filter(v => !skipPreviousVersions().contains(v))
-        .map(version =>
-          ivy"${pomSettings().organization}:${artifactId()}:${version}"
-        )
-    )
-  }
-  override def mimaExcludeAnnotations: T[Seq[String]] = Seq(
-    "mill.api.internal",
-    "mill.api.experimental"
-  )
-  override def mimaCheckDirection: Target[CheckDirection] = T { CheckDirection.Backward }
-  override def mimaBinaryIssueFilters: Target[Seq[ProblemFilter]] = T {
-    issueFilterByModule.getOrElse(this, Seq())
-  }
-  lazy val issueFilterByModule: Map[MillMimaConfig, Seq[ProblemFilter]] = Map()
 }
 
 /** A Module compiled with applied Mill-specific compiler plugins: mill-moduledefs. */
@@ -823,6 +595,7 @@ object scalajslib extends MillModule with BuildInfo{
   object worker extends Cross[WorkerModule]("1")
   class WorkerModule(scalajsWorkerVersion: String) extends MillInternalModule {
     override def moduleDeps = Seq(scalajslib.`worker-api`, main.client, main.api)
+    override def millSourcePath: os.Path = super.millSourcePath / scalajsWorkerVersion
     override def ivyDeps = Agg(
       Deps.Scalajs_1.scalajsLinker,
       Deps.Scalajs_1.scalajsSbtTestAdapter,
@@ -884,6 +657,7 @@ object contrib extends MillModule {
 
     object worker extends Cross[WorkerModule](Deps.play.keys.toSeq: _*)
     class WorkerModule(playBinary: String) extends MillInternalModule {
+      override def millSourcePath: os.Path = super.millSourcePath / playBinary
       override def sources = T.sources {
         // We want to avoid duplicating code as long as the Play APIs allow.
         // But if newer Play versions introduce incompatibilities,
@@ -1075,6 +849,7 @@ object scalanativelib extends MillModule {
   object worker extends Cross[WorkerModule]("0.4")
   class WorkerModule(scalaNativeWorkerVersion: String)
       extends MillInternalModule {
+    override def millSourcePath: os.Path = super.millSourcePath / scalaNativeWorkerVersion
     override def moduleDeps = Seq(scalanativelib.`worker-api`)
     override def ivyDeps = scalaNativeWorkerVersion match {
       case "0.4" =>
@@ -1237,6 +1012,7 @@ trait IntegrationTestModule extends MillScalaModule {
 }
 
 trait IntegrationTestCrossModule extends IntegrationTestModule {
+  override def millSourcePath = super.millSourcePath / repoSlug
   object local extends ModeModule
   object fork extends ModeModule
   object server extends ModeModule
@@ -1791,53 +1567,7 @@ def launcher = T {
 
 
 def uploadToGithub(authKey: String) = T.command {
-  val vcsState = VcsVersion.vcsState()
-  val label = vcsState.format()
-  if (label != millVersion()) sys.error("Modified mill version detected, aborting upload")
-  val releaseTag = vcsState.lastTag.getOrElse(sys.error(
-    "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
-  ))
-
-  if (releaseTag == label) {
-    // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
-    scalaj.http.Http(
-      s"https://api.github.com/repos/${Settings.githubOrg}/${Settings.githubRepo}/releases"
-    )
-      .postData(
-        ujson.write(
-          ujson.Obj(
-            "tag_name" -> releaseTag,
-            "name" -> releaseTag
-          )
-        )
-      )
-      .header("Authorization", "token " + authKey)
-      .asString
-  }
-
-  val exampleZips = Seq("example-1", "example-2", "example-3")
-    .map { example =>
-      os.copy(T.workspace / "example" / example, T.dest / example)
-      os.copy(launcher().path, T.dest / example / "mill")
-      os.proc("zip", "-r", T.dest / s"$example.zip", example).call(cwd = T.dest)
-      (T.dest / s"$example.zip", label + "-" + example + ".zip")
-    }
-
-  val zips = exampleZips ++ Seq(
-    (assembly().path, label + "-assembly"),
-    (launcher().path, label)
-  )
-
-  for ((zip, name) <- zips) {
-    upload.apply(
-      zip,
-      releaseTag,
-      name,
-      authKey,
-      Settings.githubOrg,
-      Settings.githubRepo
-    )
-  }
+  // never upload a bootstrapped version
 }
 
 def validate(ev: Evaluator): Command[Unit] = T.command {
