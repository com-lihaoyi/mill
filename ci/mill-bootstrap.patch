diff --git a/build.sc b/build.sc
index 20fe84f7e4..869c3ba31e 100644
--- a/build.sc
+++ b/build.sc
@@ -2,23 +2,23 @@
 import $file.ci.shared
 import $file.ci.upload
 import $ivy.`org.scalaj::scalaj-http:2.4.2`
-import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.3.1-7-33d3b5`
+//import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.3.1-7-33d3b5`
 
-import $ivy.`com.github.lolgab::mill-mima::0.0.20`
+//import $ivy.`com.github.lolgab::mill-mima::0.0.20`
 import $ivy.`net.sourceforge.htmlcleaner:htmlcleaner:2.25`
 
 // imports
-import com.github.lolgab.mill.mima
-import com.github.lolgab.mill.mima.{
-  CheckDirection,
-  DirectMissingMethodProblem,
-  IncompatibleMethTypeProblem,
-  IncompatibleSignatureProblem,
-  ProblemFilter,
-  ReversedMissingMethodProblem
-}
+//import com.github.lolgab.mill.mima
+//import com.github.lolgab.mill.mima.{
+//  CheckDirection,
+//  DirectMissingMethodProblem,
+//  IncompatibleMethTypeProblem,
+//  IncompatibleSignatureProblem,
+//  ProblemFilter,
+//  ReversedMissingMethodProblem
+//}
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
 import mill._
 import mill.eval.Evaluator
 import mill.main.MainModule
@@ -167,11 +167,12 @@ object Deps {
   val requests = ivy"com.lihaoyi::requests:0.8.0"
 }
 
-def millVersion: T[String] = T { VcsVersion.vcsState().format() }
+def millVersion: T[String] = T { "dev"/*VcsVersion.vcsState().format()*/ }
 def millLastTag: T[String] = T {
-  VcsVersion.vcsState().lastTag.getOrElse(
-    sys.error("No (last) git tag found. Your git history seems incomplete!")
-  )
+//  VcsVersion.vcsState().lastTag.getOrElse(
+//    sys.error("No (last) git tag found. Your git history seems incomplete!")
+//  )
+  "dev"
 }
 def millBinPlatform: T[String] = T {
   val tag = millLastTag()
@@ -319,26 +320,26 @@ trait MillJavaModule extends JavaModule {
   )
 }
 
-trait MillMimaConfig extends mima.Mima {
-  override def mimaPreviousVersions: T[Seq[String]] = Settings.mimaBaseVersions
-  override def mimaPreviousArtifacts: T[Agg[Dep]] = T {
-    Agg.from(
-      Settings.mimaBaseVersions
-        .filter(v => !skipPreviousVersions().contains(v))
-        .map(version =>
-          ivy"${pomSettings().organization}:${artifactId()}:${version}"
-        )
-    )
-  }
-  override def mimaExcludeAnnotations: T[Seq[String]] = Seq(
-    "mill.api.internal",
-    "mill.api.experimental"
-  )
-  override def mimaCheckDirection: Target[CheckDirection] = T { CheckDirection.Backward }
-  override def mimaBinaryIssueFilters: Target[Seq[ProblemFilter]] = T {
-    issueFilterByModule.getOrElse(this, Seq())
-  }
-  lazy val issueFilterByModule: Map[MillMimaConfig, Seq[ProblemFilter]] = Map()
+trait MillMimaConfig extends Module/*mima.Mima*/ {
+//  override def mimaPreviousVersions: T[Seq[String]] = Settings.mimaBaseVersions
+//  override def mimaPreviousArtifacts: T[Agg[Dep]] = T {
+//    Agg.from(
+//      Settings.mimaBaseVersions
+//        .filter(v => !skipPreviousVersions().contains(v))
+//        .map(version =>
+//          ivy"${pomSettings().organization}:${artifactId()}:${version}"
+//        )
+//    )
+//  }
+//  override def mimaExcludeAnnotations: T[Seq[String]] = Seq(
+//    "mill.api.internal",
+//    "mill.api.experimental"
+//  )
+//  override def mimaCheckDirection: Target[CheckDirection] = T { CheckDirection.Backward }
+//  override def mimaBinaryIssueFilters: Target[Seq[ProblemFilter]] = T {
+//    issueFilterByModule.getOrElse(this, Seq())
+//  }
+//  lazy val issueFilterByModule: Map[MillMimaConfig, Seq[ProblemFilter]] = Map()
   def skipPreviousVersions: T[Seq[String]] = T(Seq.empty[String])
 }
 
@@ -425,10 +426,9 @@ trait BaseMillTestsModule extends TestModule {
 
 /** A MillScalaModule with default set up test module. */
 trait MillAutoTestSetup extends MillScalaModule {
-  // instead of `object test` which can't be overridden, we hand-made a val+class singleton
   /** Default tests module. */
-  val test = new Tests(implicitly)
-  class Tests(ctx0: mill.define.Ctx) extends mill.Module()(ctx0) with super.MillScalaModuleTests
+  lazy val test: Tests = new Tests {}
+  trait Tests extends super.MillScalaModuleTests
 }
 
 /** Published module which does not contain strictly handled API. */
@@ -917,8 +917,8 @@ object bsp extends MillModule with BuildInfo {
     )
   }
 
-  override val test = new Test(implicitly)
-  class Test(ctx0: mill.define.Ctx) extends Tests(ctx0) {
+  override lazy val test: Test = new Test {}
+  trait Test extends Tests{
     override def forkEnv: Target[Map[String, String]] = T {
       // We try to fetch this dependency with coursier in the tests
       bsp.worker.publishLocal()()
@@ -1066,7 +1066,7 @@ object example extends MillScalaModule {
               val title =
                 if (seenCode) ""
                 else {
-                  val label = VcsVersion.vcsState().format()
+                  val label = millVersion()
                   val exampleDashed = examplePath.segments.mkString("-")
                   val download = s"{mill-download-url}/$label-$exampleDashed.zip[download]"
                   val browse = s"{mill-example-url}/$examplePath[browse]"
@@ -1744,7 +1744,7 @@ def exampleZips: Target[Seq[PathRef]] = T {
     examplePath = exampleMod.millSourcePath
   } yield {
     val example = examplePath.subRelativeTo(T.workspace)
-    val exampleStr = VcsVersion.vcsState().format() + "-" + example.segments.mkString("-")
+    val exampleStr = millVersion() + "-" + example.segments.mkString("-")
     os.copy(examplePath, T.dest / exampleStr, createFolders = true)
     os.copy(bootstrapLauncher().path, T.dest / exampleStr / "mill")
     val zip = T.dest / s"$exampleStr.zip"
@@ -1754,47 +1754,47 @@ def exampleZips: Target[Seq[PathRef]] = T {
 }
 
 def uploadToGithub(authKey: String) = T.command {
-  val vcsState = VcsVersion.vcsState()
-  val label = vcsState.format()
-  if (label != millVersion()) sys.error("Modified mill version detected, aborting upload")
-  val releaseTag = vcsState.lastTag.getOrElse(sys.error(
-    "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
-  ))
-
-  if (releaseTag == label) {
-    // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
-    scalaj.http.Http(
-      s"https://api.github.com/repos/${Settings.githubOrg}/${Settings.githubRepo}/releases"
-    )
-      .postData(
-        ujson.write(
-          ujson.Obj(
-            "tag_name" -> releaseTag,
-            "name" -> releaseTag
-          )
-        )
-      )
-      .header("Authorization", "token " + authKey)
-      .asString
-  }
-
-  val examples = exampleZips().map(z => (z.path, z.path.last))
-
-  val zips = examples ++ Seq(
-    (dev.assembly().path, label + "-assembly"),
-    (bootstrapLauncher().path, label)
-  )
-
-  for ((zip, name) <- zips) {
-    upload.apply(
-      zip,
-      releaseTag,
-      name,
-      authKey,
-      Settings.githubOrg,
-      Settings.githubRepo
-    )
-  }
+//  val vcsState = VcsVersion.vcsState()
+//  val label = vcsState.format()
+//  if (label != millVersion()) sys.error("Modified mill version detected, aborting upload")
+//  val releaseTag = vcsState.lastTag.getOrElse(sys.error(
+//    "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
+//  ))
+//
+//  if (releaseTag == label) {
+//    // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
+//    scalaj.http.Http(
+//      s"https://api.github.com/repos/${Settings.githubOrg}/${Settings.githubRepo}/releases"
+//    )
+//      .postData(
+//        ujson.write(
+//          ujson.Obj(
+//            "tag_name" -> releaseTag,
+//            "name" -> releaseTag
+//          )
+//        )
+//      )
+//      .header("Authorization", "token " + authKey)
+//      .asString
+//  }
+//
+//  val examples = exampleZips().map(z => (z.path, z.path.last))
+//
+//  val zips = examples ++ Seq(
+//    (dev.assembly().path, label + "-assembly"),
+//    (bootstrapLauncher().path, label)
+//  )
+//
+//  for ((zip, name) <- zips) {
+//    upload.apply(
+//      zip,
+//      releaseTag,
+//      name,
+//      authKey,
+//      Settings.githubOrg,
+//      Settings.githubRepo
+//    )
+//  }
 }
 
 def validate(ev: Evaluator): Command[Unit] = T.command {
