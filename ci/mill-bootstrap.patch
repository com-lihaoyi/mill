diff --git a/build.sc b/build.sc
index 20fe84f7e4..a971bda34d 100644
--- a/build.sc
+++ b/build.sc
@@ -319,26 +319,26 @@ trait MillJavaModule extends JavaModule {
   )
 }
 
-trait MillMimaConfig extends mima.Mima {
-  override def mimaPreviousVersions: T[Seq[String]] = Settings.mimaBaseVersions
-  override def mimaPreviousArtifacts: T[Agg[Dep]] = T {
-    Agg.from(
-      Settings.mimaBaseVersions
-        .filter(v => !skipPreviousVersions().contains(v))
-        .map(version =>
-          ivy"${pomSettings().organization}:${artifactId()}:${version}"
-        )
-    )
-  }
-  override def mimaExcludeAnnotations: T[Seq[String]] = Seq(
-    "mill.api.internal",
-    "mill.api.experimental"
-  )
-  override def mimaCheckDirection: Target[CheckDirection] = T { CheckDirection.Backward }
-  override def mimaBinaryIssueFilters: Target[Seq[ProblemFilter]] = T {
-    issueFilterByModule.getOrElse(this, Seq())
-  }
-  lazy val issueFilterByModule: Map[MillMimaConfig, Seq[ProblemFilter]] = Map()
+trait MillMimaConfig extends Module/*mima.Mima*/ {
+//  override def mimaPreviousVersions: T[Seq[String]] = Settings.mimaBaseVersions
+//  override def mimaPreviousArtifacts: T[Agg[Dep]] = T {
+//    Agg.from(
+//      Settings.mimaBaseVersions
+//        .filter(v => !skipPreviousVersions().contains(v))
+//        .map(version =>
+//          ivy"${pomSettings().organization}:${artifactId()}:${version}"
+//        )
+//    )
+//  }
+//  override def mimaExcludeAnnotations: T[Seq[String]] = Seq(
+//    "mill.api.internal",
+//    "mill.api.experimental"
+//  )
+//  override def mimaCheckDirection: Target[CheckDirection] = T { CheckDirection.Backward }
+//  override def mimaBinaryIssueFilters: Target[Seq[ProblemFilter]] = T {
+//    issueFilterByModule.getOrElse(this, Seq())
+//  }
+//  lazy val issueFilterByModule: Map[MillMimaConfig, Seq[ProblemFilter]] = Map()
   def skipPreviousVersions: T[Seq[String]] = T(Seq.empty[String])
 }
 
@@ -425,10 +425,9 @@ trait BaseMillTestsModule extends TestModule {
 
 /** A MillScalaModule with default set up test module. */
 trait MillAutoTestSetup extends MillScalaModule {
-  // instead of `object test` which can't be overridden, we hand-made a val+class singleton
   /** Default tests module. */
-  val test = new Tests(implicitly)
-  class Tests(ctx0: mill.define.Ctx) extends mill.Module()(ctx0) with super.MillScalaModuleTests
+  lazy val test: Tests = new Tests {}
+  trait Tests extends super.MillScalaModuleTests
 }
 
 /** Published module which does not contain strictly handled API. */
@@ -917,8 +916,8 @@ object bsp extends MillModule with BuildInfo {
     )
   }
 
-  override val test = new Test(implicitly)
-  class Test(ctx0: mill.define.Ctx) extends Tests(ctx0) {
+  override lazy val test: Test = new Test {}
+  trait Test extends Tests{
     override def forkEnv: Target[Map[String, String]] = T {
       // We try to fetch this dependency with coursier in the tests
       bsp.worker.publishLocal()()
