diff --git a/build.mill b/build.mill
index 07f869ee60..9024b82436 100644
--- a/build.mill
+++ b/build.mill
@@ -263,12 +263,13 @@ object Deps {
   }
 }

-def millVersion: T[String] = Task { VcsVersion.vcsState().format() }
+def millVersion: T[String] = Task { "0.13.0-SCALA3" } // Task { VcsVersion.vcsState().format() }

 def millLastTag: T[String] = Task {
-  VcsVersion.vcsState().lastTag.getOrElse(
-    sys.error("No (last) git tag found. Your git history seems incomplete!")
-  )
+  "0.12.0-RC3"
+  // VcsVersion.vcsState().lastTag.getOrElse(
+  //   sys.error("No (last) git tag found. Your git history seems incomplete!")
+  // )
 }

 def millBinPlatform: T[String] = Task {
diff --git a/ci/mill-bootstrap.patch b/ci/mill-bootstrap.patch
index a29b8ff34e..e69de29bb2 100644
--- a/ci/mill-bootstrap.patch
+++ b/ci/mill-bootstrap.patch
@@ -1,108 +0,0 @@
-diff --git a/build.mill b/build.mill
-index c4235ba1270..a3384fce955 100644
---- a/build.mill
-+++ b/build.mill
-@@ -256,12 +256,13 @@ object Deps {
-   }
- }
-
--def millVersion: T[String] = Task { VcsVersion.vcsState().format() }
-+def millVersion: T[String] = Task { "0.13.0-SCALA3" } // Task { VcsVersion.vcsState().format() }
-
- def millLastTag: T[String] = Task {
--  VcsVersion.vcsState().lastTag.getOrElse(
--    sys.error("No (last) git tag found. Your git history seems incomplete!")
--  )
-+  "0.12.0-RC3"
-+  // VcsVersion.vcsState().lastTag.getOrElse(
-+  //   sys.error("No (last) git tag found. Your git history seems incomplete!")
-+  // )
- }
-
- def millBinPlatform: T[String] = Task {
-@@ -1052,10 +1053,13 @@ def uploadToGithub(authKey: String) = Task.Command {
-   ))
-
-   if (releaseTag == label) {
-+    val jsonBlob = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag)
-     // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
-     requests.post(
-       s"https://api.github.com/repos/${Settings.githubOrg}/${Settings.githubRepo}/releases",
--      data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag),
-+      // Scala 3.5.0 bug - without these parens, the `data =` is spliced in the conversion, causing a type error.
-+      // hard to replicate!
-+      data = (jsonBlob: requests.RequestBlob),
-       headers = Seq("Authorization" -> ("token " + authKey))
-     )
-   }
-diff --git a/docs/package.mill b/docs/package.mill
-index 0beea9859d0..af974a80cbf 100644
---- a/docs/package.mill
-+++ b/docs/package.mill
-@@ -188,7 +188,7 @@ object `package` extends RootModule {
-     os.write.over(dest / "antora.yml", (lines ++ newLines).mkString("\n"))
-   }
-
--  def githubPagesPlaybookText(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
-+  def githubPagesPlaybookText(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
-     val taggedSources = for (path <- extraSources) yield {
-       s"""    - url: ${build.baseDir}
-          |      start_path: ${path.relativeTo(build.baseDir)}
-@@ -251,24 +251,24 @@ object `package` extends RootModule {
-   }
-
-   def githubPages: T[PathRef] = Task {
--    generatePages(authorMode = false)().apply(oldDocSources().map(_.path))
-+    generatePages(authorMode = false).apply().apply(oldDocSources().map(_.path))
-   }
-
-   def localPages = Task {
--    val pages = generatePages(authorMode = true)().apply(oldDocSources().map(_.path))
-+    val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
-     T.log.outputStream.println(
-       s"You can browse the local pages at: ${(pages.path / "index.html").toNIO.toUri()}"
-     )
-   }
-   def fastPages = Task {
--    val pages = generatePages(authorMode = true)().apply(Nil)
-+    val pages = generatePages(authorMode = true).apply().apply(Nil)
-     T.log.outputStream.println(
-       s"You can browse the local pages at: ${(pages.path / "index.html").toNIO.toUri()}"
-     )
-     pages
-   }
-
--  def generatePages(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
-+  def generatePages(authorMode: Boolean) = T.task { (extraSources: Seq[os.Path]) =>
-     T.log.errorStream.println("Creating Antora playbook ...")
-     // dependency to sources
-     source()
-@@ -277,7 +277,7 @@ object `package` extends RootModule {
-     val siteDir = docSite / "site"
-     os.write(
-       target = playbook,
--      data = githubPagesPlaybookText(authorMode)().apply(extraSources),
-+      data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
-       createFolders = true
-     )
-     T.log.errorStream.println("Running Antora ...")
-diff --git a/mill-build/build.mill b/mill-build/build.mill
-index 769fca21f6a..7cb1dfd2ff2 100644
---- a/mill-build/build.mill
-+++ b/mill-build/build.mill
-@@ -4,12 +4,12 @@ import mill.scalalib._
-
- object `package` extends MillBuildRootModule {
-   override def ivyDeps = Agg(
--    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0",
--    ivy"com.github.lolgab::mill-mima::0.1.1",
-+    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0".withDottyCompat(scalaVersion()),
-+    ivy"com.github.lolgab::mill-mima::0.1.1".withDottyCompat(scalaVersion()),
-     ivy"net.sourceforge.htmlcleaner:htmlcleaner:2.29",
-     // TODO: implement empty version for ivy deps as we do in import parser
-     ivy"com.lihaoyi::mill-contrib-buildinfo:${mill.api.BuildInfo.millVersion}",
--    ivy"com.goyeau::mill-scalafix::0.4.1",
-+    ivy"com.goyeau::mill-scalafix::0.4.1".withDottyCompat(scalaVersion()),
-     ivy"com.lihaoyi::mill-main-graphviz:${mill.api.BuildInfo.millVersion}",
-     ivy"org.jsoup:jsoup:1.12.1"
-   )
diff --git a/dist/package.mill b/dist/package.mill
index 105e491fe3..34fe6cbbb5 100644
--- a/dist/package.mill
+++ b/dist/package.mill
@@ -307,10 +307,13 @@ object `package` extends RootModule with build.MillPublishJavaModule {
     ))

     if (releaseTag == label) {
+      val jsonBlob = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag)
       // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
       requests.post(
         s"https://api.github.com/repos/${build.Settings.githubOrg}/${build.Settings.githubRepo}/releases",
-        data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag),
+        // Scala 3.5.0 bug - without these parens, the `data =` is spliced in the conversion, causing a type error.
+        // hard to replicate!
+        data = (jsonBlob: requests.RequestBlob),
         headers = Seq("Authorization" -> ("token " + authKey))
       )
     }
diff --git a/docs/package.mill b/docs/package.mill
index bb51074e74..25dc306c04 100644
--- a/docs/package.mill
+++ b/docs/package.mill
@@ -207,7 +207,7 @@ object `package` extends RootModule {
     os.write.over(dest / "antora.yml", (lines ++ newLines).mkString("\n"))
   }

-  def githubPagesPlaybookText(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
+  def githubPagesPlaybookText(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
     val taggedSources = for (path <- extraSources) yield {
       s"""    - url: ${build.baseDir}
          |      start_path: ${path.relativeTo(build.baseDir)}
@@ -281,18 +281,18 @@ object `package` extends RootModule {
   }

   def githubPages: T[PathRef] = Task {
-    generatePages(authorMode = false)().apply(oldDocSources().map(_.path))
+    generatePages(authorMode = false).apply().apply(oldDocSources().map(_.path))
   }

   def localPages: T[PathRef] = Task {
-    val pages = generatePages(authorMode = true)().apply(oldDocSources().map(_.path))
+    val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
     T.log.outputStream.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
   def fastPages: T[PathRef] = Task {
-    val pages = generatePages(authorMode = true)().apply(Nil)
+    val pages = generatePages(authorMode = true).apply().apply(Nil)
     T.log.outputStream.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
@@ -308,7 +308,7 @@ object `package` extends RootModule {
     val siteDir = docSite / "site"
     os.write(
       target = playbook,
-      data = githubPagesPlaybookText(authorMode)().apply(extraSources),
+      data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
       createFolders = true
     )
     T.log.errorStream.println("Running Antora ...")
