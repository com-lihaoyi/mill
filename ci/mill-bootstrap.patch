diff --git a/.github/workflows/autofix.yml b/.github/workflows/autofix.yml
index fff08f9d91e..4b869becf2c 100644
--- a/.github/workflows/autofix.yml
+++ b/.github/workflows/autofix.yml
@@ -10,7 +10,6 @@ jobs:
       - uses: sbt/setup-sbt@v1
 
       - run: |
-          ./mill __.fix + mill.javalib.palantirformat.PalantirFormatModule/ + mill.scalalib.scalafmt.ScalafmtModule/ + mill.kotlinlib.ktlint.KtlintModule/
-          ./mill --meta-level 1 mill.scalalib.scalafmt.ScalafmtModule/
+          ./mill __.fix + mill.javalib.palantirformat.PalantirFormatModule/ + mill.scalalib.scalafmt.ScalafmtModule/scalafmt + mill.kotlinlib.ktlint.KtlintModule/
 
       - uses: autofix-ci/action@551dded8c6cc8a1054039c8bc0b8b48c51dfc6ef
\ No newline at end of file
diff --git a/.github/workflows/run-tests.yml b/.github/workflows/run-tests.yml
index a09996c74d3..a04788e4f40 100644
--- a/.github/workflows/run-tests.yml
+++ b/.github/workflows/run-tests.yml
@@ -301,5 +301,4 @@ jobs:
       java-version: '17'
       buildcmd: |
         set -eux
-        ./mill -i mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll + __.mimaReportBinaryIssues + __.fix --check + mill.javalib.palantirformat.PalantirFormatModule/ --check + mill.kotlinlib.ktlint.KtlintModule/checkFormatAll
-        ./mill -i --meta-level 1 mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll
+        ./mill -i mill.scalalib.scalafmt.ScalafmtModule/scalafmt --check + __.mimaReportBinaryIssues + __.fix --check + mill.javalib.palantirformat.PalantirFormatModule/ --check + mill.kotlinlib.ktlint.KtlintModule/checkFormatAll
diff --git a/build.mill b/build.mill
index 64b8f5e0ce9..1b7cb02d029 100644
--- a/build.mill
+++ b/build.mill
@@ -1,16 +1,16 @@
 package build
 // imports
-import com.github.lolgab.mill.mima.Mima
+//import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.define.NamedTask
 import mill.main.Tasks
 import mill.scalalib._
-import mill.scalalib.api.ZincWorkerUtil
+import mill.scalalib.api.JvmWorkerUtil
 import mill.scalalib.publish._
-import mill.resolve.SelectMode
+import mill.define.SelectMode
 import mill.T
 import mill.define.Cross
 
@@ -292,19 +292,19 @@ object Deps {
 }
 
 def millVersion: T[String] = Task.Input {
-  if (Task.env.contains("MILL_STABLE_VERSION")) {
+  /*if (Task.env.contains("MILL_STABLE_VERSION")) {
     // Ignore local changes when computing the VCS version string,
     // since we make those in CI and can promise they are safe
     VcsVersion.calcVcsState(Task.log).copy(dirtyHash = None).format()
-  } else "SNAPSHOT"
+  } else */"SNAPSHOT"
 }
 
 def millLastTag: T[String] = Task.Input {
-  if (Task.env.contains("MILL_STABLE_VERSION")) {
+  /*if (Task.env.contains("MILL_STABLE_VERSION")) {
     VcsVersion.calcVcsState(Task.log).lastTag.getOrElse(
       sys.error("No (last) git tag found. Your git history seems incomplete!")
     )
-  } else "SNAPSHOT"
+  } else */"SNAPSHOT"
 }
 
 def millDownloadPrefix = Task {
@@ -323,7 +323,7 @@ def millBinPlatform: T[String] = Task {
   }
 }
 
-def baseDir = build.millSourcePath
+def baseDir = build.moduleDir
 
 def millJvmVersion = Task.Source(Task.workspace / ".mill-jvm-version")
 
@@ -473,7 +473,7 @@ trait MillPublishJavaModule extends MillJavaModule with PublishModule {
 /**
  * Some custom scala settings and test convenience
  */
-trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModule { outer =>
+trait MillScalaModule extends ScalaModule with MillJavaModule/* with ScalafixModule*/ { outer =>
   def scalaVersion = Deps.scalaVersion
   def scalapVersion: T[String] = Deps.scala2Version
   def scalafixScalaBinaryVersion = T {
@@ -530,8 +530,8 @@ trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModul
-    val binaryVersion = ZincWorkerUtil.scalaBinaryVersion(sv)
+    val binaryVersion = JvmWorkerUtil.scalaBinaryVersion(sv)
     val hasModuleDefs = binaryVersion == "2.13" || binaryVersion == "3"
     super.scalacPluginIvyDeps() ++
-      Agg.when(binaryVersion != "3")(Deps.acyclic) ++
-      Agg.when(hasModuleDefs)(Deps.millModuledefsPlugin)
+      Option.when(binaryVersion != "3")(Deps.acyclic) ++
+      Option.when(hasModuleDefs)(Deps.millModuledefsPlugin)
   }
 
   def mandatoryIvyDeps = T {
@@ -539,13 +539,13 @@ trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModul
-    val binaryVersion = ZincWorkerUtil.scalaBinaryVersion(sv)
+    val binaryVersion = JvmWorkerUtil.scalaBinaryVersion(sv)
     val hasModuleDefs = binaryVersion == "2.13" || binaryVersion == "3"
     super.mandatoryIvyDeps() ++
-      Agg.when(hasModuleDefs)(Deps.millModuledefs)
+      Option.when(hasModuleDefs)(Deps.millModuledefs)
   }
 
   /** Default tests module. */
   lazy val test: MillScalaTests = new MillScalaTests {}
   trait MillScalaTests extends ScalaTests with MillJavaModule with MillBaseTestsModule
-      with ScalafixModule {
+      /*with ScalafixModule*/ {
     def scalafixConfig = T { Some(T.workspace / ".scalafix.conf") }
     def forkArgs = super.forkArgs() ++ outer.testArgs()
     def moduleDeps = outer.testModuleDeps
@@ -586,7 +586,8 @@ trait MillBaseTestsModule extends TestModule {
 trait MillPublishScalaModule extends MillScalaModule with MillPublishJavaModule
 
 /** Publishable module which contains strictly handled API. */
-trait MillStableScalaModule extends MillPublishScalaModule with Mima {
+trait MillStableScalaModule extends MillPublishScalaModule /*with Mima*/ {
+  /*
   import com.github.lolgab.mill.mima._
   override def mimaBinaryIssueFilters: T[Seq[ProblemFilter]] = Seq(
     // (5x) MIMA doesn't properly ignore things which are nested inside other private things
@@ -716,7 +717,7 @@ trait MillStableScalaModule extends MillPublishScalaModule with Mima {
   def skipPreviousVersions: T[Seq[String]] = T {
     T.log.info("Skipping mima for previous versions (!!1000s of errors due to Scala 3)")
     mimaPreviousVersions() // T(Seq.empty[String])
-  }
+  }*/
 }
 
 trait MillPublishCrossScalaModule extends MillPublishJavaModule with CrossScalaModule
@@ -749,10 +750,10 @@ trait BridgeModule extends MillPublishCrossScalaModule {
   )
 
   def compilerBridgeSourceJars: T[Agg[PathRef]] = Task {
-    resolveDeps(
-      Task.Anon { compilerBridgeIvyDeps().map(bindDependency()) },
+    defaultResolver().classpath(
+      compilerBridgeIvyDeps(),
       sources = true
-    )()
+    )
   }
 
   def generatedSources = Task {
diff --git a/contrib/package.mill b/contrib/package.mill
index cc7f38c2ec7..97356a39a96 100644
--- a/contrib/package.mill
+++ b/contrib/package.mill
@@ -3,13 +3,12 @@ package build.contrib
 import scala.util.chaining._
 import coursier.maven.MavenRepository
 import mill._
-import mill.api.JarManifest
 import mill.main.Tasks
 import mill.scalalib._
-import mill.scalalib.api.ZincWorkerUtil
+import mill.scalalib.api.JvmWorkerUtil
 import mill.scalalib.publish._
 import mill.util.Jvm
-import mill.resolve.SelectMode
+import mill.define.SelectMode
 import mill.contrib.buildinfo.BuildInfo
 import mill.T
 import mill.define.Cross
@@ -29,10 +28,10 @@ import $meta._
  */
 object `package` extends RootModule {
   def contribModules: Seq[ContribModule] =
-    millInternal.modules.collect { case m: ContribModule => m }
+    moduleInternal.modules.collect { case m: ContribModule => m }
 
   trait ContribModule extends build.MillPublishScalaModule {
-    def readme = Task.Source(millSourcePath / "readme.adoc")
+    def readme = Task.Source(moduleDir / "readme.adoc")
   }
 
   object testng extends JavaModule with ContribModule {
@@ -85,9 +84,9 @@ object `package` extends RootModule {
     object worker extends Cross[WorkerModule](build.Deps.play.keys.toSeq)
     trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
       def playBinary = crossValue
-      def millSourcePath: os.Path = super.millSourcePath / playBinary
+      def moduleDir: os.Path = super.moduleDir / playBinary
 
-      def sharedSources = Task.Sources(millSourcePath / os.up / "src-shared")
+      def sharedSources = Task.Sources(moduleDir / os.up / "src-shared")
       def sources = Task {
         // We want to avoid duplicating code as long as the Play APIs allow.
         // But if newer Play versions introduce incompatibilities,
@@ -140,7 +139,7 @@ object `package` extends RootModule {
           build.Deps.scalacScoverage2Reporter,
           build.Deps.scalacScoverage2Domain,
           build.Deps.scalacScoverage2Serializer
-        ) ++ Agg.when(!ZincWorkerUtil.isScala3(scalaVersion()))(build.Deps.scalacScoverage2Plugin)
+        ) ++ Option.when(!JvmWorkerUtil.isScala3(scalaVersion()))(build.Deps.scalacScoverage2Plugin)
       }
       def mandatoryIvyDeps = Agg.empty[Dep]
     }
diff --git a/core/codesig/package.mill b/core/codesig/package.mill
index e49f218f4be..9d03aa073f3 100644
--- a/core/codesig/package.mill
+++ b/core/codesig/package.mill
@@ -18,8 +18,8 @@ object `package` extends RootModule with build.MillPublishScalaModule {
   override lazy val test: CodeSigTests = new CodeSigTests {}
   trait CodeSigTests extends MillScalaTests {
     val caseKeys = build.interp.watchValue(
-      os.walk(millSourcePath / "cases", maxDepth = 3)
-        .map(_.subRelativeTo(millSourcePath / "cases").segments)
+      os.walk(moduleDir / "cases", maxDepth = 3)
+        .map(_.subRelativeTo(moduleDir / "cases").segments)
         .collect { case Seq(a, b, c) => s"$a-$b-$c" }
     )
 
@@ -45,7 +45,7 @@ object `package` extends RootModule with build.MillPublishScalaModule {
       def moduleDeps = Seq(external)
 
       val Array(prefix, suffix, rest) = caseName.split("-", 3)
-      def millSourcePath = super.millSourcePath / prefix / suffix / rest
+      def moduleDir = super.moduleDir / prefix / suffix / rest
       def scalaVersion = build.Deps.scalaVersion
       def ivyDeps = Task {
         if (!caseName.contains("realistic") && !caseName.contains("sourcecode")) super.ivyDeps()
diff --git a/dist/package.mill b/dist/package.mill
index fe1677bee26..5d50853b10b 100644
--- a/dist/package.mill
+++ b/dist/package.mill
@@ -2,15 +2,14 @@ package build.dist
 import mill._, scalalib._, publish._
 import mill.define.ModuleRef
 import mill.util.Jvm
-import mill.api.JarManifest
-import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
 
 import scala.util.Using
 
 trait InstallModule extends build.MillPublishJavaModule {
   // All modules that we want to aggregate as part of this `dev` assembly.
   // Excluding itself, and the `dist` module that uses it
-  lazy val allPublishModules = build.millInternal.modules.collect {
+  lazy val allPublishModules = build.moduleInternal.modules.collect {
     case m: PublishModule if (m ne build.dist) && (m ne build.dist.native) => m
   }
   def moduleDeps = Seq(build.runner, build.idea, build.main.init)
@@ -46,7 +45,7 @@ trait InstallModule extends build.MillPublishJavaModule {
         (os.home / ".cache/mill/download" / (build.millVersion() + cacheBinarySuffix + batExt)).toString()
       )
     )()
-    Task.log.outputStream.println(path.toString())
+    Task.log.streams.out.println(path.toString())
     PathRef(path)
   }
 
@@ -188,10 +187,10 @@ object `package` extends RootModule with InstallModule {
         val wd = os.Path(wd0, Task.workspace)
         os.makeDir.all(wd)
         try {
-          Jvm.runSubprocess(
+          os.call(
             Seq(launcher().path.toString) ++ rest,
-            forkEnv(),
-            workingDir = wd
+            env = forkEnv(),
+            cwd = wd
           )
           mill.api.Result.Success(())
         } catch {
@@ -236,7 +235,7 @@ object `package` extends RootModule with InstallModule {
   def examplePathsWithArtifactName: Task[Seq[(os.Path, String)]] = Task.Anon {
     for {
       exampleMod <- build.example.exampleModules
-      path = exampleMod.millSourcePath
+      path = exampleMod.moduleDir
     } yield {
       val example = path.subRelativeTo(Task.workspace)
       val artifactName = example.segments.mkString("-")
@@ -268,6 +267,7 @@ object `package` extends RootModule with InstallModule {
   }
 
   def uploadToGithub(authKey: String) = Task.Command {
+    /*
     val vcsState = VcsVersion.vcsState()
     val label = vcsState.copy(dirtyHash = None).format()
     if (label != build.millVersion()) sys.error("Modified mill version detected, aborting upload")
@@ -284,7 +284,7 @@ object `package` extends RootModule with InstallModule {
         headers = Seq("Authorization" -> ("token " + authKey))
       )
     }
-
+    */
     ()
   }
 
@@ -323,7 +323,7 @@ object `package` extends RootModule with InstallModule {
         out.write(os.read.bytes(assembly().path))
       }
 
-      if (!mill.main.client.Util.isWindows) os.perms.set(executable, "rwxrwxrwx")
+      if (!mill.constants.Util.isWindows) os.perms.set(executable, "rwxrwxrwx")
 
       PathRef(executable)
     }
diff --git a/example/package.mill b/example/package.mill
index 12ec7e60fdf..91ec73d01c3 100644
--- a/example/package.mill
+++ b/example/package.mill
@@ -3,13 +3,12 @@ package build.example
 import scala.util.chaining._
 import coursier.maven.MavenRepository
 import mill._
-import mill.api.JarManifest
 import mill.main.Tasks
 import mill.scalalib._
-import mill.scalalib.api.ZincWorkerUtil
+import mill.scalalib.api.JvmWorkerUtil
 import mill.scalalib.publish._
 import mill.util.Jvm
-import mill.resolve.SelectMode
+import mill.define.SelectMode
 import mill.contrib.buildinfo.BuildInfo
 import mill.T
 import mill.define.Cross
@@ -18,117 +17,117 @@ import mill.define.Cross
 import $meta._
 
 object `package` extends RootModule with Module {
-  def exampleModules: Seq[ExampleCrossModule] = millInternal
+  def exampleModules: Seq[ExampleCrossModule] = moduleInternal
     .modules
     .collect { case m: ExampleCrossModule => m }
 
   object android extends Module {
     object javalib
-        extends Cross[ExampleCrossModuleAndroid](build.listIn(millSourcePath / "javalib"))
+        extends Cross[ExampleCrossModuleAndroid](build.listIn(moduleDir / "javalib"))
     object kotlinlib
-        extends Cross[ExampleCrossModuleAndroid](build.listIn(millSourcePath / "kotlinlib"))
+        extends Cross[ExampleCrossModuleAndroid](build.listIn(moduleDir / "kotlinlib"))
   }
   object javalib extends Module {
 
-    object basic extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "basic"))
-    object module extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "module"))
+    object basic extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "basic"))
+    object module extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "module"))
     object dependencies
-        extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "dependencies"))
-    object testing extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "testing"))
-    object linting extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "linting"))
+        extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "dependencies"))
+    object testing extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "testing"))
+    object linting extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "linting"))
     object publishing
-        extends Cross[ExampleCrossModuleJava](build.listIn(millSourcePath / "publishing"))
-    object web extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "web"))
+        extends Cross[ExampleCrossModuleJava](build.listIn(moduleDir / "publishing"))
+    object web extends Cross[ExampleCrossModule](build.listIn(moduleDir / "web"))
   }
   object kotlinlib extends Module {
-    object basic extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "basic"))
-    object module extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "module"))
+    object basic extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "basic"))
+    object module extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "module"))
     object dependencies
-        extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "dependencies"))
-    object testing extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "testing"))
-    object linting extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "linting"))
+        extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "dependencies"))
+    object testing extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "testing"))
+    object linting extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "linting"))
     object publishing
-        extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "publishing"))
-    object web extends Cross[ExampleCrossModuleKotlin](build.listIn(millSourcePath / "web"))
+        extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "publishing"))
+    object web extends Cross[ExampleCrossModuleKotlin](build.listIn(moduleDir / "web"))
   }
   object scalalib extends Module {
-    object basic extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "basic"))
-    object module extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "module"))
+    object basic extends Cross[ExampleCrossModule](build.listIn(moduleDir / "basic"))
+    object module extends Cross[ExampleCrossModule](build.listIn(moduleDir / "module"))
     object dependencies
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "dependencies"))
-    object testing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "testing"))
-    object linting extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "linting"))
-    object publishing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "publishing"))
-    object web extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "web"))
-    object native extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "native"))
-    object spark extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "spark"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "dependencies"))
+    object testing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "testing"))
+    object linting extends Cross[ExampleCrossModule](build.listIn(moduleDir / "linting"))
+    object publishing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "publishing"))
+    object web extends Cross[ExampleCrossModule](build.listIn(moduleDir / "web"))
+    object native extends Cross[ExampleCrossModule](build.listIn(moduleDir / "native"))
+    object spark extends Cross[ExampleCrossModule](build.listIn(moduleDir / "spark"))
   }
 
   object migrating extends Module {
     object javalib
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "javalib"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "javalib"))
     object scalalib
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "scalalib"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "scalalib"))
   }
   object javascriptlib extends Module {
-    object basic extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "basic"))
-    object testing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "testing"))
-    object module extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "module"))
+    object basic extends Cross[ExampleCrossModule](build.listIn(moduleDir / "basic"))
+    object testing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "testing"))
+    object module extends Cross[ExampleCrossModule](build.listIn(moduleDir / "module"))
     object dependencies
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "dependencies"))
-    object publishing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "publishing"))
-    object linting extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "linting"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "dependencies"))
+    object publishing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "publishing"))
+    object linting extends Cross[ExampleCrossModule](build.listIn(moduleDir / "linting"))
   }
   object pythonlib extends Module {
-    object basic extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "basic"))
+    object basic extends Cross[ExampleCrossModule](build.listIn(moduleDir / "basic"))
     object dependencies
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "dependencies"))
-    object linting extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "linting"))
-    object publishing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "publishing"))
-    object module extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "module"))
-    object web extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "web"))
-    object testing extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "testing"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "dependencies"))
+    object linting extends Cross[ExampleCrossModule](build.listIn(moduleDir / "linting"))
+    object publishing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "publishing"))
+    object module extends Cross[ExampleCrossModule](build.listIn(moduleDir / "module"))
+    object web extends Cross[ExampleCrossModule](build.listIn(moduleDir / "web"))
+    object testing extends Cross[ExampleCrossModule](build.listIn(moduleDir / "testing"))
   }
 
   object cli extends Module {
-    object builtins extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "builtins"))
+    object builtins extends Cross[ExampleCrossModule](build.listIn(moduleDir / "builtins"))
   }
 
   object fundamentals extends Module {
 
     object dependencies
-        extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "dependencies"))
-    object tasks extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "tasks"))
-    object modules extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "modules"))
-    object cross extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "cross"))
-    object `out-dir` extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "out-dir"))
-    object libraries extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "libraries"))
+        extends Cross[ExampleCrossModule](build.listIn(moduleDir / "dependencies"))
+    object tasks extends Cross[ExampleCrossModule](build.listIn(moduleDir / "tasks"))
+    object modules extends Cross[ExampleCrossModule](build.listIn(moduleDir / "modules"))
+    object cross extends Cross[ExampleCrossModule](build.listIn(moduleDir / "cross"))
+    object `out-dir` extends Cross[ExampleCrossModule](build.listIn(moduleDir / "out-dir"))
+    object libraries extends Cross[ExampleCrossModule](build.listIn(moduleDir / "libraries"))
   }
 
   object depth extends Module {
 
-    object sandbox extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "sandbox"))
-    object javahome extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "javahome"))
+    object sandbox extends Cross[ExampleCrossModule](build.listIn(moduleDir / "sandbox"))
+    object javahome extends Cross[ExampleCrossModule](build.listIn(moduleDir / "javahome"))
   }
   object large extends Module {
 
-    object selective extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "selective"))
-    object multifile extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "multifile"))
-    object multilang extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "multilang"))
+    object selective extends Cross[ExampleCrossModule](build.listIn(moduleDir / "selective"))
+    object multifile extends Cross[ExampleCrossModule](build.listIn(moduleDir / "multifile"))
+    object multilang extends Cross[ExampleCrossModule](build.listIn(moduleDir / "multilang"))
   }
 
   object extending extends Module {
-    object imports extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "imports"))
-    object metabuild extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "metabuild"))
-    object plugins extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "plugins"))
-    object jvmcode extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "jvmcode"))
-    object python extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "python"))
-    object typescript extends Cross[ExampleCrossModule](build.listIn(millSourcePath / "typescript"))
+    object imports extends Cross[ExampleCrossModule](build.listIn(moduleDir / "imports"))
+    object metabuild extends Cross[ExampleCrossModule](build.listIn(moduleDir / "metabuild"))
+    object plugins extends Cross[ExampleCrossModule](build.listIn(moduleDir / "plugins"))
+    object jvmcode extends Cross[ExampleCrossModule](build.listIn(moduleDir / "jvmcode"))
+    object python extends Cross[ExampleCrossModule](build.listIn(moduleDir / "python"))
+    object typescript extends Cross[ExampleCrossModule](build.listIn(moduleDir / "typescript"))
   }
 
   trait ExampleCrossModuleKotlin extends ExampleCrossModuleJava {
 
-    override def lineTransform(line: String) = this.millModuleSegments.parts.last match {
+    override def lineTransform(line: String) = this.moduleSegments.parts.last match {
       case "1-test-suite" => line
           .replace(
             "mill bar.test bar.BarTests.hello",
@@ -153,7 +152,7 @@ object `package` extends RootModule with Module {
       case "publishing" => Some(scalalib.publishing)
       case _ => None
     }
-    val upstreamOpt = upstreamCross(this.millModuleSegments.parts.dropRight(1).last)
+    val upstreamOpt = upstreamCross(this.moduleSegments.parts.dropRight(1).last)
       .flatMap(_.valuesToModules.get(List(crossValue)))
 
     def testRepoRoot = Task {
@@ -219,10 +218,10 @@ object `package` extends RootModule with Module {
 
   trait ExampleCrossModule extends build.integration.IntegrationTestModule {
     // disable scalafix because these example modules don't have sources causing it to misbehave
-    def testRepoSourceRoot: T[PathRef] = Task.Source(millSourcePath)
+    def testRepoSourceRoot: T[PathRef] = Task.Source(moduleDir)
     def testRepoRoot: T[PathRef] = Task { testRepoSourceRoot() }
 
-    def sources0 = Task.Sources(millSourcePath)
+    def sources0 = Task.Sources(moduleDir)
     def sources = Task {
       sources0()
         .flatMap(pathRef => os.walk(pathRef.path))
@@ -251,7 +250,7 @@ object `package` extends RootModule with Module {
 
     def rendered = Task {
       var seenCode = false
-      val examplePath = millSourcePath.subRelativeTo(Task.workspace)
+      val examplePath = moduleDir.subRelativeTo(Task.workspace)
       os.write(
         Task.dest / "example.adoc",
         parsed()
@@ -310,7 +309,7 @@ $txt
     "arrow" -> ("arrow-kt/arrow", "bc9bf92cc98e01c21bdd2bf8640cf7db0f97204a"),
     "ollama-js" -> ("ollama/ollama-js", "99293abe2c7c27ce7e76e8b4a98cae948f00058d")
   )
-  object thirdparty extends Cross[ThirdPartyModule](build.listIn(millSourcePath / "thirdparty"))
+  object thirdparty extends Cross[ThirdPartyModule](build.listIn(moduleDir / "thirdparty"))
   trait ThirdPartyModule extends ExampleCrossModule {
     val (repoPath, repoHash) = repoInfo(crossValue)
     def repoSlug = repoPath.split("/").last
diff --git a/integration/package.mill b/integration/package.mill
index 7a8dcbbc774..db60a89a102 100644
--- a/integration/package.mill
+++ b/integration/package.mill
@@ -3,13 +3,12 @@ package build.integration
 import scala.util.chaining._
 import coursier.maven.MavenRepository
 import mill._
-import mill.api.JarManifest
 import mill.main.Tasks
 import mill.scalalib._
-import mill.scalalib.api.ZincWorkerUtil
+import mill.scalalib.api.JvmWorkerUtil
 import mill.scalalib.publish._
 import mill.util.Jvm
-import mill.resolve.SelectMode
+import mill.define.SelectMode
 import mill.contrib.buildinfo.BuildInfo
 import mill.T
 import mill.define.Cross
@@ -24,7 +23,7 @@ object `package` extends RootModule {
   // and pass `lib`'s compile output back to `test`.
 
   trait IntegrationTestModule extends Cross.Module[String] {
-    def millSourcePath = super.millSourcePath / crossValue
+    def moduleDir = super.moduleDir / crossValue
 
     def moduleDeps = Seq(build.main.test, build.testkit, build.runner)
 
@@ -34,11 +33,11 @@ object `package` extends RootModule {
     def forkEnv: T[Map[String, String]]
     def testExclusive = false
     trait ModeModule extends build.MillBaseTestsModule {
-      override def test(args: String*) = Task.Command(exclusive = testExclusive) {
+      override def testForked(args: String*) = Task.Command(exclusive = testExclusive) {
         testTask(Task.Anon { args }, Task.Anon { Seq.empty[String] })()
       }
 
-      def mode: String = millModuleSegments.parts.last
+      def mode: String = moduleSegments.parts.last
       def scalaVersion = build.Deps.scalaVersion
 
       def forkEnv =
@@ -98,15 +97,15 @@ object `package` extends RootModule {
     }
   }
 
-  object failure extends Cross[IntegrationCrossModule](build.listIn(millSourcePath / "failure"))
-  object feature extends Cross[IntegrationCrossModule](build.listIn(millSourcePath / "feature"))
+  object failure extends Cross[IntegrationCrossModule](build.listIn(moduleDir / "failure"))
+  object feature extends Cross[IntegrationCrossModule](build.listIn(moduleDir / "feature"))
   object invalidation
-      extends Cross[IntegrationCrossModule](build.listIn(millSourcePath / "invalidation"))
-  object ide extends Cross[IdeIntegrationCrossModule](build.listIn(millSourcePath / "ide"))
+      extends Cross[IntegrationCrossModule](build.listIn(moduleDir / "invalidation"))
+  object ide extends Cross[IdeIntegrationCrossModule](build.listIn(moduleDir / "ide"))
   object bootstrap
-      extends Cross[IdeIntegrationCrossModule](build.listIn(millSourcePath / "bootstrap"))
+      extends Cross[IdeIntegrationCrossModule](build.listIn(moduleDir / "bootstrap"))
   object migrating
-      extends Cross[IdeIntegrationCrossModule](build.listIn(millSourcePath / "migrating"))
+      extends Cross[IdeIntegrationCrossModule](build.listIn(moduleDir / "migrating"))
   trait IntegrationCrossModule extends build.MillScalaModule with IntegrationTestModule {
     override def moduleDeps = super[IntegrationTestModule].moduleDeps
     def forkEnv = super.forkEnv() ++ Seq(
diff --git a/main/package.mill b/main/package.mill
index cb221c121e2..9b992abac9d 100644
--- a/main/package.mill
+++ b/main/package.mill
@@ -75,15 +75,10 @@ object `package` extends RootModule with build.MillStableScalaModule with BuildI
           }
         }().toMap
 
-        val result = Lib.resolveDependenciesMetadataSafe(
-          repositories = dist.allRepositories(),
-          Seq(BoundDep(dist.coursierDependency, force = false)),
-          Some(dist.mapDependencies()),
-          dist.resolutionCustomizer(),
-          Some(Task.ctx()),
-          dist.coursierCacheCustomizer()
+        val result = dist.millResolver().resolution(
+          Seq(BoundDep(dist.coursierDependency, force = false))
         )
-        result.getOrThrow.orderedDependencies
+        result.orderedDependencies
           .map(dep => s"${dep.module.repr}:${dep.version}")
           .distinct
           .map(mod => internalToPublishedModuleMap.getOrElse(mod, mod))
diff --git a/mill-build/build.mill b/mill-build/build.mill
index 957d929826d..112f1aaccb8 100644
--- a/mill-build/build.mill
+++ b/mill-build/build.mill
@@ -4,12 +4,12 @@ import mill.scalalib._
 
 object `package` extends MillBuildRootModule {
   override def ivyDeps = Agg(
-    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
-    ivy"com.github.lolgab::mill-mima::0.1.1",
+//    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
+//    ivy"com.github.lolgab::mill-mima::0.1.1",
     ivy"net.sourceforge.htmlcleaner:htmlcleaner:2.29",
     // TODO: implement empty version for ivy deps as we do in import parser
     ivy"com.lihaoyi::mill-contrib-buildinfo:${mill.api.BuildInfo.millVersion}",
-    ivy"com.goyeau::mill-scalafix::0.5.0",
+//    ivy"com.goyeau::mill-scalafix::0.5.0",
     ivy"com.lihaoyi::mill-main-graphviz:${mill.api.BuildInfo.millVersion}",
     // TODO: document, why we have this dependency
     ivy"org.jsoup:jsoup:1.18.1"
diff --git a/scalajslib/package.mill b/scalajslib/package.mill
index ee6663745f9..09b545ca7a5 100644
--- a/scalajslib/package.mill
+++ b/scalajslib/package.mill
@@ -44,7 +44,7 @@ object `package` extends RootModule with build.MillStableScalaModule with BuildI
   object worker extends Cross[WorkerModule]("1")
   trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
     def scalajsWorkerVersion = crossValue
-    def millSourcePath: os.Path = super.millSourcePath / scalajsWorkerVersion
+    def millSourcePath: os.Path = super.moduleDir / scalajsWorkerVersion
     def compileModuleDeps = Seq(build.scalajslib.`worker-api`, build.core.constants, build.core.api)
     def mandatoryIvyDeps = Agg.empty[Dep]
     def compileIvyDeps = super.mandatoryIvyDeps() ++ Agg(
diff --git a/scalalib/package.mill b/scalalib/package.mill
index 7d04d040329..048fe96452e 100644
--- a/scalalib/package.mill
+++ b/scalalib/package.mill
@@ -3,14 +3,13 @@ import scala.util.Properties
 import scala.util.chaining._
 import coursier.maven.MavenRepository
 import mill._
-import mill.api.JarManifest
 import mill.define.NamedTask
 import mill.main.Tasks
 import mill.scalalib._
-import mill.scalalib.api.ZincWorkerUtil
+import mill.scalalib.api.JvmWorkerUtil
 import mill.scalalib.publish._
 import mill.util.Jvm
-import mill.resolve.SelectMode
+import mill.define.SelectMode
 import mill.contrib.buildinfo.BuildInfo
 import mill.T
 import mill.define.Cross
diff --git a/scalanativelib/package.mill b/scalanativelib/package.mill
index a0c2c525a9e..141559d8435 100644
--- a/scalanativelib/package.mill
+++ b/scalanativelib/package.mill
@@ -17,7 +17,7 @@ object `package` extends RootModule with build.MillStableScalaModule {
 
   trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
     def scalaNativeWorkerVersion = crossValue
-    def millSourcePath: os.Path = super.millSourcePath / scalaNativeWorkerVersion
+    def millSourcePath: os.Path = super.moduleDir / scalaNativeWorkerVersion
     def compileModuleDeps = Seq(`worker-api`)
     def compileIvyDeps = scalaNativeWorkerVersion match {
       case "0.5" =>
diff --git a/testkit/package.mill b/testkit/package.mill
index 3b577e29c65..7f45dcaeab6 100644
--- a/testkit/package.mill
+++ b/testkit/package.mill
@@ -12,7 +12,7 @@ object `package` extends RootModule with build.MillPublishScalaModule {
 
   def sources =
     super.sources() ++
-      Seq(PathRef(build.millSourcePath / "mill-build/src"))
+      Seq(PathRef(build.moduleDir / "mill-build/src"))
 
   def forkEnv =
     super.forkEnv() ++ Map("MILL_EXECUTABLE_PATH" -> build.dist.launcher().path.toString())
diff --git a/website/package.mill b/website/package.mill
index b63b7edab38..906167fbbe9 100644
--- a/website/package.mill
+++ b/website/package.mill
@@ -26,7 +26,7 @@ object `package` extends RootModule {
         !ref.path.lastOpt.exists(_.startsWith("dependency_2.13-"))
       }
     def scalaVersion = build.Deps.scalaVersion
-    def moduleDeps = build.millInternal.modules.collect {
+    def moduleDeps = build.moduleInternal.modules.collect {
       case m: build.MillStableScalaModule => m
       case m: JavaModule if m eq build.kotlinlib => m
     }
@@ -40,8 +40,8 @@ object `package` extends RootModule {
   private val antoraExe = if (scala.util.Properties.isWin) "antora.cmd" else "antora"
   def npmBase: T[os.Path] = Task(persistent = true) { Task.dest }
   def prepareAntora(npmDir: os.Path) = {
-    Jvm.runSubprocess(
-      commandArgs = Seq(
+    os.call(
+      cmd = Seq(
         npmExe,
         "--no-audit",
         "install",
@@ -50,8 +50,8 @@ object `package` extends RootModule {
         "gitlab:antora/xref-validator",
         "@antora/lunr-extension@v1.0.0-alpha.6"
       ),
-      envArgs = Map(),
-      workingDir = npmDir
+      env = Map(),
+      cwd = npmDir
     )
   }
 
@@ -63,15 +63,15 @@ object `package` extends RootModule {
     val cmdArgs =
       Seq(s"${npmDir}/node_modules/.bin/${antoraExe}") ++ args
     ctx.log.debug(s"command: ${cmdArgs.mkString("'", "' '", "'")}")
-    Jvm.runSubprocess(
-      commandArgs = cmdArgs,
-      envArgs = Map("CI" -> "true"),
-      workingDir = workDir
+    os.call(
+      cmd = cmdArgs,
+      env = Map("CI" -> "true"),
+      cwd = workDir
     )
     PathRef(workDir / "build/site")
   }
 
-  def source0 = Task.Source(millSourcePath / "docs")
+  def source0 = Task.Source(moduleDir / "docs")
   def projectChangelog = Task.Source(Task.workspace / "changelog.adoc")
   def source = Task {
     os.copy(source0().path, Task.dest, mergeFolders = true)
@@ -84,7 +84,7 @@ object `package` extends RootModule {
     val renderedExamples: Seq[(os.SubPath, PathRef)] =
       Task.traverse(build.example.exampleModules)(m =>
         Task.Anon {
-          (m.millSourcePath.subRelativeTo(build.example.millSourcePath), m.rendered())
+          (m.moduleDir.subRelativeTo(build.example.moduleDir), m.rendered())
         }
       )()
 
@@ -96,7 +96,7 @@ object `package` extends RootModule {
 
     val contribReadmes = Task.traverse(build.contrib.contribModules)(m =>
       Task.Anon {
-        m.millModuleSegments.parts.last -> m.readme()
+        m.moduleSegments.parts.last -> m.readme()
       }
     )()
 
@@ -170,9 +170,9 @@ object `package` extends RootModule {
       (p, i, os.temp(s), os.temp.dir())
     }
 
-    mill.util.Jvm.runSubprocess(
+    mill.util.Jvm.callProcess(
       "mill.main.graphviz.GraphvizTools",
-      visualizeClassPath,
+      classPath = visualizeClassPath.toSeq,
       mainArgs = orderedDiagrams.map { case (p, i, src, dest) =>
         T.log.debug(s"Rendering graphviz: ${p} (${i}) to ${dest}")
         s"$src;$dest;svg"
@@ -185,7 +185,7 @@ object `package` extends RootModule {
 
   }
 
-  def supplementalFiles = Task.Source(millSourcePath / "docs" / "supplemental-ui")
+  def supplementalFiles = Task.Source(moduleDir / "docs" / "supplemental-ui")
 
   /**
    * The doc root ready to be built by antora for the current branch.
@@ -227,7 +227,7 @@ object `package` extends RootModule {
     os.write.over(dest / "antora.yml", (lines ++ newLines).mkString("\n"))
   }
 
-  def blogFolder0 = Task.Source(millSourcePath / "blog")
+  def blogFolder0 = Task.Source(moduleDir / "blog")
   def blogFolder = Task {
     os.copy(blogFolder0().path, Task.dest, mergeFolders = true)
     expandDiagramsInDirectoryAdocFile(Task.dest, mill.main.VisualizeModule.classpath().map(_.path))
@@ -328,21 +328,21 @@ object `package` extends RootModule {
 
   def localPages: T[PathRef] = Task {
     val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
-    Task.log.outputStream.println(
+    Task.log.streams.out.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
   def fastPages: T[PathRef] = Task {
     val pages = generatePages(authorMode = true).apply().apply(Nil)
-    Task.log.outputStream.println(
+    Task.log.streams.out.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
 
   def generatePages(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
-    Task.log.errorStream.println("Creating Antora playbook ...")
+    Task.log.streams.err.println("Creating Antora playbook ...")
     // dependency to sources
     source()
     val docSite = Task.dest
@@ -353,7 +353,7 @@ object `package` extends RootModule {
       data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
       createFolders = true
     )
-    Task.log.errorStream.println("Running Antora ...")
+    Task.log.streams.err.println("Running Antora ...")
     runAntora(
       npmDir = npmBase(),
       workDir = docSite,
@@ -369,12 +369,12 @@ object `package` extends RootModule {
     os.write(siteDir / ".nojekyll", "")
 
     // sanitize devAntora source URLs
-    Task.log.errorStream.println("Sanitizing links ...")
+    Task.log.streams.err.println("Sanitizing links ...")
     sanitizeDevUrls(siteDir, devAntoraSources().path, build.baseDir / "docs", build.baseDir)
 
     // only copy the "api" sub-dir; api docs contains a top-level index.html with we don't want
     val unidocSrc = if (authorMode) site.unidocLocal().path else site.unidocSite().path
-    Task.log.errorStream.println(s"Copying API docs from ${unidocSrc} ...")
+    Task.log.streams.err.println(s"Copying API docs from ${unidocSrc} ...")
     os.copy(unidocSrc, siteDir / "api/latest", createFolders = true)
 
     PathRef(siteDir)
