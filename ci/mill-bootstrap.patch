diff --git a/.github/workflows/autofix.yml b/.github/workflows/autofix.yml
index fff08f9d91e..4b869becf2c 100644
--- a/.github/workflows/autofix.yml
+++ b/.github/workflows/autofix.yml
@@ -10,7 +10,6 @@ jobs:
       - uses: sbt/setup-sbt@v1
 
       - run: |
-          ./mill __.fix + mill.javalib.palantirformat.PalantirFormatModule/ + mill.scalalib.scalafmt.ScalafmtModule/ + mill.kotlinlib.ktlint.KtlintModule/
-          ./mill --meta-level 1 mill.scalalib.scalafmt.ScalafmtModule/
+          ./mill __.fix + mill.javalib.palantirformat.PalantirFormatModule/ + mill.scalalib.scalafmt.ScalafmtModule/scalafmt + mill.kotlinlib.ktlint.KtlintModule/
 
       - uses: autofix-ci/action@551dded8c6cc8a1054039c8bc0b8b48c51dfc6ef
\ No newline at end of file
diff --git a/.github/workflows/run-tests.yml b/.github/workflows/run-tests.yml
index b3d16508f21..01afa62e23c 100644
--- a/.github/workflows/run-tests.yml
+++ b/.github/workflows/run-tests.yml
@@ -305,5 +305,4 @@ jobs:
       java-version: '17'
       buildcmd: |
         set -eux
-        ./mill -i mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll + __.mimaReportBinaryIssues + __.fix --check + mill.javalib.palantirformat.PalantirFormatModule/ --check + mill.kotlinlib.ktlint.KtlintModule/checkFormatAll
-        ./mill -i --meta-level 1 mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll
+        ./mill -i mill.scalalib.scalafmt.ScalafmtModule/scalafmt --check + __.mimaReportBinaryIssues + __.fix --check + mill.javalib.palantirformat.PalantirFormatModule/ --check + mill.kotlinlib.ktlint.KtlintModule/checkFormatAll
diff --git a/build.mill b/build.mill
index bdb428a409b..b016ae330af 100644
--- a/build.mill
+++ b/build.mill
@@ -1,10 +1,10 @@
 package build
 // imports
-import com.github.lolgab.mill.mima.Mima
+//import com.github.lolgab.mill.mima.Mima
 import coursier.maven.MavenRepository
 import coursier.VersionConstraint
-import de.tobiasroeser.mill.vcs.version.VcsVersion
-import com.goyeau.mill.scalafix.ScalafixModule
+import mill.main.VcsVersion
+//import com.goyeau.mill.scalafix.ScalafixModule
 import mill._
 import mill.define.NamedTask
 import mill.main.Tasks
@@ -475,7 +475,7 @@ trait MillPublishJavaModule extends MillJavaModule with PublishModule {
 /**
  * Some custom scala settings and test convenience
  */
-trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModule { outer =>
+trait MillScalaModule extends ScalaModule with MillJavaModule/* with ScalafixModule*/ { outer =>
   def scalaVersion = Deps.scalaVersion
   def scalapVersion: T[String] = Deps.scala2Version
   def scalafixScalaBinaryVersion = T {
@@ -532,8 +532,8 @@ trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModul
     val binaryVersion = JvmWorkerUtil.scalaBinaryVersion(sv)
     val hasModuleDefs = binaryVersion == "2.13" || binaryVersion == "3"
     super.scalacPluginIvyDeps() ++
-      Agg.when(binaryVersion != "3")(Deps.acyclic) ++
-      Agg.when(hasModuleDefs)(Deps.millModuledefsPlugin)
+      Option.when(binaryVersion != "3")(Deps.acyclic) ++
+      Option.when(hasModuleDefs)(Deps.millModuledefsPlugin)
   }
 
   def mandatoryIvyDeps = T {
@@ -541,13 +541,13 @@ trait MillScalaModule extends ScalaModule with MillJavaModule with ScalafixModul
     val binaryVersion = JvmWorkerUtil.scalaBinaryVersion(sv)
     val hasModuleDefs = binaryVersion == "2.13" || binaryVersion == "3"
     super.mandatoryIvyDeps() ++
-      Agg.when(hasModuleDefs)(Deps.millModuledefs)
+      Option.when(hasModuleDefs)(Deps.millModuledefs)
   }
 
   /** Default tests module. */
   lazy val test: MillScalaTests = new MillScalaTests {}
   trait MillScalaTests extends ScalaTests with MillJavaModule with MillBaseTestsModule
-      with ScalafixModule {
+      /*with ScalafixModule*/ {
     def scalafixConfig = T { Some(T.workspace / ".scalafix.conf") }
     def forkArgs = super.forkArgs() ++ outer.testArgs()
     def moduleDeps = outer.testModuleDeps
@@ -589,7 +589,8 @@ trait MillBaseTestsModule extends TestModule {
 trait MillPublishScalaModule extends MillScalaModule with MillPublishJavaModule
 
 /** Publishable module which contains strictly handled API. */
-trait MillStableScalaModule extends MillPublishScalaModule with Mima {
+trait MillStableScalaModule extends MillPublishScalaModule /*with Mima*/ {
+  /*
   import com.github.lolgab.mill.mima._
 //  override def mimaBinaryIssueFilters: T[Seq[ProblemFilter]] = Seq()
 
@@ -623,7 +624,7 @@ trait MillStableScalaModule extends MillPublishScalaModule with Mima {
   def skipPreviousVersions: T[Seq[String]] = T {
     T.log.info("Skipping mima for previous versions (!!1000s of errors due to Scala 3)")
     mimaPreviousVersions() // T(Seq.empty[String])
-  }
+  }*/
 }
 
 trait MillPublishCrossScalaModule extends MillPublishJavaModule with CrossScalaModule
diff --git a/contrib/package.mill b/contrib/package.mill
index f74d8b85c23..0b7b1ba3440 100644
--- a/contrib/package.mill
+++ b/contrib/package.mill
@@ -84,7 +84,7 @@ object `package` extends RootModule {
     object worker extends Cross[WorkerModule](build.Deps.play.keys.toSeq)
     trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
       def playBinary = crossValue
-      def millSourcePath: os.Path = super.millSourcePath / playBinary
+      def moduleDir: os.Path = super.moduleDir / playBinary
 
       def sharedSources = Task.Sources(moduleDir / os.up / "src-shared")
       def sources = Task {
@@ -139,7 +139,7 @@ object `package` extends RootModule {
           build.Deps.scalacScoverage2Reporter,
           build.Deps.scalacScoverage2Domain,
           build.Deps.scalacScoverage2Serializer
-        ) ++ Agg.when(!JvmWorkerUtil.isScala3(scalaVersion()))(build.Deps.scalacScoverage2Plugin)
+        ) ++ Option.when(!JvmWorkerUtil.isScala3(scalaVersion()))(build.Deps.scalacScoverage2Plugin)
       }
       def mandatoryIvyDeps = Agg.empty[Dep]
     }
diff --git a/core/codesig/package.mill b/core/codesig/package.mill
index ca5682c2761..9d03aa073f3 100644
--- a/core/codesig/package.mill
+++ b/core/codesig/package.mill
@@ -45,7 +45,7 @@ object `package` extends RootModule with build.MillPublishScalaModule {
       def moduleDeps = Seq(external)
 
       val Array(prefix, suffix, rest) = caseName.split("-", 3)
-      def millSourcePath = super.millSourcePath / prefix / suffix / rest
+      def moduleDir = super.moduleDir / prefix / suffix / rest
       def scalaVersion = build.Deps.scalaVersion
       def ivyDeps = Task {
         if (!caseName.contains("realistic") && !caseName.contains("sourcecode")) super.ivyDeps()
diff --git a/dist/package.mill b/dist/package.mill
index 38733006024..9d9d3fcf73c 100644
--- a/dist/package.mill
+++ b/dist/package.mill
@@ -2,7 +2,7 @@ package build.dist
 import mill._, scalalib._, publish._
 import mill.define.ModuleRef
 import mill.util.Jvm
-import de.tobiasroeser.mill.vcs.version.VcsVersion
+//import de.tobiasroeser.mill.vcs.version.VcsVersion
 
 import scala.util.Using
 
@@ -45,7 +45,7 @@ trait InstallModule extends build.MillPublishJavaModule {
         (os.home / ".cache/mill/download" / (build.millVersion() + cacheBinarySuffix + batExt)).toString()
       )
     )()
-    Task.log.outputStream.println(path.toString())
+    Task.log.streams.out.println(path.toString())
     PathRef(path)
   }
 
@@ -267,6 +267,7 @@ object `package` extends RootModule with InstallModule {
   }
 
   def uploadToGithub(authKey: String) = Task.Command {
+    /*
     val vcsState = VcsVersion.vcsState()
     val label = vcsState.copy(dirtyHash = None).format()
     if (label != build.millVersion()) sys.error("Modified mill version detected, aborting upload")
@@ -283,7 +284,7 @@ object `package` extends RootModule with InstallModule {
         headers = Seq("Authorization" -> ("token " + authKey))
       )
     }
-
+    */
     ()
   }
 
@@ -322,14 +323,14 @@ object `package` extends RootModule with InstallModule {
         out.write(os.read.bytes(assembly().path))
       }
 
-      if (!mill.main.client.Util.isWindows) os.perms.set(executable, "rwxrwxrwx")
+      if (!mill.constants.Util.isWindows) os.perms.set(executable, "rwxrwxrwx")
 
       PathRef(executable)
     }
 
     def nativeImageOptions = Seq("--no-fallback", "--enable-url-protocols=https", "-Os")
 
-    def zincWorker = ModuleRef(JvmWorkerGraalvm)
+    def jvmWorker = ModuleRef(JvmWorkerGraalvm)
 
     object JvmWorkerGraalvm extends JvmWorkerModule {
       def jvmId = build.Settings.graalvmJvmId
diff --git a/integration/package.mill b/integration/package.mill
index bff7bbf4bca..decd732463d 100644
--- a/integration/package.mill
+++ b/integration/package.mill
@@ -23,7 +23,7 @@ object `package` extends RootModule {
   // and pass `lib`'s compile output back to `test`.
 
   trait IntegrationTestModule extends Cross.Module[String] {
-    def millSourcePath = super.millSourcePath / crossValue
+    def moduleDir = super.moduleDir / crossValue
 
     def moduleDeps = Seq(build.main.test, build.testkit, build.runner)
 
@@ -33,7 +33,7 @@ object `package` extends RootModule {
     def forkEnv: T[Map[String, String]]
     def testExclusive = false
     trait ModeModule extends build.MillBaseTestsModule {
-      override def test(args: String*) = Task.Command(exclusive = testExclusive) {
+      override def testForked(args: String*) = Task.Command(exclusive = testExclusive) {
         testTask(Task.Anon { args }, Task.Anon { Seq.empty[String] })()
       }
 
diff --git a/mill-build/build.mill b/mill-build/build.mill
index 6f6c07e7f85..521b6533dd6 100644
--- a/mill-build/build.mill
+++ b/mill-build/build.mill
@@ -8,12 +8,12 @@ object `package` extends MillBuildRootModule {
   def sources = super.sources() ++ sources0()
 
   override def ivyDeps = Agg(
-    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
-    ivy"com.github.lolgab::mill-mima::0.1.1",
+//    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.1",
+//    ivy"com.github.lolgab::mill-mima::0.1.1",
     ivy"net.sourceforge.htmlcleaner:htmlcleaner:2.29",
     // TODO: implement empty version for ivy deps as we do in import parser
     ivy"com.lihaoyi::mill-contrib-buildinfo:${mill.api.BuildInfo.millVersion}",
-    ivy"com.goyeau::mill-scalafix::0.5.0",
+//    ivy"com.goyeau::mill-scalafix::0.5.0",
     ivy"com.lihaoyi::mill-main-graphviz:${mill.api.BuildInfo.millVersion}",
     // TODO: document, why we have this dependency
     ivy"org.jsoup:jsoup:1.18.1"
diff --git a/scalajslib/package.mill b/scalajslib/package.mill
index ee6663745f9..7e448ad1bc1 100644
--- a/scalajslib/package.mill
+++ b/scalajslib/package.mill
@@ -44,7 +44,7 @@ object `package` extends RootModule with build.MillStableScalaModule with BuildI
   object worker extends Cross[WorkerModule]("1")
   trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
     def scalajsWorkerVersion = crossValue
-    def millSourcePath: os.Path = super.millSourcePath / scalajsWorkerVersion
+    def moduleDir: os.Path = super.moduleDir / scalajsWorkerVersion
     def compileModuleDeps = Seq(build.scalajslib.`worker-api`, build.core.constants, build.core.api)
     def mandatoryIvyDeps = Agg.empty[Dep]
     def compileIvyDeps = super.mandatoryIvyDeps() ++ Agg(
diff --git a/scalanativelib/package.mill b/scalanativelib/package.mill
index a0c2c525a9e..2b4a39cb222 100644
--- a/scalanativelib/package.mill
+++ b/scalanativelib/package.mill
@@ -17,7 +17,7 @@ object `package` extends RootModule with build.MillStableScalaModule {
 
   trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
     def scalaNativeWorkerVersion = crossValue
-    def millSourcePath: os.Path = super.millSourcePath / scalaNativeWorkerVersion
+    def moduleDir: os.Path = super.moduleDir / scalaNativeWorkerVersion
     def compileModuleDeps = Seq(`worker-api`)
     def compileIvyDeps = scalaNativeWorkerVersion match {
       case "0.5" =>
diff --git a/website/package.mill b/website/package.mill
index 11f0470ab88..c30c14440e4 100644
--- a/website/package.mill
+++ b/website/package.mill
@@ -336,21 +336,21 @@ object `package` extends RootModule {
 
   def localPages: T[PathRef] = Task {
     val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
-    Task.log.outputStream.println(
+    Task.log.streams.out.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
   def fastPages: T[PathRef] = Task {
     val pages = generatePages(authorMode = true).apply().apply(Nil)
-    Task.log.outputStream.println(
+    Task.log.streams.out.println(
       s"You can browse the pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
     pages
   }
 
   def generatePages(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
-    Task.log.errorStream.println("Creating Antora playbook ...")
+    Task.log.streams.err.println("Creating Antora playbook ...")
     // dependency to sources
     source()
     val docSite = Task.dest
@@ -361,7 +361,7 @@ object `package` extends RootModule {
       data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
       createFolders = true
     )
-    Task.log.errorStream.println("Running Antora ...")
+    Task.log.streams.err.println("Running Antora ...")
     runAntora(
       npmDir = npmBase(),
       workDir = docSite,
@@ -377,12 +377,12 @@ object `package` extends RootModule {
     os.write(siteDir / ".nojekyll", "")
 
     // sanitize devAntora source URLs
-    Task.log.errorStream.println("Sanitizing links ...")
+    Task.log.streams.err.println("Sanitizing links ...")
     sanitizeDevUrls(siteDir, devAntoraSources().path, Task.workspace / "docs", Task.workspace)
 
     // only copy the "api" sub-dir; api docs contains a top-level index.html with we don't want
     val unidocSrc = if (authorMode) site.unidocLocal().path else site.unidocSite().path
-    Task.log.errorStream.println(s"Copying API docs from ${unidocSrc} ...")
+    Task.log.streams.err.println(s"Copying API docs from ${unidocSrc} ...")
     os.copy(unidocSrc, siteDir / "api/latest", createFolders = true)
 
     PathRef(siteDir)
