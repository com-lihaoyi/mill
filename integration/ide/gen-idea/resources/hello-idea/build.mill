package build
import mill.api.Loose.Agg
import mill._
import mill.scalajslib.ScalaJSModule
import mill.scalalib.{Dep, DepSyntax, DeferredGeneratedSourcesModule, JavaModule, TestModule}

trait HelloIdeaModule extends scalalib.ScalaModule {
  def scalaVersion = "2.12.5"
  object test extends ScalaTests with TestModule.Utest {
    override def compileIvyDeps: T[Agg[Dep]] = Agg(
      ivy"org.slf4j:jcl-over-slf4j:1.7.25"
    )
    override def ivyDeps: T[Agg[Dep]] = Agg(
      ivy"org.slf4j:slf4j-api:1.7.25",
      ivy"ch.qos.logback:logback-core:1.2.3"
    )
    override def runIvyDeps: T[Agg[Dep]] = Agg(
      ivy"ch.qos.logback:logback-core:1.2.3",
      ivy"ch.qos.logback:logback-classic:1.2.3"
    )
  }
}

object HelloIdea extends HelloIdeaModule {
  object scala3 extends HelloIdeaModule {
    override def scalaVersion = "3.3.1"
  }
}

object HelloIdeaSourceGen extends scalalib.ScalaModule
    with scalalib.DeferredGeneratedSourcesModule {

  def scalaVersion = "2.12.5"

  def someGeneratedSource = Task(deferredGeneratedSourceRoots = Seq(os.SubPath("scala"))) {
    val contents = """|package foo
                      |
                      |case class GeneratedFoo()
                      |""".stripMargin
    os.write(T.dest / "scala" / "GeneratedFoo.scala", contents)
  }

  /**
   * We're adding a buggy task to check its generated source folders
   * will be configured for Idea even if the task crashes
   */
  def someBuggyGeneratedSource: T[Unit] = T {
    def crash(): Unit = throw new Exception("Boom")
    crash()
  }

  override def deferredGeneratedSourceTasks = List(someGeneratedSource, someBuggyGeneratedSource)
}

object HiddenIdea extends HelloIdeaModule {
  override def skipIdea = true
}

object HelloIdeaJs extends ScalaJSModule {
  override def scalaVersion = "3.3.1"
  override def scalaJSVersion = "1.16.0"
  object test extends ScalaJSTests with TestModule.Utest {
    override def ivyDeps: T[Agg[Dep]] = Agg(
      ivy"com.lihaoyi::utest::0.8.5"
    )
  }
}

object moduleA extends JavaModule
object moduleB extends JavaModule {
  override def moduleDeps = Seq(moduleA)
}
object moduleC extends JavaModule {
  override def moduleDeps = Seq(moduleB)
  override def compileModuleDeps = Seq(moduleE)
}
object moduleD extends JavaModule {
  override def compileModuleDeps = Seq(moduleC)
}
object moduleE extends JavaModule
object moduleF extends JavaModule {
  override def compileModuleDeps = Seq(moduleC)
  override def moduleDeps = Seq(moduleB, moduleA)
}
