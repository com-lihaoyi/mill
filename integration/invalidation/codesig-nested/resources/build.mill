package build
import mill._

val valueFoo = 0
val valueFooUsedInBar = 0
def helperFoo = { println("running helperFoo"); 1 + valueFoo }
def foo = Task { println("running foo"); helperFoo }

object outer extends Module {
  val valueBar = 0
  val valueBarUsedInQux = 0
  def helperBar = { println("running helperBar"); 20 }
  def bar = Task { println("running bar"); helperBar + valueBar + valueFooUsedInBar }

  trait InnerModule extends Module {
    val valueQux = 0
    def helperQux = { println("running helperQux"); 300 + valueQux + valueBarUsedInQux }
    def qux = Task { println("running qux"); foo() + bar() + helperQux }
  }
  object inner extends InnerModule
}

trait TraitOuter extends Module {
  val valueTraitOuter = 0
  def helperTraitOuter = { println("running helperTraitOuter"); 300 + valueTraitOuter }
  def outer = Task { println("running outer"); foo() + helperTraitOuter }

  object traitInner extends Module {
    val valueTraitInner = 0
    def helperTraitInner = {
      println("running helperTraitInner"); 300 + valueTraitOuter + valueTraitInner
    }
    def inner = Task { println("running inner"); foo() + outer() + helperTraitInner }
  }
}

object traitOuter extends TraitOuter

object crossOuter extends Cross[CrossOuter](1337, 31337, 31415926)
trait CrossOuter extends TraitOuter with Cross.Module[Int] {
  override val valueTraitOuter = crossValue
}
