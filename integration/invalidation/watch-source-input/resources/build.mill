package build
import mill.*
import mill.define.WorkspaceRoot

println("Setting up build.mill")

def foo = Task.Sources("foo1.txt", "foo2.txt")
def bar = Task.Source("bar.txt")

def qux = Task {
  val fooMsg = "Running qux foo contents " + foo().map(p => os.read(p.path)).mkString(" ")
  println(fooMsg)

  val barMsg = "Running qux bar contents " + os.read(bar().path)
  println(barMsg)

  writeCompletionMarker("quxRan")

  fooMsg + " " + barMsg
}

interp.watchValue(PathRef(moduleDir / "watchValue.txt"))

def baz = Task.Input(PathRef(moduleDir / "baz.txt"))

def lol = Task {
  val barMsg = "Running lol baz contents " + os.read(baz().path)
  println(barMsg)

  writeCompletionMarker("lolRan")

  barMsg
}

def writeCompletionMarker(name: String) = {

  os.checker.withValue(os.Checker.Nop) {
    Range(0, 10)
      .map(i => WorkspaceRoot.workspaceRoot / "out" / s"$name$i")
      .find(!os.exists(_))
      .foreach(os.write(_, ""))
  }
}

writeCompletionMarker("initialized")
os.checker.withValue(os.Checker.Nop) {
  if (os.read(moduleDir / "watchValue.txt").contains("exit")) {
    Thread.sleep(1000)
    System.exit(0)
  }
}
