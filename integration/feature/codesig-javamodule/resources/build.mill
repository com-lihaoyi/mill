package build
import mill._, javalib._

object foo extends JavaModule {
  def javacOptions = Seq("-source", "11", "-target", "11")
  def sources = Task {
    println("Foo generating sources...")
    os.write(
      Task.dest / "Foo.java",
      """package foo;
        |
        |import java.util.Collections;
        |import java.util.List;
        |
        |public class Foo {
        |    public static final String fooMsg = "Hello World";
        |
        |    public static List<String> x() {
        |        return Collections.emptyList(); // similar to Scala's `Nil`
        |    }
        |
        |    public static void main(String[] args) {
        |        System.out.println("Foo " + fooMsg);
        |    }
        |}""".stripMargin
    )
    Seq(PathRef(Task.dest))
  }

  def compile = Task {
    println("Foo compiling...")
    super.compile()
  }

  def run(args: Task[Args] = Task.Anon(Args())) = Task.Command {
    println("Foo running..." + args().value.mkString(" "))
    super.run(args)()
  }

  def assembly = Task {
    println("Foo assembly...")
    super.assembly()
  }
}

object bar extends JavaModule {
  def moduleDeps = Seq(foo)

  def sources = Task {
    println("Bar generating sources...")
    os.write(
      Task.dest / "Bar.java",
      """package bar;
        |
        |public class Bar {
        |    public static void main(String[] args) {
        |        System.out.println("Bar " + foo.Foo.fooMsg);
        |    }
        |}""".stripMargin
    )
    Seq(PathRef(Task.dest))
  }

  def compile = Task {
    println("Bar compiling...")
    super.compile()
  }

  def assembly = Task {
    println("Bar assembly...")
    super.assembly()
  }
}

object qux extends JavaModule {

  def sources = Task {
    println("Qux generating sources...")
    os.write(
      Task.dest / "Qux.kava",
      """package qux;
        |
        |public class Qux {
        |    public static void main(String[] args) {
        |        System.out.println("Qux Hello World");
        |    }
        |}""".stripMargin
    )
    Seq(PathRef(Task.dest))
  }

  def compile = Task {
    println("Qux compiling...")
    super.compile()
  }

  def assembly = Task {
    println("Qux assembly...")
    super.assembly()
  }
}
