package build.contrib
// imports
import scala.util.chaining._
import coursier.maven.MavenRepository
import mill._
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.api.JvmWorkerUtil
import mill.scalalib.publish._
import mill.util.Jvm
import mill.define.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross
import build.Deps

/**
 * [[build.contrib]] contains user-contributed Mill plugins that satisfy
 * a range of use cases not covered by the core Mill builtins. `contrib`
 * modules are typically less polished than builtins in [[build.libs.javalib]]
 * or [[build.libs.scalalib]], and do not offer binary or source compatibility
 * guarantees between Mill versions, but provide a place for the community
 * to collaborate on Mill plugins that is more discoverable than individuals
 * hosting their own Github repositories
 */
object `package` extends RootModule {
  def contribModules: Seq[ContribModule] =
    moduleInternal.modules.collect { case m: ContribModule => m }

  trait ContribModule extends build.MillPublishScalaModule {
    def readme = Task.Source("readme.adoc")
  }

  object testng extends JavaModule with ContribModule {

    def transitiveLocalTestOverrides =
      super.transitiveLocalTestOverrides() ++
        Seq(
          build.libs.scalalib.localTestOverride(),
          build.libs.scalalib.worker.localTestOverride(),
          build.libs.testrunner.entrypoint.localTestOverride()
        )

    // pure Java implementation
    def artifactSuffix: T[String] = ""
    def scalaLibraryMvnDeps: T[Agg[Dep]] = Task { Agg.empty[Dep] }
    def mvnDeps = Agg(build.Deps.sbtTestInterface)
    def compileMvnDeps = Agg(build.Deps.testng)
    def runMvnDeps = Agg(build.Deps.testng)
    def testModuleDeps: Seq[JavaModule] = super.testModuleDeps ++ Seq(build.libs.scalalib)
    def docJar: T[PathRef] = super[JavaModule].docJar
  }

  object twirllib extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def testModuleDeps: Seq[JavaModule] = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  object playlib extends ContribModule {
    def moduleDeps = Seq(twirllib, playlib.api)
    def compileModuleDeps = Seq(build.libs.scalalib)

    def transitiveLocalTestOverrides =
      super.transitiveLocalTestOverrides() ++ Task.traverse(
        build.Deps.play.keys.toSeq
      )(worker(_).localTestOverride)()

    def testArgs = Task {
      super.testArgs() ++
        Seq(
          s"-DTEST_PLAY_VERSION_2_6=${build.Deps.Play_2_6.playVersion}",
          s"-DTEST_PLAY_VERSION_2_7=${build.Deps.Play_2_7.playVersion}",
          s"-DTEST_PLAY_VERSION_2_8=${build.Deps.Play_2_8.playVersion}",
          s"-DTEST_PLAY_VERSION_2_9=${build.Deps.Play_2_9.playVersion}",
          s"-DTEST_PLAY_VERSION_3_0=${build.Deps.Play_3_0.playVersion}"
        )
    }

    def testModuleDeps: Seq[JavaModule] = super.testModuleDeps ++ Seq(build.libs.scalalib)

    object api extends build.MillPublishJavaModule

    object worker extends Cross[WorkerModule](build.Deps.play.keys.toSeq)
    trait WorkerModule extends build.MillPublishScalaModule with Cross.Module[String] {
      def playBinary = crossValue
      def moduleDir: os.Path = super.moduleDir / playBinary

      def sharedSources = Task.Sources(moduleDir / os.up / "src-shared")
      def sources = Task {
        // We want to avoid duplicating code as long as the Play APIs allow.
        // But if newer Play versions introduce incompatibilities,
        // just remove the shared source dir for that worker and implement directly.
        sharedSources() ++ super.sources()
      }

      def scalaVersion = build.Deps.play(playBinary).scalaVersion
      def moduleDeps = Seq(playlib.api)
      def mvnDeps = Agg(build.Deps.osLib, build.Deps.play(playBinary).routesCompiler)
    }
  }

  object scalapblib extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  object scoverage extends ContribModule {
    object api extends build.MillPublishJavaModule

    def moduleDeps = Seq(scoverage.api)
    def compileModuleDeps = Seq(build.libs.scalalib)

    def transitiveLocalTestOverrides =
      super.transitiveLocalTestOverrides() ++ Seq(worker2.localTestOverride())

    def testArgs = Task {
      super.testArgs() ++
        Seq(
          s"-DMILL_SCOVERAGE2_VERSION=${build.Deps.scalacScoverage2Plugin.version}"
        )
    }

    // So we can test with buildinfo in the classpath
    def testModuleDeps =
      super.testModuleDeps ++
        Seq(
          build.libs.scalalib,
          build.libs.scalajslib,
          build.libs.scalanativelib,
          build.contrib.buildinfo
        )

    // Worker for Scoverage 2.0
    object worker2 extends build.MillPublishScalaModule {
      def localTestOverridePaths = Task { Seq(compile().classes) }
      def compileModuleDeps = Seq(
        build.core.api,
        scoverage.api
      )
      def compileMvnDeps = Task {
        super.mandatoryMvnDeps() ++ Agg(
          // compile-time only, need to provide the correct scoverage version at runtime
          build.Deps.scalacScoverage2Reporter,
          build.Deps.scalacScoverage2Domain,
          build.Deps.scalacScoverage2Serializer
        ) ++ Option.when(!JvmWorkerUtil.isScala3(scalaVersion()))(build.Deps.scalacScoverage2Plugin)
      }
      def mandatoryMvnDeps = Agg.empty[Dep]
    }
  }

  object buildinfo extends ContribModule {
    def compileModuleDeps =
      Seq(
        build.libs.scalalib,
        build.libs.scalajslib,
        build.libs.scalanativelib,
        build.libs.kotlinlib
      )
    def testModuleDeps =
      super.testModuleDeps ++ Seq(
        build.libs.scalalib,
        build.libs.scalajslib,
        build.libs.scalanativelib,
        build.libs.kotlinlib
      )
  }

  object proguard extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  object flyway extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.flywayCore)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  object docker extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  // object bloop extends ContribModule with BuildInfo {
  //   def compileModuleDeps = Seq(build.libs.scalalib, build.libs.scalajslib, build.libs.scalanativelib)
  //   def mvnDeps = Agg(build.Deps.bloopConfig.exclude("*" -> s"jsoniter-scala-core_2.13"))
  //   def testModuleDeps = super.testModuleDeps ++ Seq(
  //     build.libs.scalalib,
  //     build.libs.scalajslib,
  //     build.libs.scalanativelib
  //   )
  //
  //   def buildInfoPackageName = "mill.contrib.bloop"
  //   def buildInfoObjectName = "Versions"
  //   def buildInfoMembers = Seq(BuildInfo.Value("bloop", build.Deps.bloopConfig.version))
  // }

  object artifactory extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.requests)
  }

  object codeartifact extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.requests)
  }

  object sonatypecentral extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.sonatypeCentralClient)
  }

  object versionfile extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
  }

  object bintray extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.requests)
  }

  object gitlab extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def mvnDeps = Agg(build.Deps.requests, build.Deps.osLib)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }

  object jmh extends ContribModule {
    def compileModuleDeps = Seq(build.libs.scalalib)
    def testModuleDeps = super.testModuleDeps ++ Seq(build.libs.scalalib)
  }
}
