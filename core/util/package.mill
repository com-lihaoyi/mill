package build.core.util
import mill._
import mill.contrib.buildinfo.BuildInfo
import mill.scalalib._
import millbuild.*

/**
 * Utility code that is used in both `mill-runner` and `build.mill`, but cannot
 * be part of the interface between the two classloader environments to ensure
 * isolation between them
 */
object `package` extends MillStableScalaModule with BuildInfo {
  def moduleDeps = Seq(build.core.api, build.core.constants, build.core.define)

  def mvnDeps = Seq(
    Deps.coursier,
    Deps.coursierJvm,
    Deps.jline,
    Deps.mainargs,
    Deps.requests
  )

  def buildInfoPackageName = "mill.util"

  // Inlining this method below currently triggers an error like
  // java.lang.IllegalArgumentException: Could not find proxy for â€¦
  private def distAllDeps = build.dist +: build.dist.recursiveModuleDeps

  def buildInfoMembers = Seq(
    BuildInfo.Value(
      "workerScalaVersion212",
      Deps.workerScalaVersion212,
      "Scala 2.12 version used by some workers."
    ),
    BuildInfo.Value(
      "workerScalaVersion213",
      Deps.scala2Version,
      "Scala 2.13 version used by some workers."
    ),
    BuildInfo.Value("scalaVersion", scalaVersion(), "Scala version used to compile mill core."),
    BuildInfo.Value("millVersion", build.millVersion(), "Mill version."),
    BuildInfo.Value("millBinPlatform", build.millBinPlatform(), "Mill binary platform version."),
    BuildInfo.Value(
      "millAllDistDependencies", {
        // Maps internal modules from JavaModule#coursierDependency (like 'mill-internal:thing:0+mill-internal')
        // to actual coordinates used for publishing (like 'com.lihaoyi:mill-thing:0.13.1')
        val internalToPublishedModuleMap = Task.traverse(
          distAllDeps.collect { case m: PublishModule => m }
        ) { mod =>
          Task.Anon {
            val selfDep = mod.artifactMetadata()
            (
              s"${mod.coursierDependency.module.repr}:${mod.coursierDependency.versionConstraint.asString}",
              s"${selfDep.group}:${selfDep.id}:${selfDep.version}"
            )
          }
        }().toMap

        val result = build.dist.millResolver().resolution(
          Seq(BoundDep(build.dist.coursierDependency, force = false))
        )
        result.orderedDependencies
          .map(dep => s"${dep.module.repr}:${dep.versionConstraint.asString}")
          .distinct
          .map(mod => internalToPublishedModuleMap.getOrElse(mod, mod))
          .mkString(",")
      },
      "All Mill distribution dependencies"
    ),
    BuildInfo.Value(
      "millScalacPluginDeps",
      Deps.millModuledefsString,
      "Scalac compiler plugin dependencies to compile the build script."
    )
  )
}
