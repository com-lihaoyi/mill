package build.dist.scripts

import java.nio.file.attribute.PosixFilePermission
import java.util.regex.Pattern

import mill.*
import mill.scalalib.*
import mill.api.Result
import millbuild.*

object `package` extends mill.Module { scripts =>

  trait BootstrapScriptModule extends Module {
    override def moduleDir = scripts.moduleDir
    def templateFile: T[PathRef]
    def finalName: T[String]
    def substitutions: T[Map[String, String]] = Map(
      "mill-version" -> build.millVersionTruth(),
      "mill-repo-url" -> Settings.projectUrl,
      "mill-maven-url" -> Settings.mavenRepoUrl,
      "mill-best-version" -> "0.12.10", // TODO: build.millVersionTruth()
      "mill-download-cache-unix" -> "~/.cache/mill/download",
      "mill-download-cache-win" -> "%USERPROFILE%\\\\.mill\\\\download",
      "template-file" -> templateFile().path.relativeTo(Task.workspace).toString
    )
    def substitutionMarkers: T[(String, String)] = ("{{{", "}}}")
    def inRepoDir: Task[os.SubPath] = Task.Anon { os.sub / finalName() }

    /** Compiles the script from the [[templateFile]] and substitutes all [[substitutions]]. */
    def compile0: T[PathRef] = Task {
      val script = Task.dest / finalName()
      val template = templateFile().path
      val (start, end) = substitutionMarkers()

      def pattern(key: String, quote: Boolean = true) =
        s"""\\Q${start}\\E\\s*${if (quote) Pattern.quote(key) else key}\\s*\\Q${end}\\E""".r
      val findAndReplace = substitutions().map((key, value) => (pattern(key), value))
      val missing = pattern("[\\w+-_ ]+", false)

      def substitute(line: String): String = {
        val result = findAndReplace.foldLeft(line) { (line, r) =>
          r._1.replaceAllIn(line, r._2)
        }
        missing.findFirstIn(result).foreach(m =>
          throw RuntimeException(s"Detected unmatched substitution block: ${m}")
        )
        result
      }

      assert(os.exists(template))
      Task.log.streams.out.println(s"Compiling script ${script}")
      os.write(
        target = script,
        data = os.read.lines.stream(template).map(substitute).map(_ + '\n')
      )
      if (!scala.util.Properties.isWin) {
        val p = os.perms(script) +
          PosixFilePermission.OWNER_EXECUTE +
          PosixFilePermission.GROUP_EXECUTE +
          PosixFilePermission.OTHERS_EXECUTE
        os.perms.set(script, p)
      }
      PathRef(script)
    }
  }

  object millSh extends BootstrapScriptModule {
    def templateFile = Task.Source("src/mill.sh")
    def finalName = "mill"
  }
  object millBat extends BootstrapScriptModule {
    def templateFile = Task.Source("src/mill.bat")
    def finalName = "mill.bat"
  }

  object test extends ScalaModule with TestModule.Utest {
    def scalaVersion = millbuild.Deps.scalaVersion
    def mvnDeps = Seq(millbuild.Deps.osLib, millbuild.Deps.pprint)
    def utestVersion = millbuild.Deps.TestDeps.utest.version
    def forkEnv = Map(
      "MILL_TEST_SH_SCRIPT" -> millSh.compile0().path.toString,
      "MILL_TEST_BAT_SCRIPT" -> millBat.compile0().path.toString,
      "MILL_NATIVE_SUFFIX" -> build.dist.native.nativeSuffix()
    )
  }
  def scriptsModules: Seq[BootstrapScriptModule] = Seq(millSh, millBat)

  def installInRepo(): Command[Unit] = Task.Command {
    Task.traverse(scriptsModules)(m =>
      Task.Anon {
        val script = m.compile0().path
        val dest = Task.workspace / m.inRepoDir()
        if (os.isDir(dest)) {
          sys.error(s"Install destination is a directory: ${dest}")
        } else if (os.exists(dest)) {
          Task.log.warn(s"Overwriting file: ${dest}")
        }
        Task.log.info(s"Installing script: ${dest}")
        os.copy.over(script, dest)
        Result.Success(dest)

      }
    )().map(path => PathRef(path).withRevalidateOnce)
  }
}
