package build.dist

import mill.*
import scalalib.*
import publish.*
import mill.api.ModuleRef
import mill.util.Jvm
//import de.tobiasroeser.mill.vcs.version.VcsVersion
import millbuild.*
import mill.api.BuildCtx
import scala.util.Using

trait DistModule extends Module {
  // All modules that we want to aggregate as part of this `dev` assembly.
  // Excluding itself, and the `dist` module that uses it
  lazy val allPublishModules = build.moduleInternal.modules.collect {
    case m: MillPublishJavaModule => m
  }

  def executableRaw: T[PathRef]

  def executable = Task {
    Task.traverse(allPublishModules)(m => m.publishLocal(doc = false))()
    executableRaw()
  }

  def localBinName: String

  def cacheBinarySuffix: Task[String] = Task.Anon("")

  /**
   * Build and install Mill locally.
   *
   * @param binFile The location where the Mill binary should be installed
   * @param ivyRepo The local Ivy repository where Mill modules should be published to
   */
  def installLocal(binFile: String = localBinName, ivyRepo: String = null) =
    Task.Command {
      PathRef(installLocalTask(Task.Anon(binFile), ivyRepo)())
    }

  val batExt = if (scala.util.Properties.isWin) ".bat" else ""

  def installLocalCachePath(suffixTask: Task[String]) = Task.Anon {
    (os.home / ".cache/mill/download" / (build.millVersion() + suffixTask() + batExt)).toString()
  }

  def installLocalCache() = Task.Command {
    val path = installLocalTask(installLocalCachePath(build.dist.cacheBinarySuffix))()
    val path2 = installLocalTask(installLocalCachePath(build.dist.native.cacheBinarySuffix))()

    Task.log.streams.out.println(path.toString())
    PathRef(path)
  }

  def installLocalTask(binFile: Task[String], ivyRepo: String = null): Task[os.Path] = Task.Anon {
    val targetFile = os.Path(binFile(), BuildCtx.workspaceRoot)
    if (os.exists(targetFile))
      Task.log.info(s"Overwriting existing local Mill binary at ${targetFile}")
    os.copy.over(executable().path, targetFile, createFolders = true)
    Task.log.info(
      s"Published ${build.dist.allPublishModules.size} modules and installed ${targetFile}"
    )
    targetFile
  }

  def artifactName: T[String]
  def artifact = Task { Artifact(Settings.pomOrg, artifactName(), build.millVersion()) }
  def pomSettings = Task { MillPublishJavaModule.commonPomSettings(artifactName()) }

  def artifactFileNamePrefix = Task { s"${artifactName()}-${build.millVersion()}" }
  def pom: T[PathRef] = Task {
    val pom = Pom(
      artifact = artifact(),
      dependencies = Nil,
      name = artifactName(),
      pomSettings = pomSettings(),
      properties = Map(),
      packagingType = "jar",
      parentProject = None,
      bomDependencies = Nil,
      dependencyManagement = Nil
    )
    val pomPath = Task.dest / s"${artifactFileNamePrefix()}.pom"
    os.write.over(pomPath, pom)
    PathRef(pomPath)
  }

  def publishArtifacts = Task {
    PublishModule.PublishData(
      meta = artifact(),
      payload = Seq(
        executableRaw() -> s"${artifactFileNamePrefix()}.exe",
        pom() -> s"${artifactFileNamePrefix()}.pom"
      )
    )
  }
}

object `package` extends MillJavaModule with DistModule {

  def moduleDeps = Seq(build.runner.launcher)

  def transitiveLocalTestOverrides = Map(
    Task.traverse(allPublishModules)(_.localTestOverride)()*
  )

  def localBinName = "mill-assembly.jar"

  private def millClientJvmArgs = Seq(
    // Avoid reserving a lot of memory for the client, as the client only forward information
    "-Xmx128m"
  )

  def launcher = Task {
    val isWin = scala.util.Properties.isWin
    val outputPath = Task.dest / (if (isWin) "run.bat" else "run")

    val launcherForkArgs = testArgs()
    val (millArgs, otherArgs) =
      launcherForkArgs.partition(arg =>
        arg.startsWith("-DMILL") && !arg.startsWith("-DMILL_VERSION")
      )

    // Pass Mill options via file, due to small max args limit in Windows
    val vmOptionsFile = Task.dest / "mill.properties"
    val millOptionsContent = millArgs
      .map(_.drop(2).replace("\\", "/")) // drop -D prefix, replace \ with /
      .mkString("\r\n")

    os.write(vmOptionsFile, millOptionsContent)
    val jvmArgs = otherArgs ++ millClientJvmArgs ++ List(
      s"-DMILL_OPTIONS_PATH=$vmOptionsFile"
    )
    val classpath = runClasspath().map(_.path.toString)
    val classpathJar = Task.dest / "classpath.jar"
    Jvm.createClasspathPassingJar(classpathJar, runClasspath().map(_.path))

    val script = Jvm.launcherUniversalScript(
      mainClass = mainClass().get,
      shellClassPath = classpath,
      cmdClassPath = Seq(classpathJar.toString()),
      jvmArgs = jvmArgs
    )

    os.write(outputPath, script)

    if (!isWin) os.perms.set(outputPath, "rwxrwxrwx")

    PathRef(outputPath)
  }

  def assemblyRules = super.assemblyRules ++ Seq(
    mill.scalalib.Assembly.Rule.ExcludePattern("mill/local-test-overrides/.*")
  )

  def forkArgs = millClientJvmArgs ++ Seq(
    // Workaround for Zinc/JNA bug
    // https://github.com/sbt/sbt/blame/6718803ee6023ab041b045a6988fafcfae9d15b5/main/src/main/scala/sbt/Main.scala#L130
    "-Djna.nosys=true"
  )

  def mainClass = Some("mill.launcher.MillLauncherMain")

  def executableRaw = Task {
    val filename = if (scala.util.Properties.isWin) "mill.bat" else "mill"
    os.copy(assembly().path, Task.dest / filename)
    PathRef(Task.dest / filename)
  }

  def run(args: Task[Args] = Task.Anon(Args())) = Task.Command(exclusive = true) {
    args().value match {
      case Nil => mill.api.Result.Failure("Need to pass in cwd as first argument to dist.run")
      case wd0 +: rest =>
        val wd = os.Path(wd0, BuildCtx.workspaceRoot)
        os.makeDir.all(wd)
        try {
          os.call(
            cmd = (launcher().path.toString, rest),
            env = forkEnv() ++ build.dist.localTestOverridesEnv(),
            cwd = wd,
            stdin = os.Inherit,
            stdout = os.Inherit,
            stderr = os.Inherit
          )
          mill.api.Result.Success(())
        } catch {
          case e: Throwable =>
            mill.api.Result.Failure(s"dist.run failed with an exception. ${e.getMessage()}")
        }
    }
  }

  def millBootstrap = Task.Source(BuildCtx.workspaceRoot / "mill")
  def millBootstrapBat = Task.Source(BuildCtx.workspaceRoot / "mill.bat")

  def prepareBootstrapLauncher(
      bootstrap: os.Path,
      dest: os.Path,
      buildVersion: String,
      fileName: String
  ) = {
    val outputPath = dest / fileName
    val millBootstrapGrepPrefix = "(\n *DEFAULT_MILL_VERSION=)"

    os.write(
      outputPath,
      os.read(bootstrap)
        .replaceAll(
          millBootstrapGrepPrefix + "[^\\n]+",
          "$1" + buildVersion
        )
    )

    if (!scala.util.Properties.isWin) os.perms.set(outputPath, "rwxrwxrwx")

    PathRef(outputPath)
  }
  def bootstrapLauncher = Task {
    prepareBootstrapLauncher(millBootstrap().path, Task.dest, build.millVersion(), "mill")
  }
  def bootstrapLauncherBat = Task {
    prepareBootstrapLauncher(millBootstrapBat().path, Task.dest, build.millVersion(), "mill.bat")
  }

  def examplePaths: Task[Seq[os.Path]] = Task.Input {
    build.example.exampleModules.map(_.moduleDir)
  }

  def examplePathRefs: Task[Seq[PathRef]] = Task.Sources(
    build.example.exampleModules.map(_.moduleDir)*
  )

  def exampleArtifactNames = Task {
    for (path <- examplePaths()) yield {
      val example = path.subRelativeTo(BuildCtx.workspaceRoot)
      val artifactName = example.segments.mkString("-")
      (path, s"${build.dist.artifactFileNamePrefix()}-$artifactName")
    }
  }

  def exampleZips: T[Seq[PathRef]] = Task {
    examplePathRefs().zip(exampleArtifactNames()).map {
      case (pr, (examplePath, exampleStr)) =>
        os.copy(pr.path, Task.dest / exampleStr, createFolders = true)
        val ignoreErrorsOnCI = Task.dest / exampleStr / "ignoreErrorsOnCI"
        if (os.exists(ignoreErrorsOnCI)) os.remove(ignoreErrorsOnCI)
        val buildMill = Task.dest / exampleStr / "build.mill"
        os.write.over(buildMill, s"//| mill-version: ${build.millVersion()}\n" + os.read(buildMill))
        os.copy(bootstrapLauncher().path, Task.dest / exampleStr / "mill")
        os.copy(bootstrapLauncherBat().path, Task.dest / exampleStr / "mill.bat")
        val zip = Task.dest / s"$exampleStr.zip"
        os.proc("zip", "-r", zip, exampleStr).call(cwd = Task.dest)
        PathRef(zip)
    }
  }

  def publishArtifacts = Task {
    super.publishArtifacts().copy(payload =
      super.publishArtifacts().payload ++
        exampleZips().map(z => (z, z.path.last)) ++
        Seq(
          (bootstrapLauncher(), s"${artifactFileNamePrefix()}-mill.sh"),
          (bootstrapLauncherBat(), s"${artifactFileNamePrefix()}-mill.bat")
        )
    )
  }

  def artifactName = "mill-" + super.artifactName()

  object native extends mill.scalalib.NativeImageModule with DistModule {
    def finalMainClass = build.dist.finalMainClass()
    def runClasspath = build.dist.runClasspath()
    def artifactOsSuffix = Task {
      val osName = System.getProperty("os.name").toLowerCase
      if (osName.contains("mac")) "mac"
      else if (osName.contains("windows")) "windows"
      else "linux"
    }

    def artifactCpuSuffix = Task {
      System.getProperty("os.arch") match {
        case "x86_64" => "amd64"
        case s => s
      }
    }

    def nativeSuffix = Task { s"${artifactOsSuffix()}-${artifactCpuSuffix()}" }
    def artifactName = Task {
      s"${build.dist.artifactName()}-native-${nativeSuffix()}"
    }

    // Use assembly jar as the upstream ivy classpath rather than using runClasspath
    // directly to try and avoid native image command length problems on windows
    def nativeImageClasspath =
      Seq(build.runner.launcher.resolvedIvyAssembly().pathRef) ++
        build.runner.launcher.upstreamLocalAssemblyClasspath() ++
        build.runner.launcher.localClasspath()

    def localBinName = "mill-native"

    def cacheBinarySuffix = Task.Anon { s"-native-${artifactOsSuffix()}-${artifactCpuSuffix()}" }

    def executableRaw = nativeImage()

    def nativeImageOptions = Seq(
      "--no-fallback",
      "--enable-url-protocols=https",
      "-Os"
      // Enable JVisualVM support
      // https://www.graalvm.org/latest/tools/visualvm/#using-visualvm-with-graalvm-native-executables
      // "--enable-monitoring=jvmstat,heapdump"
    )

    def jvmId = Settings.graalvmJvmId
  }
}
