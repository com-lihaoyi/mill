package build.dist
import mill._, scalalib._, publish._
import mill.util.Jvm
import mill.api.JarManifest
import de.tobiasroeser.mill.vcs.version.VcsVersion
import $file.ci.upload

object `package` extends RootModule with build.MillPublishJavaModule {

  /**
   * Version of [[dist]] meant for local integration testing within the Mill
   * repo. Looks mostly the same as [[dist]], except it does not have a reference
   * to itself in its [[testTransitiveDeps]], to avoid a circular dependency.
   */
  object dist0 extends build.MillPublishJavaModule {
    // disable scalafix here because it crashes when a module has no sources
    def fix(args: String*): Command[Unit] = Task.Command {}
    def moduleDeps = Seq(build.runner, build.idea)

    def testTransitiveDeps = build.runner.testTransitiveDeps() ++ Seq(
      build.main.graphviz.testDep(),
      build.main.maven.testDep(),
      build.runner.linenumbers.testDep(),
      build.scalalib.backgroundwrapper.testDep(),
      build.contrib.bloop.testDep(),
      build.contrib.buildinfo.testDep(),
      build.contrib.scoverage.testDep(),
      build.contrib.scoverage.worker2.testDep(),
      build.contrib.jmh.testDep(),
      build.contrib.playlib.testDep(),
      build.contrib.playlib.worker("2.8").testDep(),
      build.contrib.testng.testDep(),
      build.bsp.worker.testDep(),
      build.testkit.testDep()
    )
  }

  def jar = rawAssembly()
  def moduleDeps = Seq(build.runner, build.idea, build.main.init)

  def testTransitiveDeps = dist0.testTransitiveDeps() ++ Seq(
    (s"com.lihaoyi-${build.dist.artifactId()}", dist0.runClasspath().map(_.path).mkString("\n"))
  )

  def genTask(m: ScalaModule) = Task.Anon { Seq(m.jar(), m.sourceJar()) ++ m.runClasspath() }

  def forkArgs: T[Seq[String]] = Task {
    val genIdeaArgs =
      genTask(build.main.define)() ++
        genTask(build.main.eval)() ++
        genTask(build.main)() ++
        genTask(build.scalalib)() ++
        genTask(build.kotlinlib)() ++
        genTask(build.scalajslib)() ++
        genTask(build.scalanativelib)() ++
        genTask(build.javascriptlib)() ++
        genTask(build.pythonlib)()

    testArgs() ++
      Seq(
        "-DMILL_CLASSPATH=" + runClasspath().map(_.path.toString).mkString(","),
        "-DMILL_BUILD_LIBRARIES=" + genIdeaArgs.map(_.path).mkString(","),
        s"-DBSP4J_VERSION=${build.Deps.bsp4j.dep.version}"
      )
  }

  def launcher = Task {
    val isWin = scala.util.Properties.isWin
    val outputPath = Task.dest / (if (isWin) "run.bat" else "run")

    os.write(outputPath, prependShellScript())
    if (!isWin) os.perms.set(outputPath, "rwxrwxrwx")

    PathRef(outputPath)
  }

  def extraPublish: T[Seq[PublishInfo]] = Task {
    Seq(PublishInfo(file = assembly(), classifier = Some("assembly"), ivyConfig = "compile"))
  }

  def assemblyRules = super.assemblyRules ++ Seq(
    mill.scalalib.Assembly.Rule.ExcludePattern("mill/local-test-overrides/.*")
  )

  // All modules that we want to aggregate as part of this `dev` assembly.
  // Excluding itself, and the `dist` module that uses it
  lazy val allPublishModules = build.millInternal.modules.collect {
    case m: PublishModule if (m ne this) && (m ne build.dist) => m
  }

  def rawAssembly = Task {
    val version = build.millVersion()
    val devRunClasspath = runClasspath().map(_.path)
    val filename = if (scala.util.Properties.isWin) "mill.bat" else "mill"
    val commonArgs = Seq(
      // Workaround for Zinc/JNA bug
      // https://github.com/sbt/sbt/blame/6718803ee6023ab041b045a6988fafcfae9d15b5/main/src/main/scala/sbt/Main.scala#L130
      "-Djna.nosys=true"
    )
    val shellArgs = Seq("-DMILL_CLASSPATH=$0") ++ commonArgs
    val cmdArgs = Seq(""""-DMILL_CLASSPATH=%~dpnx0"""") ++ commonArgs
    os.move(
      mill.scalalib.Assembly.createAssembly(
        devRunClasspath,
        prependShellScript = launcherScript(shellArgs, cmdArgs, Agg("$0"), Agg("%~dpnx0")),
        assemblyRules = assemblyRules
      ).path,
      Task.dest / filename
    )
    PathRef(Task.dest / filename)
  }
  def assembly = Task {
    Task.traverse(allPublishModules)(m => m.publishLocalCached)()
    val raw = rawAssembly().path
    os.copy(raw, Task.dest / raw.last)
    PathRef(Task.dest / raw.last)
  }

  def prependShellScript = Task {
    val (millArgs, otherArgs) =
      forkArgs().partition(arg => arg.startsWith("-DMILL") && !arg.startsWith("-DMILL_VERSION"))
    // Pass Mill options via file, due to small max args limit in Windows
    val vmOptionsFile = Task.dest / "mill.properties"
    val millOptionsContent =
      millArgs.map(_.drop(2).replace("\\", "/")).mkString(
        "\r\n"
      ) // drop -D prefix, replace \ with /
    os.write(vmOptionsFile, millOptionsContent)
    val jvmArgs = otherArgs ++ List(s"-DMILL_OPTIONS_PATH=$vmOptionsFile")
    val classpath = runClasspath().map(_.path.toString)
    launcherScript(
      jvmArgs,
      jvmArgs,
      classpath,
      Agg(pathingJar().path.toString) // TODO not working yet on Windows! see #791
    )
  }

  def pathingJar = Task {
    // see http://todayguesswhat.blogspot.com/2011/03/jar-manifestmf-class-path-referencing.html
    // for more detailed explanation
    val isWin = scala.util.Properties.isWin
    val classpath = runClasspath().map { pathRef =>
      val path =
        if (isWin) "/" + pathRef.path.toString.replace("\\", "/")
        else pathRef.path.toString
      if (path.endsWith(".jar")) path
      else path + "/"
    }.mkString(" ")
    val manifestEntries = Map[String, String](
      java.util.jar.Attributes.Name.MANIFEST_VERSION.toString -> "1.0",
      "Created-By" -> "Scala mill",
      "Class-Path" -> classpath
    )
    Jvm.createJar(Agg(), JarManifest(manifestEntries))
  }

  def run(args: Task[Args] = Task.Anon(Args())) = Task.Command(exclusive = true) {
    args().value match {
      case Nil => mill.api.Result.Failure("Need to pass in cwd as first argument to dev.run")
      case wd0 +: rest =>
        val wd = os.Path(wd0, Task.workspace)
        os.makeDir.all(wd)
        try {
          Jvm.runSubprocess(
            Seq(launcher().path.toString) ++ rest,
            forkEnv(),
            workingDir = wd
          )
          mill.api.Result.Success(())
        } catch {
          case e: Throwable =>
            mill.api.Result.Failure(s"dev.run failed with an exception. ${e.getMessage()}")
        }
    }
  }
  def launcherScript(
      shellJvmArgs: Seq[String],
      cmdJvmArgs: Seq[String],
      shellClassPath: Agg[String],
      cmdClassPath: Agg[String]
  ) = {

    val millMainClass = "mill.runner.client.MillClientMain"

    Jvm.universalScript(
      shellCommands = {
        val jvmArgsStr = shellJvmArgs.mkString(" ")
        val classpathStr = shellClassPath.mkString(":")

        s"""if [ -z "$$JAVA_HOME" ] ; then
           |  JAVACMD="java"
           |else
           |  JAVACMD="$$JAVA_HOME/bin/java"
           |fi
           |
           |# Client-server mode doesn't seem to work on WSL, just disable it for now
           |# https://stackoverflow.com/a/43618657/871202
           |if grep -qEi "(Microsoft|WSL)" /proc/version > /dev/null 2> /dev/null ; then
           |    if [ -z $$COURSIER_CACHE ] ; then
           |      COURSIER_CACHE=.coursier
           |    fi
           |fi
           |exec "$$JAVACMD" $jvmArgsStr $$JAVA_OPTS -cp "$classpathStr" $millMainClass "$$@"
           |""".stripMargin
      },
      cmdCommands = {
        val jvmArgsStr = cmdJvmArgs.mkString(" ")
        val classpathStr = cmdClassPath.mkString(";")
        s"""setlocal EnableDelayedExpansion
           |set "JAVACMD=java.exe"
           |if not "%JAVA_HOME%"=="" set "JAVACMD=%JAVA_HOME%\\bin\\java.exe"
           |if "%1" == "-i" set _I_=true
           |if "%1" == "--interactive" set _I_=true
           |if "%1" == "--repl" set _I_=true
           |if "%1" == "--no-server" set _I_=true
           |if "%1" == "--bsp" set _I_=true
           |
           |"%JAVACMD%" $jvmArgsStr %JAVA_OPTS% -cp "$classpathStr" $millMainClass %*
           |
           |endlocal
           |""".stripMargin
      }
    )
  }

  val batExt = if (scala.util.Properties.isWin) ".bat" else ""
  val DefaultLocalMillReleasePath =
    s"target/mill-release$batExt"

  /**
   * Build and install Mill locally.
   *
   * @param binFile The location where the Mill binary should be installed
   * @param ivyRepo The local Ivy repository where Mill modules should be published to
   */
  def installLocal(binFile: String = DefaultLocalMillReleasePath, ivyRepo: String = null) =
    Task.Command {
      PathRef(installLocalTask(Task.Anon(binFile), ivyRepo)())
    }

  def installLocalCache() = Task.Command {
    val path = installLocalTask(
      Task.Anon(
        (os.home / ".cache" / "mill" / "download" / (build.millVersion() + batExt)).toString()
      )
    )()
    Task.log.outputStream.println(path.toString())
    PathRef(path)
  }

  def installLocalTask(binFile: Task[String], ivyRepo: String = null): Task[os.Path] = Task.Anon {
    val millBin = build.dist.assembly()
    val targetFile = os.Path(binFile(), Task.workspace)
    if (os.exists(targetFile))
      Task.log.info(s"Overwriting existing local Mill binary at ${targetFile}")
    os.copy.over(millBin.path, targetFile, createFolders = true)
    Task.log.info(
      s"Published ${build.dist.allPublishModules.size} modules and installed ${targetFile}"
    )
    targetFile
  }

  def millBootstrap = Task.Source(Task.workspace / "mill")
  def millBootstrapBat = Task.Source(Task.workspace / "mill.bat")

  def prepareBootstrapLauncher(
      bootstrap: os.Path,
      dest: os.Path,
      buildVersion: String,
      fileName: String
  ) = {
    val outputPath = dest / fileName
    val millBootstrapGrepPrefix = "(\n *DEFAULT_MILL_VERSION=)"

    os.write(
      outputPath,
      os.read(bootstrap)
        .replaceAll(
          millBootstrapGrepPrefix + "[^\\n]+",
          "$1" + buildVersion
        )
    )

    if (!scala.util.Properties.isWin) os.perms.set(outputPath, "rwxrwxrwx")

    PathRef(outputPath)
  }
  def bootstrapLauncher = Task {
    prepareBootstrapLauncher(millBootstrap().path, Task.dest, build.millVersion(), "mill")
  }
  def bootstrapLauncherBat = Task {
    prepareBootstrapLauncher(millBootstrapBat().path, Task.dest, build.millVersion(), "mill.bat")
  }

  def examplePathsWithArtifactName: Task[Seq[(os.Path, String)]] = Task.Anon {
    for {
      exampleMod <- build.example.exampleModules
      path = exampleMod.millSourcePath
    } yield {
      val example = path.subRelativeTo(Task.workspace)
      val artifactName = build.millVersion() + "-" + example.segments.mkString("-")
      (path, artifactName)
    }
  }

  def exampleZips: T[Seq[PathRef]] = Task {
    examplePathsWithArtifactName().map { case (examplePath, exampleStr) =>
      os.copy(examplePath, Task.dest / exampleStr, createFolders = true)
      os.write(Task.dest / exampleStr / ".mill-version", build.millLastTag())
      os.copy(bootstrapLauncher().path, Task.dest / exampleStr / "mill")
      os.copy(bootstrapLauncherBat().path, Task.dest / exampleStr / "mill.bat")
      val zip = Task.dest / s"$exampleStr.zip"
      os.proc("zip", "-r", zip, exampleStr).call(cwd = Task.dest)
      PathRef(zip)
    }
  }

  def uploadToGithub(authKey: String) = Task.Command {
    val vcsState = VcsVersion.vcsState()
    val label = vcsState.format()
    if (label != build.millVersion()) sys.error("Modified mill version detected, aborting upload")
    val releaseTag = vcsState.lastTag.getOrElse(sys.error(
      "Incomplete git history. No tag found.\nIf on CI, make sure your git checkout job includes enough history."
    ))

    if (releaseTag == label) {
      // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
      requests.post(
        s"https://api.github.com/repos/${build.Settings.githubOrg}/${build.Settings.githubRepo}/releases",
        data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag, "prerelease" -> true),
        headers = Seq("Authorization" -> ("token " + authKey))
      )
    }

    val examples = exampleZips().map(z => (z.path, z.path.last))

    val zips = examples ++ Seq(
      (build.dist.assembly().path, label + "-assembly"),
      (bootstrapLauncher().path, label),
      (bootstrapLauncherBat().path, label + ".bat")
    )

    for ((zip, name) <- zips) {
      upload.apply(
        zip,
        releaseTag,
        name,
        authKey,
        build.Settings.githubOrg,
        build.Settings.githubRepo
      )
    }
  }
}
