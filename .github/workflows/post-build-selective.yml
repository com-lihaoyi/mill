name: post-build-selective
on:
  workflow_call:
    inputs:
      millargs:
        default: ''
        type: string
      java-version:
        required: true
        type: string
      os:
        default: 'ubuntu-latest'
        type: string
      timeout-minutes:
        default: 60
        type: number
      install-android-sdk:
        default: false
        type: boolean

jobs:
  run:
    runs-on: ${{ inputs.os }}
    continue-on-error: false
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:

      - uses: actions/download-artifact@v4
        with:
          path: .
          name: ${{ inputs.os }}-artifact

      - uses: ./.github/actions/post-build-setup
        with:
          java-version: ${{ inputs.java-version }}
          os: ${{ inputs.os }}

      - uses: actions/download-artifact@v4
        with:
          path: out/mill-selective-execution
          name: ${{ inputs.os }}-selective-execution-artifact

      - run: mv out/mill-selective-execution/mill-selective-execution.json out/mill-selective-execution.json

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - uses: android-actions/setup-android@v3
        if: ${{ inputs.install-android-sdk }}
        with:
          log-accepted-android-sdk-licenses: false
          cmdline-tools-version: 11076708
          packages: tools platform-tools emulator system-images;android-35;google_apis_playstore;x86_64

      - name: Enable KVM group perms
        if: ${{ inputs.install-android-sdk }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set AVD environment variable globally
        if: ${{ inputs.install-android-sdk }}
        run: echo "ANDROID_AVD_HOME=/home/runner/.config/.android/avd" >> $GITHUB_ENV

      - run: ./mill -i -k selective.resolve ${{ inputs.millargs }}

      - run: ./mill -i -k selective.run ${{ inputs.millargs }}

      - run: 'taskkill -f -im java* && rm -rf out/mill-server/*'
        if: startsWith(inputs.os, 'windows')
        shell: bash
        continue-on-error: true
       
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: always() # always run even if the previous step fails
        with:
          fail_on_failure: false
          include_passed: false
          detailed_summary: true
          annotate_only: true
          require_tests: false
          report_paths: 'out/**/test-report.xml'
