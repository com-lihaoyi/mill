package build.bsp
// imports
import mill._
import mill.contrib.buildinfo.BuildInfo
import mill.T
import millbuild._

object `package` extends RootModule with MillPublishScalaModule with BuildInfo {
  def compileModuleDeps = Seq(build.scalalib)
  def testModuleDeps = super.testModuleDeps ++ compileModuleDeps
  def buildInfoPackageName = "mill.bsp"

  def buildInfoMembers = Task {
    val workerDep = worker.publishSelfDependency()
    Seq(
      BuildInfo.Value(
        "bsp4jVersion",
        Deps.bsp4j.version,
        "BSP4j version (BSP Protocol version)."
      )
    )
  }

  override lazy val test: MillScalaTests = new Test {}
  trait Test extends MillScalaTests {
    def forkEnv: T[Map[String, String]] = Task {
      // We try to fetch this dependency with coursier in the tests
      worker.publishLocalCached()
      super.forkEnv()
    }

    def forkArgs = super.forkArgs() ++ Seq(s"-DBSP4J_VERSION=${Deps.bsp4j.version}")
  }

  object worker extends MillPublishScalaModule {
    def compileModuleDeps = Seq(
      build.bsp,
      build.scalalib,
      build.testrunner,
      build.runner
    ) ++ build.scalalib.compileModuleDeps
    def ivyDeps = Agg(Deps.bsp4j, Deps.sbtTestInterface)
  }
}
