package build.bsp
// imports
import scala.util.chaining._
import com.github.lolgab.mill.mima.Mima
import coursier.maven.MavenRepository
import de.tobiasroeser.mill.vcs.version.VcsVersion
import com.goyeau.mill.scalafix.ScalafixModule
import mill._
import mill.api.JarManifest
import mill.define.NamedTask
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.api.ZincWorkerUtil
import mill.scalalib.publish._
import mill.util.Jvm
import mill.resolve.SelectMode
import mill.contrib.buildinfo.BuildInfo
import mill.T
import mill.define.Cross

// plugins and dependencies
import $meta._
import $file.ci.shared
import $file.ci.upload


object `package` extends RootModule with build.MillPublishScalaModule with BuildInfo {
  def compileModuleDeps = Seq(build.scalalib)
  def testModuleDeps = super.testModuleDeps ++ compileModuleDeps
  def buildInfoPackageName = "mill.bsp"

  def buildInfoMembers = T {
    val workerDep = worker.publishSelfDependency()
    Seq(
      BuildInfo.Value(
        "bsp4jVersion",
        build.Deps.bsp4j.dep.version,
        "BSP4j version (BSP Protocol version)."
      )
    )
  }

  override lazy val test: MillScalaTests = new Test {}
  trait Test extends MillScalaTests {
    def forkEnv: T[Map[String, String]] = T {
      // We try to fetch this dependency with coursier in the tests
      worker.publishLocalCached()
      super.forkEnv()
    }

    def forkArgs = super.forkArgs() ++ Seq(s"-DBSP4J_VERSION=${build.Deps.bsp4j.dep.version}")
  }

  object worker extends build.MillPublishScalaModule {
    def compileModuleDeps = Seq(build.bsp, build.scalalib, build.testrunner, build.runner) ++ build.scalalib.compileModuleDeps
    def ivyDeps = Agg(build.Deps.bsp4j, build.Deps.sbtTestInterface)
  }
}
